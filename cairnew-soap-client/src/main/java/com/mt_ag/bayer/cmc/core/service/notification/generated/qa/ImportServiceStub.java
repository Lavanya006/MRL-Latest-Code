/**
 * ImportServiceStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.7.9  Built on : Nov 16, 2018 (12:05:37 GMT)
 */
package com.mt_ag.bayer.cmc.core.service.notification.generated.qa;


/*
 *  ImportServiceStub java implementation
 */
public class ImportServiceStub extends org.apache.axis2.client.Stub {
    private static int counter = 0;
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();
    private javax.xml.namespace.QName[] opNameArray = null;

    /**
     *Constructor that takes in a configContext
     */
    public ImportServiceStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public ImportServiceStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
        //To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,
                _service);

        _serviceClient.getOptions()
                      .setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    }

    /**
     * Default Constructor
     */
    public ImportServiceStub(
        org.apache.axis2.context.ConfigurationContext configurationContext)
        throws org.apache.axis2.AxisFault {
        this(configurationContext,
            "https://by-twbcs-qa.de.bayer.cnb/ImportService/services/ImportService/");
    }

    /**
     * Default Constructor
     */
    public ImportServiceStub() throws org.apache.axis2.AxisFault {
        this(
            "https://by-twbcs-qa.de.bayer.cnb/ImportService/services/ImportService/");
    }

    /**
     * Constructor taking the target endpoint
     */
    public ImportServiceStub(java.lang.String targetEndpoint)
        throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }

        counter = counter + 1;

        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) +
        "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {
        //creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService("ImportService" +
                getUniqueSuffix());
        addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[3];

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://www.sparta.org/ImportService/",
                "createAndUpdateCaseRecord"));
        _service.addOperation(__operation);

        _operations[0] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://www.sparta.org/ImportService/",
                "createAndUpdateIssueRecord"));
        _service.addOperation(__operation);

        _operations[1] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://www.sparta.org/ImportService/",
                "createCorrespondenceRecord"));
        _service.addOperation(__operation);

        _operations[2] = __operation;
    }

    //populates the faults
    private void populateFaults() {
    }

    /**
     * Auto generated method signature
     *
     * @see com.mtag.cmc.core.service.notification.generated.qa.ImportService#createAndUpdateCaseRecord
     * @param createAndUpdateCaseRecordRequest
     */
    public ImportServiceStub.CreateAndUpdateCaseRecordResponse createAndUpdateCaseRecord(
        ImportServiceStub.CreateAndUpdateCaseRecordRequest createAndUpdateCaseRecordRequest)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions()
                            .setAction("http://www.sparta.org/ImportService/createAndUpdateCaseRecord");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    createAndUpdateCaseRecordRequest,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://www.sparta.org/ImportService/",
                            "createAndUpdateCaseRecord")),
                    new javax.xml.namespace.QName(
                        "http://www.sparta.org/ImportService/",
                        "createAndUpdateCaseRecordRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    ImportServiceStub.CreateAndUpdateCaseRecordResponse.class);

            return (ImportServiceStub.CreateAndUpdateCaseRecordResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "createAndUpdateCaseRecord"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "createAndUpdateCaseRecord"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "createAndUpdateCaseRecord"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature
     *
     * @see com.mtag.cmc.core.service.notification.generated.qa.ImportService#createAndUpdateIssueRecord
     * @param createAndUpdateIssueRecordRequest
     */
    public ImportServiceStub.CreateAndUpdateIssueRecordResponse createAndUpdateIssueRecord(
        ImportServiceStub.CreateAndUpdateIssueRecordRequest createAndUpdateIssueRecordRequest)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions()
                            .setAction("http://www.sparta.org/ImportService/createAndUpdateIssueRecord");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    createAndUpdateIssueRecordRequest,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://www.sparta.org/ImportService/",
                            "createAndUpdateIssueRecord")),
                    new javax.xml.namespace.QName(
                        "http://www.sparta.org/ImportService/",
                        "createAndUpdateIssueRecordRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    ImportServiceStub.CreateAndUpdateIssueRecordResponse.class);

            return (ImportServiceStub.CreateAndUpdateIssueRecordResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "createAndUpdateIssueRecord"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "createAndUpdateIssueRecord"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "createAndUpdateIssueRecord"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature
     *
     * @see com.mtag.cmc.core.service.notification.generated.qa.ImportService#createCorrespondenceRecord
     * @param createCorrespondenceRecordRequest
     */
    public ImportServiceStub.CreateCorrespondenceRecordResponse createCorrespondenceRecord(
        ImportServiceStub.CreateCorrespondenceRecordRequest createCorrespondenceRecordRequest)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
            _operationClient.getOptions()
                            .setAction("http://www.sparta.org/ImportService/createCorrespondenceRecord");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    createCorrespondenceRecordRequest,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://www.sparta.org/ImportService/",
                            "createCorrespondenceRecord")),
                    new javax.xml.namespace.QName(
                        "http://www.sparta.org/ImportService/",
                        "createCorrespondenceRecordRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    ImportServiceStub.CreateCorrespondenceRecordResponse.class);

            return (ImportServiceStub.CreateCorrespondenceRecordResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "createCorrespondenceRecord"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "createCorrespondenceRecord"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "createCorrespondenceRecord"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        if (opNameArray == null) {
            return false;
        }

        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }

        return false;
    }

    private org.apache.axiom.om.OMElement toOM(
        ImportServiceStub.CreateAndUpdateCaseRecordRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(ImportServiceStub.CreateAndUpdateCaseRecordRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        ImportServiceStub.CreateAndUpdateCaseRecordResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(ImportServiceStub.CreateAndUpdateCaseRecordResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        ImportServiceStub.CreateAndUpdateIssueRecordRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(ImportServiceStub.CreateAndUpdateIssueRecordRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        ImportServiceStub.CreateAndUpdateIssueRecordResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(ImportServiceStub.CreateAndUpdateIssueRecordResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        ImportServiceStub.CreateCorrespondenceRecordRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(ImportServiceStub.CreateCorrespondenceRecordRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        ImportServiceStub.CreateCorrespondenceRecordResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(ImportServiceStub.CreateCorrespondenceRecordResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        ImportServiceStub.CreateAndUpdateCaseRecordRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    ImportServiceStub.CreateAndUpdateCaseRecordRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        ImportServiceStub.CreateAndUpdateIssueRecordRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    ImportServiceStub.CreateAndUpdateIssueRecordRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        ImportServiceStub.CreateCorrespondenceRecordRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    ImportServiceStub.CreateCorrespondenceRecordRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */

    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
        java.lang.Class type) throws org.apache.axis2.AxisFault {
        try {
            if (ImportServiceStub.CreateAndUpdateCaseRecordRequest.class.equals(
                        type)) {
                return ImportServiceStub.CreateAndUpdateCaseRecordRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (ImportServiceStub.CreateAndUpdateCaseRecordResponse.class.equals(
                        type)) {
                return ImportServiceStub.CreateAndUpdateCaseRecordResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (ImportServiceStub.CreateAndUpdateIssueRecordRequest.class.equals(
                        type)) {
                return ImportServiceStub.CreateAndUpdateIssueRecordRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (ImportServiceStub.CreateAndUpdateIssueRecordResponse.class.equals(
                        type)) {
                return ImportServiceStub.CreateAndUpdateIssueRecordResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (ImportServiceStub.CreateCorrespondenceRecordRequest.class.equals(
                        type)) {
                return ImportServiceStub.CreateCorrespondenceRecordRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (ImportServiceStub.CreateCorrespondenceRecordResponse.class.equals(
                        type)) {
                return ImportServiceStub.CreateCorrespondenceRecordResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

        return null;
    }

    //https://by-twbcs-qa.de.bayer.cnb/ImportService/services/ImportService/
    public static class ImportIssueType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = importIssueType
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for ImportIssueTypeSequence
         * This was an Array!
         */
        protected ImportIssueTypeSequence[] localImportIssueTypeSequence;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localImportIssueTypeSequenceTracker = false;

        public boolean isImportIssueTypeSequenceSpecified() {
            return localImportIssueTypeSequenceTracker;
        }

        /**
         * Auto generated getter method
         * @return ImportIssueTypeSequence[]
         */
        public ImportIssueTypeSequence[] getImportIssueTypeSequence() {
            return localImportIssueTypeSequence;
        }

        /**
         * validate the array for ImportIssueTypeSequence
         */
        protected void validateImportIssueTypeSequence(
            ImportIssueTypeSequence[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ImportIssueTypeSequence
         */
        public void setImportIssueTypeSequence(ImportIssueTypeSequence[] param) {
            validateImportIssueTypeSequence(param);

            localImportIssueTypeSequenceTracker = param != null;

            this.localImportIssueTypeSequence = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ImportIssueTypeSequence
         */
        public void addImportIssueTypeSequence(ImportIssueTypeSequence param) {
            if (localImportIssueTypeSequence == null) {
                localImportIssueTypeSequence = new ImportIssueTypeSequence[] {  };
            }

            //update the setting tracker
            localImportIssueTypeSequenceTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localImportIssueTypeSequence);
            list.add(param);
            this.localImportIssueTypeSequence = (ImportIssueTypeSequence[]) list.toArray(new ImportIssueTypeSequence[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":importIssueType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "importIssueType", xmlWriter);
                }
            }

            if (localImportIssueTypeSequenceTracker) {
                if (localImportIssueTypeSequence != null) {
                    for (int i = 0; i < localImportIssueTypeSequence.length;
                            i++) {
                        if (localImportIssueTypeSequence[i] != null) {
                            localImportIssueTypeSequence[i].serialize(null,
                                xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "importIssueTypeSequence cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ImportIssueType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ImportIssueType object = new ImportIssueType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"importIssueType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ImportIssueType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    try {
                        if (reader.isStartElement()) {
                            // Process the array and step past its final element's end.
                            list1.add(ImportIssueTypeSequence.Factory.parse(
                                    reader));

                            //loop until we find a start element that is not part of this array
                            boolean loopDone1 = false;

                            while (!loopDone1) {
                                // Step to next element event.
                                while (!reader.isStartElement() &&
                                        !reader.isEndElement())
                                    reader.next();

                                if (reader.isEndElement()) {
                                    //two continuous end elements means we are exiting the xml structure
                                    loopDone1 = true;
                                } else {
                                    list1.add(ImportIssueTypeSequence.Factory.parse(
                                            reader));
                                }
                            }

                            // call the converter utility  to convert and set the array
                            object.setImportIssueTypeSequence((ImportIssueTypeSequence[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                    ImportIssueTypeSequence.class, list1));
                        } // End of if for expected property start element

                        else {
                        }
                    } catch (java.lang.Exception e) {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EmailType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = emailType
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for EmailTypeSequence
         * This was an Array!
         */
        protected EmailTypeSequence[] localEmailTypeSequence;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmailTypeSequenceTracker = false;

        public boolean isEmailTypeSequenceSpecified() {
            return localEmailTypeSequenceTracker;
        }

        /**
         * Auto generated getter method
         * @return EmailTypeSequence[]
         */
        public EmailTypeSequence[] getEmailTypeSequence() {
            return localEmailTypeSequence;
        }

        /**
         * validate the array for EmailTypeSequence
         */
        protected void validateEmailTypeSequence(EmailTypeSequence[] param) {
        }

        /**
         * Auto generated setter method
         * @param param EmailTypeSequence
         */
        public void setEmailTypeSequence(EmailTypeSequence[] param) {
            validateEmailTypeSequence(param);

            localEmailTypeSequenceTracker = param != null;

            this.localEmailTypeSequence = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param EmailTypeSequence
         */
        public void addEmailTypeSequence(EmailTypeSequence param) {
            if (localEmailTypeSequence == null) {
                localEmailTypeSequence = new EmailTypeSequence[] {  };
            }

            //update the setting tracker
            localEmailTypeSequenceTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localEmailTypeSequence);
            list.add(param);
            this.localEmailTypeSequence = (EmailTypeSequence[]) list.toArray(new EmailTypeSequence[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":emailType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "emailType", xmlWriter);
                }
            }

            if (localEmailTypeSequenceTracker) {
                if (localEmailTypeSequence != null) {
                    for (int i = 0; i < localEmailTypeSequence.length; i++) {
                        if (localEmailTypeSequence[i] != null) {
                            localEmailTypeSequence[i].serialize(null, xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "emailTypeSequence cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EmailType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EmailType object = new EmailType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"emailType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (EmailType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    try {
                        if (reader.isStartElement()) {
                            // Process the array and step past its final element's end.
                            list1.add(EmailTypeSequence.Factory.parse(reader));

                            //loop until we find a start element that is not part of this array
                            boolean loopDone1 = false;

                            while (!loopDone1) {
                                // Step to next element event.
                                while (!reader.isStartElement() &&
                                        !reader.isEndElement())
                                    reader.next();

                                if (reader.isEndElement()) {
                                    //two continuous end elements means we are exiting the xml structure
                                    loopDone1 = true;
                                } else {
                                    list1.add(EmailTypeSequence.Factory.parse(
                                            reader));
                                }
                            }

                            // call the converter utility  to convert and set the array
                            object.setEmailTypeSequence((EmailTypeSequence[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                    EmailTypeSequence.class, list1));
                        } // End of if for expected property start element

                        else {
                        }
                    } catch (java.lang.Exception e) {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ImportCaseTypeSequence implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = importCaseTypeSequence
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for CaseStatus
         */
        protected org.apache.axis2.databinding.types.Token localCaseStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCaseStatusTracker = false;

        /**
         * field for IDCAIRnew
         */
        protected org.apache.axis2.databinding.types.Token localIDCAIRnew;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIDCAIRnewTracker = false;

        /**
         * field for AssignedTo
         */
        protected CaseAddressListType localAssignedTo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAssignedToTracker = false;

        /**
         * field for PersonToContact
         */
        protected CaseAddressListType localPersonToContact;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPersonToContactTracker = false;

        /**
         * field for Title
         */
        protected java.lang.String localTitle;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTitleTracker = false;

        /**
         * field for LeadProblem
         */
        protected org.apache.axis2.databinding.types.Token localLeadProblem;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLeadProblemTracker = false;

        /**
         * field for AdditionalProblem
         */
        protected org.apache.axis2.databinding.types.Token localAdditionalProblem;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAdditionalProblemTracker = false;

        /**
         * field for TypeCAIRnew
         */
        protected org.apache.axis2.databinding.types.Token localTypeCAIRnew;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeCAIRnewTracker = false;

        /**
         * field for SubtypeCAIRnew
         */
        protected org.apache.axis2.databinding.types.Token localSubtypeCAIRnew;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubtypeCAIRnewTracker = false;

        /**
         * field for CountryCaseHappened
         */
        protected org.apache.axis2.databinding.types.Token localCountryCaseHappened;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCountryCaseHappenedTracker = false;

        /**
         * field for LeadProduct
         */
        protected org.apache.axis2.databinding.types.Token localLeadProduct;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLeadProductTracker = false;

        /**
         * field for OriginalProduct
         */
        protected org.apache.axis2.databinding.types.Token localOriginalProduct;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOriginalProductTracker = false;

        /**
         * field for CountryLeadProduct
         */
        protected org.apache.axis2.databinding.types.Token localCountryLeadProduct;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCountryLeadProductTracker = false;

        /**
         * field for BatchLotNumber
         */
        protected org.apache.axis2.databinding.types.Token localBatchLotNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBatchLotNumberTracker = false;

        /**
         * field for UFI
         */
        protected org.apache.axis2.databinding.types.Token localUFI;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUFITracker = false;

        /**
         * field for PackSize
         */
        protected java.lang.String localPackSize;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackSizeTracker = false;

        /**
         * field for PackSizeUnit
         */
        protected org.apache.axis2.databinding.types.Token localPackSizeUnit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackSizeUnitTracker = false;

        /**
         * field for DetailedDescription
         */
        protected java.lang.String localDetailedDescription;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDetailedDescriptionTracker = false;

        /**
         * field for SeedProblemSubType
         */
        protected org.apache.axis2.databinding.types.Token localSeedProblemSubType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSeedProblemSubTypeTracker = false;

        /**
         * field for OtherExternalId
         */
        protected java.lang.String localOtherExternalId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOtherExternalIdTracker = false;

        /**
         * field for DistributorRetailer
         */
        protected org.apache.axis2.databinding.types.Token localDistributorRetailer;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDistributorRetailerTracker = false;

        /**
         * field for TreatedCropSystem
         */
        protected org.apache.axis2.databinding.types.Token localTreatedCropSystem;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTreatedCropSystemTracker = false;

        /**
         * field for NonTargetImpacts
         */
        protected java.lang.String localNonTargetImpacts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNonTargetImpactsTracker = false;

        /**
         * field for SeverityEstimation
         */
        protected org.apache.axis2.databinding.types.Token localSeverityEstimation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSeverityEstimationTracker = false;

        /**
         * field for Attachments
         */
        protected AttachedDocumentsType localAttachments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttachmentsTracker = false;

        /**
         * field for DateOfOccurrence
         */
        protected java.util.Date localDateOfOccurrence;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDateOfOccurrenceTracker = false;

        /**
         * field for DateOfRecommendation
         */
        protected java.util.Date localDateOfRecommendation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDateOfRecommendationTracker = false;

        /**
         * field for ReporterName
         */
        protected org.apache.axis2.databinding.types.Token localReporterName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReporterNameTracker = false;

        /**
         * field for DateFirstReportedToBayer
         */
        protected java.util.Date localDateFirstReportedToBayer;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDateFirstReportedToBayerTracker = false;

        /**
         * field for CommunicationComments
         */
        protected java.lang.String localCommunicationComments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommunicationCommentsTracker = false;

        /**
         * field for TeamMembers
         * This was an Array!
         */
        protected CaseAddressListType[] localTeamMembers;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTeamMembersTracker = false;

        /**
         * field for CAIRNewCountryManager
         * This was an Array!
         */
        protected org.apache.axis2.databinding.types.Token[] localCAIRNewCountryManager;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCAIRNewCountryManagerTracker = false;

        /**
         * field for ProblemTypeFromCRMPCC
         */
        protected java.lang.String localProblemTypeFromCRMPCC;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProblemTypeFromCRMPCCTracker = false;

        /**
         * field for OtherIdentifiedNumbers
         */
        protected java.lang.String localOtherIdentifiedNumbers;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOtherIdentifiedNumbersTracker = false;

        /**
         * field for ExternalSourceSystem
         */
        protected java.lang.String localExternalSourceSystem;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExternalSourceSystemTracker = false;

        /**
         * field for RelatedIssues
         */
        protected org.apache.axis2.databinding.types.Token localRelatedIssues;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRelatedIssuesTracker = false;

        /**
         * field for RepetitiveCases
         */
        protected org.apache.axis2.databinding.types.Token localRepetitiveCases;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRepetitiveCasesTracker = false;

        /**
         * field for CropFamily
         */
        protected org.apache.axis2.databinding.types.Token localCropFamily;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCropFamilyTracker = false;

        /**
         * field for CropVariety
         */
        protected java.lang.String localCropVariety;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCropVarietyTracker = false;

        /**
         * field for TypeOfPremises
         */
        protected org.apache.axis2.databinding.types.Token localTypeOfPremises;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfPremisesTracker = false;

        /**
         * field for TypeOfDamage
         */
        protected java.lang.String localTypeOfDamage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfDamageTracker = false;

        /**
         * field for DamageExceeding5000
         */
        protected org.apache.axis2.databinding.types.Token localDamageExceeding5000;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDamageExceeding5000Tracker = false;

        /**
         * field for CouldDamageHaveCausedInj
         */
        protected org.apache.axis2.databinding.types.Token localCouldDamageHaveCausedInj;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCouldDamageHaveCausedInjTracker = false;

        /**
         * field for LabelDirectionsFollowed
         */
        protected org.apache.axis2.databinding.types.Token localLabelDirectionsFollowed;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLabelDirectionsFollowedTracker = false;

        /**
         * field for IntentionalMisuse
         */
        protected org.apache.axis2.databinding.types.Token localIntentionalMisuse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIntentionalMisuseTracker = false;

        /**
         * field for ModeOfExposure
         */
        protected org.apache.axis2.databinding.types.Token localModeOfExposure;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localModeOfExposureTracker = false;

        /**
         * field for TaskCausingTheIncident
         */
        protected org.apache.axis2.databinding.types.Token localTaskCausingTheIncident;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTaskCausingTheIncidentTracker = false;

        /**
         * field for ExposureSite
         */
        protected org.apache.axis2.databinding.types.Token localExposureSite;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExposureSiteTracker = false;

        /**
         * field for IntendedUseSite
         */
        protected org.apache.axis2.databinding.types.Token localIntendedUseSite;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIntendedUseSiteTracker = false;

        /**
         * field for GPSCoordinates
         */
        protected org.apache.axis2.databinding.types.Token localGPSCoordinates;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGPSCoordinatesTracker = false;

        /**
         * field for ReporterContacted
         */
        protected org.apache.axis2.databinding.types.Token localReporterContacted;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReporterContactedTracker = false;

        /**
         * field for ContactDateReporter
         */
        protected java.util.Date localContactDateReporter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContactDateReporterTracker = false;

        /**
         * field for SupplierContacted
         */
        protected org.apache.axis2.databinding.types.Token localSupplierContacted;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSupplierContactedTracker = false;

        /**
         * field for ContactDateSupplier
         */
        protected java.util.Date localContactDateSupplier;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContactDateSupplierTracker = false;

        /**
         * field for SupplierAddress
         */
        protected org.apache.axis2.databinding.types.Token localSupplierAddress;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSupplierAddressTracker = false;

        /**
         * field for InspectedConditionOfCrop
         */
        protected org.apache.axis2.databinding.types.Token localInspectedConditionOfCrop;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInspectedConditionOfCropTracker = false;

        /**
         * field for MagnitudeOfEffect
         */
        protected java.math.BigDecimal localMagnitudeOfEffect;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMagnitudeOfEffectTracker = false;

        /**
         * field for CommentsOnEffectsEfficacy
         */
        protected java.lang.String localCommentsOnEffectsEfficacy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentsOnEffectsEfficacyTracker = false;

        /**
         * field for ResistanceSuspected
         */
        protected org.apache.axis2.databinding.types.Token localResistanceSuspected;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResistanceSuspectedTracker = false;

        /**
         * field for ResistanceDescription
         */
        protected java.lang.String localResistanceDescription;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResistanceDescriptionTracker = false;

        /**
         * field for IncompatibilitySuspected
         */
        protected org.apache.axis2.databinding.types.Token localIncompatibilitySuspected;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIncompatibilitySuspectedTracker = false;

        /**
         * field for IncompatibilityDescription
         */
        protected java.lang.String localIncompatibilityDescription;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIncompatibilityDescriptionTracker = false;

        /**
         * field for DescriptionOfIncidentSite
         */
        protected java.lang.String localDescriptionOfIncidentSite;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDescriptionOfIncidentSiteTracker = false;

        /**
         * field for DistanceTreatedIncidentSite
         */
        protected org.apache.axis2.databinding.types.Token localDistanceTreatedIncidentSite;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDistanceTreatedIncidentSiteTracker = false;

        /**
         * field for UnitOfMeasureWildLife
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureWildLife;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureWildLifeTracker = false;

        /**
         * field for SymptomsOfWildLifeAnimal
         */
        protected java.lang.String localSymptomsOfWildLifeAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSymptomsOfWildLifeAnimalTracker = false;

        /**
         * field for MagnitudeOfEffectWl
         */
        protected java.lang.String localMagnitudeOfEffectWl;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMagnitudeOfEffectWlTracker = false;

        /**
         * field for DescriptionOfHabitat
         */
        protected java.lang.String localDescriptionOfHabitat;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDescriptionOfHabitatTracker = false;

        /**
         * field for LocationOfDeadBeesFound
         */
        protected org.apache.axis2.databinding.types.Token localLocationOfDeadBeesFound;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLocationOfDeadBeesFoundTracker = false;

        /**
         * field for TotalNoOfColoniesInApiary
         */
        protected java.math.BigInteger localTotalNoOfColoniesInApiary;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalNoOfColoniesInApiaryTracker = false;

        /**
         * field for NumberOfAffectedHives
         */
        protected java.math.BigInteger localNumberOfAffectedHives;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberOfAffectedHivesTracker = false;

        /**
         * field for NumberOfDeadBeesFound
         */
        protected java.math.BigInteger localNumberOfDeadBeesFound;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberOfDeadBeesFoundTracker = false;

        /**
         * field for HistoryOfBeeKillsInArea
         */
        protected org.apache.axis2.databinding.types.Token localHistoryOfBeeKillsInArea;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHistoryOfBeeKillsInAreaTracker = false;

        /**
         * field for HistoryOfBeeKills
         */
        protected java.lang.String localHistoryOfBeeKills;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHistoryOfBeeKillsTracker = false;

        /**
         * field for HivesExaminedForDiseases
         */
        protected org.apache.axis2.databinding.types.Token localHivesExaminedForDiseases;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHivesExaminedForDiseasesTracker = false;

        /**
         * field for DiseasesFound
         */
        protected org.apache.axis2.databinding.types.Token localDiseasesFound;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDiseasesFoundTracker = false;

        /**
         * field for DetailsOfInfectionInfest
         * This was an Array!
         */
        protected DetailsOfInfectionInfest_type0[] localDetailsOfInfectionInfest;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDetailsOfInfectionInfestTracker = false;

        /**
         * field for CaseInvestigationContacts
         */
        protected java.lang.String localCaseInvestigationContacts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCaseInvestigationContactsTracker = false;

        /**
         * field for ExternalInvestigation
         */
        protected org.apache.axis2.databinding.types.Token localExternalInvestigation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExternalInvestigationTracker = false;

        /**
         * field for ExternalAttachments
         */
        protected AttachedDocumentsType localExternalAttachments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExternalAttachmentsTracker = false;

        /**
         * field for InvestigationAttachments
         */
        protected AttachedDocumentsType localInvestigationAttachments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInvestigationAttachmentsTracker = false;

        /**
         * field for FollowUpRequired
         */
        protected org.apache.axis2.databinding.types.Token localFollowUpRequired;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFollowUpRequiredTracker = false;

        /**
         * field for SoilType
         */
        protected org.apache.axis2.databinding.types.Token localSoilType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSoilTypeTracker = false;

        /**
         * field for PercentOrganicMatterCarbon
         */
        protected java.math.BigDecimal localPercentOrganicMatterCarbon;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPercentOrganicMatterCarbonTracker = false;

        /**
         * field for SoilMoistureWetness
         */
        protected org.apache.axis2.databinding.types.Token localSoilMoistureWetness;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSoilMoistureWetnessTracker = false;

        /**
         * field for FertilizerRegime
         */
        protected java.lang.String localFertilizerRegime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFertilizerRegimeTracker = false;

        /**
         * field for OpenerCoulter
         */
        protected java.lang.String localOpenerCoulter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOpenerCoulterTracker = false;

        /**
         * field for RainfallAfterTreatment
         */
        protected java.math.BigDecimal localRainfallAfterTreatment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRainfallAfterTreatmentTracker = false;

        /**
         * field for FurtherCommentsWeather
         */
        protected java.lang.String localFurtherCommentsWeather;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFurtherCommentsWeatherTracker = false;

        /**
         * field for SourceOfWeatherInformation
         */
        protected java.lang.String localSourceOfWeatherInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSourceOfWeatherInformationTracker = false;

        /**
         * field for GeneralWeatherInformation
         */
        protected java.lang.String localGeneralWeatherInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGeneralWeatherInformationTracker = false;

        /**
         * field for WeatherAttachments
         */
        protected AttachedDocumentsType localWeatherAttachments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWeatherAttachmentsTracker = false;

        /**
         * field for AffectedPersonInformation
         * This was an Array!
         */
        protected AffectedPersonInformation_type0[] localAffectedPersonInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAffectedPersonInformationTracker = false;

        /**
         * field for Exposures
         * This was an Array!
         */
        protected Exposures_type0[] localExposures;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExposuresTracker = false;

        /**
         * field for ExposureDetailsList
         * This was an Array!
         */
        protected ExposureDetailsList_type0[] localExposureDetailsList;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExposureDetailsListTracker = false;

        /**
         * field for DomesticAnimal
         * This was an Array!
         */
        protected DomesticAnimal_type0[] localDomesticAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomesticAnimalTracker = false;

        /**
         * field for SymptomsOfDomesticAnimal
         */
        protected java.lang.String localSymptomsOfDomesticAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSymptomsOfDomesticAnimalTracker = false;

        /**
         * field for OutcomeOfSymptomDA
         */
        protected java.lang.String localOutcomeOfSymptomDA;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOutcomeOfSymptomDATracker = false;

        /**
         * field for TimeUntilOnsetOfSymptoms
         */
        protected java.lang.String localTimeUntilOnsetOfSymptoms;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTimeUntilOnsetOfSymptomsTracker = false;

        /**
         * field for UnitOfMeasOnsetSymp
         */
        protected java.lang.String localUnitOfMeasOnsetSymp;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasOnsetSympTracker = false;

        /**
         * field for DurationOfSymptomDA
         */
        protected java.lang.String localDurationOfSymptomDA;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDurationOfSymptomDATracker = false;

        /**
         * field for UnitDurationSymptonDA
         */
        protected java.lang.String localUnitDurationSymptonDA;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitDurationSymptonDATracker = false;

        /**
         * field for MedicalTreatmentOfAnimal
         */
        protected java.lang.String localMedicalTreatmentOfAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMedicalTreatmentOfAnimalTracker = false;

        /**
         * field for HospitalizationOfAnimal
         */
        protected java.lang.String localHospitalizationOfAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHospitalizationOfAnimalTracker = false;

        /**
         * field for WildLifeDetails
         * This was an Array!
         */
        protected WildLifeDetails_type0[] localWildLifeDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWildLifeDetailsTracker = false;

        /**
         * field for BusinessSegments
         * This was an Array!
         */
        protected org.apache.axis2.databinding.types.Token[] localBusinessSegments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBusinessSegmentsTracker = false;

        /**
         * field for ProductIndication
         */
        protected java.lang.String localProductIndication;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductIndicationTracker = false;

        /**
         * field for SpecifiedContent
         */
        protected java.lang.String localSpecifiedContent;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSpecifiedContentTracker = false;

        /**
         * field for FormulationType
         */
        protected org.apache.axis2.databinding.types.Token localFormulationType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFormulationTypeTracker = false;

        /**
         * field for PackSizeAndType
         */
        protected java.lang.String localPackSizeAndType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackSizeAndTypeTracker = false;

        /**
         * field for ActiveIngredients
         * This was an Array!
         */
        protected org.apache.axis2.databinding.types.Token[] localActiveIngredients;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localActiveIngredientsTracker = false;

        /**
         * field for BayerProduct
         */
        protected org.apache.axis2.databinding.types.Token localBayerProduct;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBayerProductTracker = false;

        /**
         * field for SearchstringLeadProd
         */
        protected java.lang.String localSearchstringLeadProd;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSearchstringLeadProdTracker = false;

        /**
         * field for MaterialNumberPacked
         */
        protected org.apache.axis2.databinding.types.Token localMaterialNumberPacked;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialNumberPackedTracker = false;

        /**
         * field for MaterialNumberUnpacked
         */
        protected org.apache.axis2.databinding.types.Token localMaterialNumberUnpacked;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialNumberUnpackedTracker = false;

        /**
         * field for MaterialTextPacked
         */
        protected org.apache.axis2.databinding.types.Token localMaterialTextPacked;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialTextPackedTracker = false;

        /**
         * field for MaterialTextUnpacked
         */
        protected org.apache.axis2.databinding.types.Token localMaterialTextUnpacked;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialTextUnpackedTracker = false;

        /**
         * field for SpecificationNumber
         */
        protected org.apache.axis2.databinding.types.Token localSpecificationNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSpecificationNumberTracker = false;

        /**
         * field for ProductRegistrationNumber
         */
        protected org.apache.axis2.databinding.types.Token localProductRegistrationNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductRegistrationNumberTracker = false;

        /**
         * field for ProductSampleComments
         */
        protected org.apache.axis2.databinding.types.Token localProductSampleComments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductSampleCommentsTracker = false;

        /**
         * field for ProductSampleTaken
         */
        protected org.apache.axis2.databinding.types.Token localProductSampleTaken;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductSampleTakenTracker = false;

        /**
         * field for ProductBrandName2
         */
        protected org.apache.axis2.databinding.types.Token localProductBrandName2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductBrandName2Tracker = false;

        /**
         * field for SpecifiedContent2
         */
        protected java.lang.String localSpecifiedContent2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSpecifiedContent2Tracker = false;

        /**
         * field for FormulationType2
         */
        protected org.apache.axis2.databinding.types.Token localFormulationType2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFormulationType2Tracker = false;

        /**
         * field for BatchLotNumber2
         */
        protected java.lang.String localBatchLotNumber2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBatchLotNumber2Tracker = false;

        /**
         * field for UFI2
         */
        protected java.lang.String localUFI2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUFI2Tracker = false;

        /**
         * field for PackSizeAndType2
         */
        protected java.lang.String localPackSizeAndType2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackSizeAndType2Tracker = false;

        /**
         * field for ActiveIngredients2
         * This was an Array!
         */
        protected org.apache.axis2.databinding.types.Token[] localActiveIngredients2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localActiveIngredients2Tracker = false;

        /**
         * field for BayerProduct2
         */
        protected org.apache.axis2.databinding.types.Token localBayerProduct2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBayerProduct2Tracker = false;

        /**
         * field for SearchstringAddProd
         */
        protected java.lang.String localSearchstringAddProd;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSearchstringAddProdTracker = false;

        /**
         * field for MaterialNumberPacked2
         */
        protected org.apache.axis2.databinding.types.Token localMaterialNumberPacked2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialNumberPacked2Tracker = false;

        /**
         * field for MaterialNumberUnpacked2
         */
        protected org.apache.axis2.databinding.types.Token localMaterialNumberUnpacked2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialNumberUnpacked2Tracker = false;

        /**
         * field for MaterialTextPacked2
         */
        protected org.apache.axis2.databinding.types.Token localMaterialTextPacked2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialTextPacked2Tracker = false;

        /**
         * field for MaterialTextUnpacked2
         */
        protected org.apache.axis2.databinding.types.Token localMaterialTextUnpacked2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialTextUnpacked2Tracker = false;

        /**
         * field for SpecificationNumber2
         */
        protected org.apache.axis2.databinding.types.Token localSpecificationNumber2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSpecificationNumber2Tracker = false;

        /**
         * field for ProdRegistrationNumber2
         */
        protected org.apache.axis2.databinding.types.Token localProdRegistrationNumber2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProdRegistrationNumber2Tracker = false;

        /**
         * field for ProductSampleComments2
         */
        protected org.apache.axis2.databinding.types.Token localProductSampleComments2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductSampleComments2Tracker = false;

        /**
         * field for ProductSampleTaken2
         */
        protected org.apache.axis2.databinding.types.Token localProductSampleTaken2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductSampleTaken2Tracker = false;

        /**
         * field for FurtherProducts
         */
        protected java.lang.String localFurtherProducts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFurtherProductsTracker = false;

        /**
         * field for AttachmentsForProducts
         */
        protected AttachedDocumentsType localAttachmentsForProducts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttachmentsForProductsTracker = false;

        /**
         * field for FurtherCommentsOnProducts
         */
        protected java.lang.String localFurtherCommentsOnProducts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFurtherCommentsOnProductsTracker = false;

        /**
         * field for DepotName
         */
        protected java.lang.String localDepotName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDepotNameTracker = false;

        /**
         * field for Packaging
         * This was an Array!
         */
        protected Packaging_type0[] localPackaging;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackagingTracker = false;

        /**
         * field for CommentOnPackaging
         */
        protected java.lang.String localCommentOnPackaging;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentOnPackagingTracker = false;

        /**
         * field for AttachementsForPackaging
         */
        protected AttachedDocumentsType localAttachementsForPackaging;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttachementsForPackagingTracker = false;

        /**
         * field for FormulationDetails
         * This was an Array!
         */
        protected FormulationDetails_type0[] localFormulationDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFormulationDetailsTracker = false;

        /**
         * field for DeliveryNumber
         */
        protected org.apache.axis2.databinding.types.Token localDeliveryNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeliveryNumberTracker = false;

        /**
         * field for DeliveryItem
         */
        protected org.apache.axis2.databinding.types.Token localDeliveryItem;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeliveryItemTracker = false;

        /**
         * field for CustomerNameSoldTo
         */
        protected java.lang.String localCustomerNameSoldTo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerNameSoldToTracker = false;

        /**
         * field for CustomerNameShippedTo
         */
        protected java.lang.String localCustomerNameShippedTo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerNameShippedToTracker = false;

        /**
         * field for CustomerSAPcodeSoldTo
         */
        protected org.apache.axis2.databinding.types.Token localCustomerSAPcodeSoldTo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerSAPcodeSoldToTracker = false;

        /**
         * field for CustomerSAPCodeShippedTo
         */
        protected org.apache.axis2.databinding.types.Token localCustomerSAPCodeShippedTo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerSAPCodeShippedToTracker = false;

        /**
         * field for TotalQuantity
         */
        protected java.math.BigDecimal localTotalQuantity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalQuantityTracker = false;

        /**
         * field for UnitOfMeasurementQuantity
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasurementQuantity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasurementQuantityTracker = false;

        /**
         * field for DamagedQuantity
         */
        protected java.math.BigDecimal localDamagedQuantity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDamagedQuantityTracker = false;

        /**
         * field for MarketValueOfAffectedGoods
         */
        protected java.math.BigDecimal localMarketValueOfAffectedGoods;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMarketValueOfAffectedGoodsTracker = false;

        /**
         * field for CurrencyType
         */
        protected org.apache.axis2.databinding.types.Token localCurrencyType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCurrencyTypeTracker = false;

        /**
         * field for DeliveryNumber2
         */
        protected org.apache.axis2.databinding.types.Token localDeliveryNumber2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeliveryNumber2Tracker = false;

        /**
         * field for DeliveryItem2
         */
        protected org.apache.axis2.databinding.types.Token localDeliveryItem2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeliveryItem2Tracker = false;

        /**
         * field for CustomerNameSoldTo2
         */
        protected java.lang.String localCustomerNameSoldTo2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerNameSoldTo2Tracker = false;

        /**
         * field for CustomerNameShippedTo2
         */
        protected java.lang.String localCustomerNameShippedTo2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerNameShippedTo2Tracker = false;

        /**
         * field for CustomerSAPCodeSoldTo2
         */
        protected org.apache.axis2.databinding.types.Token localCustomerSAPCodeSoldTo2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerSAPCodeSoldTo2Tracker = false;

        /**
         * field for CustomerSAPCodeShippedTo2
         */
        protected org.apache.axis2.databinding.types.Token localCustomerSAPCodeShippedTo2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerSAPCodeShippedTo2Tracker = false;

        /**
         * field for DistributorRetailer2
         */
        protected org.apache.axis2.databinding.types.Token localDistributorRetailer2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDistributorRetailer2Tracker = false;

        /**
         * field for DepotName2
         */
        protected java.lang.String localDepotName2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDepotName2Tracker = false;

        /**
         * field for TotalQuantity2
         */
        protected java.math.BigDecimal localTotalQuantity2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalQuantity2Tracker = false;

        /**
         * field for UnitOfMeasurementQuantity2
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasurementQuantity2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasurementQuantity2Tracker = false;

        /**
         * field for DamagedQuantity2
         */
        protected java.math.BigDecimal localDamagedQuantity2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDamagedQuantity2Tracker = false;

        /**
         * field for MarketValueOfAffectedGoods2
         */
        protected java.math.BigDecimal localMarketValueOfAffectedGoods2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMarketValueOfAffectedGoods2Tracker = false;

        /**
         * field for CurrencyType2
         */
        protected java.lang.String localCurrencyType2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCurrencyType2Tracker = false;

        /**
         * field for CommentsOnDelivery
         */
        protected java.lang.String localCommentsOnDelivery;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentsOnDeliveryTracker = false;

        /**
         * field for AttachmentsForDelivery
         */
        protected AttachedDocumentsType localAttachmentsForDelivery;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttachmentsForDeliveryTracker = false;

        /**
         * field for Applications
         * This was an Array!
         */
        protected Applications_type0[] localApplications;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApplicationsTracker = false;

        /**
         * field for PriorAppliedProducts
         * This was an Array!
         */
        protected PriorAppliedProducts_type0[] localPriorAppliedProducts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPriorAppliedProductsTracker = false;

        /**
         * field for DateOfLastApplication
         */
        protected java.util.Date localDateOfLastApplication;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDateOfLastApplicationTracker = false;

        /**
         * field for CommentOnApplication
         */
        protected java.lang.String localCommentOnApplication;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentOnApplicationTracker = false;

        /**
         * field for UserALicensedApplicator
         */
        protected org.apache.axis2.databinding.types.Token localUserALicensedApplicator;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUserALicensedApplicatorTracker = false;

        /**
         * field for ApplicationRecordAdded
         */
        protected org.apache.axis2.databinding.types.Token localApplicationRecordAdded;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApplicationRecordAddedTracker = false;

        /**
         * field for ApplicationRecord
         */
        protected AttachedDocumentsType localApplicationRecord;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApplicationRecordTracker = false;

        /**
         * field for BufferZone
         */
        protected java.lang.String localBufferZone;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBufferZoneTracker = false;

        /**
         * field for UnitOfMeasureBuffer
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureBuffer;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureBufferTracker = false;

        /**
         * field for NonBCSPrdApplInVicinity
         */
        protected org.apache.axis2.databinding.types.Token localNonBCSPrdApplInVicinity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNonBCSPrdApplInVicinityTracker = false;

        /**
         * field for SeedBrandVariety
         */
        protected java.lang.String localSeedBrandVariety;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSeedBrandVarietyTracker = false;

        /**
         * field for SeedLot
         */
        protected java.lang.String localSeedLot;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSeedLotTracker = false;

        /**
         * field for SeedCompany
         */
        protected java.lang.String localSeedCompany;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSeedCompanyTracker = false;

        /**
         * field for FurtherInformationOnSeed
         */
        protected java.lang.String localFurtherInformationOnSeed;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFurtherInformationOnSeedTracker = false;

        /**
         * field for ProcessorName
         */
        protected java.lang.String localProcessorName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProcessorNameTracker = false;

        /**
         * field for SeedTreatmentFacility
         */
        protected java.lang.String localSeedTreatmentFacility;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSeedTreatmentFacilityTracker = false;

        /**
         * field for ProcessorLocation
         */
        protected java.lang.String localProcessorLocation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProcessorLocationTracker = false;

        /**
         * field for LoadingTestResult
         */
        protected java.lang.String localLoadingTestResult;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLoadingTestResultTracker = false;

        /**
         * field for GerminationTestResult
         */
        protected java.lang.String localGerminationTestResult;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGerminationTestResultTracker = false;

        /**
         * field for VigorTestResult
         */
        protected java.lang.String localVigorTestResult;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVigorTestResultTracker = false;

        /**
         * field for SowingDatePlanted
         */
        protected java.util.Date localSowingDatePlanted;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSowingDatePlantedTracker = false;

        /**
         * field for SeedRatePlants
         */
        protected java.math.BigDecimal localSeedRatePlants;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSeedRatePlantsTracker = false;

        /**
         * field for UnitOfMeasureSeedPlants
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureSeedPlants;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureSeedPlantsTracker = false;

        /**
         * field for CommentOnSowing
         */
        protected java.lang.String localCommentOnSowing;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentOnSowingTracker = false;

        /**
         * field for DescriptionOfMachineryUsed
         */
        protected java.lang.String localDescriptionOfMachineryUsed;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDescriptionOfMachineryUsedTracker = false;

        /**
         * field for NozzleType
         */
        protected org.apache.axis2.databinding.types.Token localNozzleType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNozzleTypeTracker = false;

        /**
         * field for DropletSizeOfNozzles
         */
        protected java.lang.String localDropletSizeOfNozzles;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDropletSizeOfNozzlesTracker = false;

        /**
         * field for Symptoms
         * This was an Array!
         */
        protected Symptoms_type0[] localSymptoms;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSymptomsTracker = false;

        /**
         * field for FirstAid
         * This was an Array!
         */
        protected FirstAid_type0[] localFirstAid;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstAidTracker = false;

        /**
         * field for LabTestsPerformedMD
         */
        protected org.apache.axis2.databinding.types.Token localLabTestsPerformedMD;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLabTestsPerformedMDTracker = false;

        /**
         * field for LabTestsAttachment
         */
        protected AttachedDocumentsType localLabTestsAttachment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLabTestsAttachmentTracker = false;

        /**
         * field for Circumstances
         * This was an Array!
         */
        protected Circumstances_type0[] localCircumstances;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCircumstancesTracker = false;

        /**
         * field for TimeBetwTreatmAndDetect
         */
        protected java.math.BigDecimal localTimeBetwTreatmAndDetect;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTimeBetwTreatmAndDetectTracker = false;

        /**
         * field for UnitOfMeasureTime
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureTimeTracker = false;

        /**
         * field for CommentsOnCircumstances
         */
        protected java.lang.String localCommentsOnCircumstances;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentsOnCircumstancesTracker = false;

        /**
         * field for OrganizationCollectingSample
         */
        protected org.apache.axis2.databinding.types.Token localOrganizationCollectingSample;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOrganizationCollectingSampleTracker = false;

        /**
         * field for SamplingTimes
         */
        protected java.math.BigDecimal localSamplingTimes;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSamplingTimesTracker = false;

        /**
         * field for NumberOfSamples
         */
        protected java.math.BigDecimal localNumberOfSamples;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberOfSamplesTracker = false;

        /**
         * field for QuantityOfSamples
         */
        protected java.math.BigDecimal localQuantityOfSamples;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuantityOfSamplesTracker = false;

        /**
         * field for UnitOfMeasureSamples
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureSamples;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureSamplesTracker = false;

        /**
         * field for ReasonForSampling
         */
        protected java.lang.String localReasonForSampling;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReasonForSamplingTracker = false;

        /**
         * field for PercentOfOrganicCarbon
         */
        protected java.math.BigDecimal localPercentOfOrganicCarbon;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPercentOfOrganicCarbonTracker = false;

        /**
         * field for SoilSeriesTexture
         */
        protected org.apache.axis2.databinding.types.Token localSoilSeriesTexture;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSoilSeriesTextureTracker = false;

        /**
         * field for HydraulicConductivity
         */
        protected java.lang.String localHydraulicConductivity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHydraulicConductivityTracker = false;

        /**
         * field for AquiferDescription
         */
        protected java.lang.String localAquiferDescription;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAquiferDescriptionTracker = false;

        /**
         * field for HydraulicGroup
         */
        protected org.apache.axis2.databinding.types.Token localHydraulicGroup;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHydraulicGroupTracker = false;

        /**
         * field for PhOfWater
         */
        protected java.math.BigDecimal localPhOfWater;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPhOfWaterTracker = false;

        /**
         * field for MaxRainFall
         */
        protected java.math.BigDecimal localMaxRainFall;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaxRainFallTracker = false;

        /**
         * field for UnitOfMeasureRainfall
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureRainfall;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureRainfallTracker = false;

        /**
         * field for AnnualTotalRain
         */
        protected java.math.BigDecimal localAnnualTotalRain;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnnualTotalRainTracker = false;

        /**
         * field for UnitOfMeasureTotalRain
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureTotalRain;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureTotalRainTracker = false;

        /**
         * field for AnnualTotalIrrigation
         */
        protected java.math.BigDecimal localAnnualTotalIrrigation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnnualTotalIrrigationTracker = false;

        /**
         * field for UnitOfMeasureTotalIrr
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureTotalIrr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureTotalIrrTracker = false;

        /**
         * field for WeatherComments
         */
        protected java.lang.String localWeatherComments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWeatherCommentsTracker = false;

        /**
         * field for YearsOfProductUsage
         */
        protected java.lang.String localYearsOfProductUsage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localYearsOfProductUsageTracker = false;

        /**
         * field for WellIdUse
         */
        protected java.lang.String localWellIdUse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWellIdUseTracker = false;

        /**
         * field for DepthToWater
         */
        protected java.math.BigDecimal localDepthToWater;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDepthToWaterTracker = false;

        /**
         * field for UnitOfMeasureDepth
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureDepth;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureDepthTracker = false;

        /**
         * field for ScreenedInterval
         */
        protected org.apache.axis2.databinding.types.Token localScreenedInterval;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localScreenedIntervalTracker = false;

        /**
         * field for UnitOfMeasureScreened
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureScreened;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureScreenedTracker = false;

        /**
         * field for PartOfALargerStudyEnv
         */
        protected org.apache.axis2.databinding.types.Token localPartOfALargerStudyEnv;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPartOfALargerStudyEnvTracker = false;

        /**
         * field for Irrigation
         * This was an Array!
         */
        protected Irrigation_type0[] localIrrigation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIrrigationTracker = false;

        /**
         * field for AnalyticalInformation
         * This was an Array!
         */
        protected AnalyticalInformation_type0[] localAnalyticalInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnalyticalInformationTracker = false;

        /**
         * field for SampleCollectingStoring
         */
        protected java.lang.String localSampleCollectingStoring;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSampleCollectingStoringTracker = false;

        /**
         * field for SampleCollectingAttachments
         */
        protected AttachedDocumentsType localSampleCollectingAttachments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSampleCollectingAttachmentsTracker = false;

        /**
         * field for LabTestsPerformed
         */
        protected org.apache.axis2.databinding.types.Token localLabTestsPerformed;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLabTestsPerformedTracker = false;

        /**
         * field for LabResults
         */
        protected AttachedDocumentsType localLabResults;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLabResultsTracker = false;

        /**
         * field for PollenAnalysisDone
         */
        protected org.apache.axis2.databinding.types.Token localPollenAnalysisDone;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPollenAnalysisDoneTracker = false;

        /**
         * field for PollenAnalysisResult
         */
        protected AttachedDocumentsType localPollenAnalysisResult;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPollenAnalysisResultTracker = false;

        /**
         * field for CommentOnAnalytics
         */
        protected java.lang.String localCommentOnAnalytics;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentOnAnalyticsTracker = false;

        /**
         * field for AreaAmountAffected
         */
        protected java.math.BigDecimal localAreaAmountAffected;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAreaAmountAffectedTracker = false;

        /**
         * field for UnitOfMeasureAffected
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureAffected;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureAffectedTracker = false;

        /**
         * field for AreaAmountTreated
         */
        protected java.math.BigDecimal localAreaAmountTreated;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAreaAmountTreatedTracker = false;

        /**
         * field for UnitOfMeasureTreated
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureTreated;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureTreatedTracker = false;

        /**
         * field for PotentialYieldReduction
         */
        protected java.lang.String localPotentialYieldReduction;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPotentialYieldReductionTracker = false;

        /**
         * field for TotalPotentialFinancialRisk
         */
        protected java.math.BigDecimal localTotalPotentialFinancialRisk;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalPotentialFinancialRiskTracker = false;

        /**
         * field for CurrencyPotentialCosts
         */
        protected org.apache.axis2.databinding.types.Token localCurrencyPotentialCosts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCurrencyPotentialCostsTracker = false;

        /**
         * field for TotalPotentialFinancialRiskEUR
         */
        protected java.math.BigDecimal localTotalPotentialFinancialRiskEUR;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalPotentialFinancialRiskEURTracker = false;

        /**
         * field for PotentialFinancialRisk
         * This was an Array!
         */
        protected PotentialFinancialRisk_type0[] localPotentialFinancialRisk;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPotentialFinancialRiskTracker = false;

        /**
         * field for CommentsOnFinancialRisk
         */
        protected java.lang.String localCommentsOnFinancialRisk;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentsOnFinancialRiskTracker = false;

        /**
         * field for SummaryOfInvestigation
         */
        protected java.lang.String localSummaryOfInvestigation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSummaryOfInvestigationTracker = false;

        /**
         * field for SeverityCAIRnew
         */
        protected org.apache.axis2.databinding.types.Token localSeverityCAIRnew;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSeverityCAIRnewTracker = false;

        /**
         * field for AttributionToBCSProduct
         */
        protected org.apache.axis2.databinding.types.Token localAttributionToBCSProduct;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttributionToBCSProductTracker = false;

        /**
         * field for ComplaintJustified
         */
        protected org.apache.axis2.databinding.types.Token localComplaintJustified;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localComplaintJustifiedTracker = false;

        /**
         * field for SettlementRequired
         */
        protected org.apache.axis2.databinding.types.Token localSettlementRequired;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSettlementRequiredTracker = false;

        /**
         * field for CustomerExpectations
         */
        protected java.lang.String localCustomerExpectations;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerExpectationsTracker = false;

        /**
         * field for SettlementProposal
         */
        protected java.lang.String localSettlementProposal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSettlementProposalTracker = false;

        /**
         * field for SettlementAccepted
         */
        protected org.apache.axis2.databinding.types.Token localSettlementAccepted;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSettlementAcceptedTracker = false;

        /**
         * field for SourceOfRecommendation
         */
        protected java.lang.String localSourceOfRecommendation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSourceOfRecommendationTracker = false;

        /**
         * field for RecommendationSheet
         */
        protected AttachedDocumentsType localRecommendationSheet;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRecommendationSheetTracker = false;

        /**
         * field for ApprovedPayment
         */
        protected java.math.BigDecimal localApprovedPayment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApprovedPaymentTracker = false;

        /**
         * field for CurrencyTypePayment
         */
        protected org.apache.axis2.databinding.types.Token localCurrencyTypePayment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCurrencyTypePaymentTracker = false;

        /**
         * field for ApprovalDate
         */
        protected java.util.Date localApprovalDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApprovalDateTracker = false;

        /**
         * field for SettlementAttachments
         */
        protected AttachedDocumentsType localSettlementAttachments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSettlementAttachmentsTracker = false;

        /**
         * field for CorrectiveActionsComment
         */
        protected org.apache.axis2.databinding.types.Token localCorrectiveActionsComment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCorrectiveActionsCommentTracker = false;

        /**
         * field for CorrectiveActionsAttachments
         */
        protected AttachedDocumentsType localCorrectiveActionsAttachments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCorrectiveActionsAttachmentsTracker = false;

        /**
         * field for ReworkDestructionComments
         */
        protected java.lang.String localReworkDestructionComments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReworkDestructionCommentsTracker = false;

        /**
         * field for IncidentLocation
         */
        protected java.lang.String localIncidentLocation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIncidentLocationTracker = false;

        /**
         * field for OriginOfCase
         */
        protected org.apache.axis2.databinding.types.Token localOriginOfCase;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOriginOfCaseTracker = false;

        /**
         * field for Deficiency
         * This was an Array!
         */
        protected Deficiency_type0[] localDeficiency;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeficiencyTracker = false;

        /**
         * field for TotalActualCosts
         */
        protected java.math.BigDecimal localTotalActualCosts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalActualCostsTracker = false;

        /**
         * field for CurrencyActualCosts
         */
        protected org.apache.axis2.databinding.types.Token localCurrencyActualCosts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCurrencyActualCostsTracker = false;

        /**
         * field for TotalActualCostsEUR
         */
        protected java.math.BigDecimal localTotalActualCostsEUR;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalActualCostsEURTracker = false;

        /**
         * field for ActualCosts
         * This was an Array!
         */
        protected ActualCosts_type0[] localActualCosts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localActualCostsTracker = false;

        /**
         * field for CommentsOnActualCosts
         */
        protected java.lang.String localCommentsOnActualCosts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentsOnActualCostsTracker = false;

        /**
         * field for SummaryOfActionsTaken
         */
        protected java.lang.String localSummaryOfActionsTaken;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSummaryOfActionsTakenTracker = false;

        /**
         * field for AuthorityReporting
         * This was an Array!
         */
        protected AuthorityReporting_type0[] localAuthorityReporting;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAuthorityReportingTracker = false;

        /**
         * field for AllegePhytotoxNonTarget
         */
        protected java.lang.String localAllegePhytotoxNonTarget;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAllegePhytotoxNonTargetTracker = false;

        /**
         * field for AffectedNonTarget
         */
        protected java.lang.String localAffectedNonTarget;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAffectedNonTargetTracker = false;

        /**
         * field for PresentApplicNonTarget
         */
        protected java.lang.String localPresentApplicNonTarget;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPresentApplicNonTargetTracker = false;

        /**
         * field for ExplicitLabelWarningNonT
         */
        protected java.lang.String localExplicitLabelWarningNonT;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExplicitLabelWarningNonTTracker = false;

        /**
         * field for AllegePhytotoxTargetCrop
         */
        protected java.lang.String localAllegePhytotoxTargetCrop;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAllegePhytotoxTargetCropTracker = false;

        /**
         * field for PhytotoxLethalTargetCrop
         */
        protected java.lang.String localPhytotoxLethalTargetCrop;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPhytotoxLethalTargetCropTracker = false;

        /**
         * field for PhytotoxNLWarnTargetCr
         */
        protected java.lang.String localPhytotoxNLWarnTargetCr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPhytotoxNLWarnTargetCrTracker = false;

        /**
         * field for AllegeDrift
         */
        protected java.lang.String localAllegeDrift;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAllegeDriftTracker = false;

        /**
         * field for ConsistantAnticipatedDrift
         */
        protected java.lang.String localConsistantAnticipatedDrift;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localConsistantAnticipatedDriftTracker = false;

        /**
         * field for AcresAffectedDrift
         */
        protected java.math.BigDecimal localAcresAffectedDrift;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAcresAffectedDriftTracker = false;

        /**
         * field for WhatAffected
         */
        protected java.lang.String localWhatAffected;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWhatAffectedTracker = false;

        /**
         * field for DistanceAffected
         */
        protected java.lang.String localDistanceAffected;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDistanceAffectedTracker = false;

        /**
         * field for PlantSpeciesAffected
         */
        protected java.lang.String localPlantSpeciesAffected;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPlantSpeciesAffectedTracker = false;

        /**
         * field for ToxicEffectPest
         */
        protected java.lang.String localToxicEffectPest;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToxicEffectPestTracker = false;

        /**
         * field for SecondaryPest
         */
        protected java.lang.String localSecondaryPest;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSecondaryPestTracker = false;

        /**
         * field for ExposedConcentrate
         */
        protected java.lang.String localExposedConcentrate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExposedConcentrateTracker = false;

        /**
         * field for SampleAnalyzed
         */
        protected java.lang.String localSampleAnalyzed;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSampleAnalyzedTracker = false;

        /**
         * field for CreationDate
         */
        protected java.util.Date localCreationDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreationDateTracker = false;

        /**
         * field for CloseBy
         */
        protected org.apache.axis2.databinding.types.Token localCloseBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCloseByTracker = false;

        /**
         * field for CloseOn
         */
        protected java.util.Date localCloseOn;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCloseOnTracker = false;

        /**
         * field for CancelBy
         */
        protected org.apache.axis2.databinding.types.Token localCancelBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCancelByTracker = false;

        /**
         * field for CancelOn
         */
        protected java.util.Date localCancelOn;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCancelOnTracker = false;

        /**
         * field for Stakeholders
         * This was an Array!
         */
        protected org.apache.axis2.databinding.types.Token[] localStakeholders;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStakeholdersTracker = false;

        /**
         * field for Reporter
         */
        protected CaseAddressListType localReporter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReporterTracker = false;

        /**
         * field for GrowerCustomerComplainant
         */
        protected CaseAddressListType localGrowerCustomerComplainant;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGrowerCustomerComplainantTracker = false;

        /**
         * field for DistributorRetailerAgronomist
         */
        protected CaseAddressListType localDistributorRetailerAgronomist;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDistributorRetailerAgronomistTracker = false;

        /**
         * field for Registrant
         */
        protected CaseAddressListType localRegistrant;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistrantTracker = false;

        /**
         * field for RegistrantContact
         */
        protected CaseAddressListType localRegistrantContact;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistrantContactTracker = false;

        /**
         * field for Originator
         */
        protected CaseAddressListType localOriginator;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOriginatorTracker = false;

        /**
         * field for AdditionalPerson1
         */
        protected CaseAddressListType localAdditionalPerson1;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAdditionalPerson1Tracker = false;

        /**
         * field for AdditionalPerson2
         */
        protected CaseAddressListType localAdditionalPerson2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAdditionalPerson2Tracker = false;

        /**
         * field for AdditionalPerson3
         */
        protected CaseAddressListType localAdditionalPerson3;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAdditionalPerson3Tracker = false;

        /**
         * field for AdditionalPerson4
         */
        protected CaseAddressListType localAdditionalPerson4;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAdditionalPerson4Tracker = false;

        /**
         * field for AdditionalPerson5
         */
        protected CaseAddressListType localAdditionalPerson5;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAdditionalPerson5Tracker = false;

        /**
         * field for ExternalInvestigationComment
         */
        protected java.lang.String localExternalInvestigationComment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExternalInvestigationCommentTracker = false;

        /**
         * field for PackSize2
         */
        protected java.lang.String localPackSize2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackSize2Tracker = false;

        /**
         * field for PackSizeUnit2
         */
        protected org.apache.axis2.databinding.types.Token localPackSizeUnit2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackSizeUnit2Tracker = false;

        /**
         * field for UDF_01
         */
        protected org.apache.axis2.databinding.types.Token localUDF_01;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_01Tracker = false;

        /**
         * field for UDF_02
         */
        protected org.apache.axis2.databinding.types.Token localUDF_02;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_02Tracker = false;

        /**
         * field for UDF_03
         */
        protected org.apache.axis2.databinding.types.Token localUDF_03;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_03Tracker = false;

        /**
         * field for UDF_04
         */
        protected org.apache.axis2.databinding.types.Token localUDF_04;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_04Tracker = false;

        /**
         * field for UDF_05
         */
        protected org.apache.axis2.databinding.types.Token localUDF_05;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_05Tracker = false;

        /**
         * field for UDF_06
         */
        protected org.apache.axis2.databinding.types.Token localUDF_06;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_06Tracker = false;

        /**
         * field for UDF_07
         */
        protected org.apache.axis2.databinding.types.Token localUDF_07;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_07Tracker = false;

        /**
         * field for UDF_08
         */
        protected org.apache.axis2.databinding.types.Token localUDF_08;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_08Tracker = false;

        /**
         * field for UDF_09
         */
        protected org.apache.axis2.databinding.types.Token localUDF_09;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_09Tracker = false;

        /**
         * field for UDF_10
         */
        protected org.apache.axis2.databinding.types.Token localUDF_10;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_10Tracker = false;

        /**
         * field for UDF_11
         */
        protected org.apache.axis2.databinding.types.Token localUDF_11;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_11Tracker = false;

        /**
         * field for UDF_12
         */
        protected org.apache.axis2.databinding.types.Token localUDF_12;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_12Tracker = false;

        /**
         * field for UDF_13
         */
        protected org.apache.axis2.databinding.types.Token localUDF_13;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_13Tracker = false;

        /**
         * field for UDF_14
         */
        protected org.apache.axis2.databinding.types.Token localUDF_14;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_14Tracker = false;

        /**
         * field for UDF_15
         */
        protected org.apache.axis2.databinding.types.Token localUDF_15;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_15Tracker = false;

        /**
         * field for UDF_16
         */
        protected org.apache.axis2.databinding.types.Token localUDF_16;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_16Tracker = false;

        /**
         * field for UDF_17
         */
        protected org.apache.axis2.databinding.types.Token localUDF_17;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_17Tracker = false;

        /**
         * field for UDF_18
         */
        protected org.apache.axis2.databinding.types.Token localUDF_18;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_18Tracker = false;

        /**
         * field for UDF_19
         */
        protected org.apache.axis2.databinding.types.Token localUDF_19;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_19Tracker = false;

        /**
         * field for UDF_20
         */
        protected org.apache.axis2.databinding.types.Token localUDF_20;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_20Tracker = false;

        /**
         * field for UDF_21
         */
        protected org.apache.axis2.databinding.types.Token localUDF_21;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_21Tracker = false;

        /**
         * field for UDF_22
         */
        protected org.apache.axis2.databinding.types.Token localUDF_22;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_22Tracker = false;

        /**
         * field for UDF_23
         */
        protected org.apache.axis2.databinding.types.Token localUDF_23;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_23Tracker = false;

        /**
         * field for UDF_24
         */
        protected org.apache.axis2.databinding.types.Token localUDF_24;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_24Tracker = false;

        /**
         * field for UDF_25
         */
        protected org.apache.axis2.databinding.types.Token localUDF_25;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_25Tracker = false;

        /**
         * field for UDF_26
         */
        protected org.apache.axis2.databinding.types.Token localUDF_26;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_26Tracker = false;

        /**
         * field for UDF_27
         */
        protected org.apache.axis2.databinding.types.Token localUDF_27;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_27Tracker = false;

        /**
         * field for UDF_28
         */
        protected org.apache.axis2.databinding.types.Token localUDF_28;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_28Tracker = false;

        /**
         * field for UDF_29
         */
        protected org.apache.axis2.databinding.types.Token localUDF_29;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_29Tracker = false;

        /**
         * field for UDF_30
         */
        protected org.apache.axis2.databinding.types.Token localUDF_30;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_30Tracker = false;

        /**
         * field for UDF_31
         */
        protected org.apache.axis2.databinding.types.Token localUDF_31;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_31Tracker = false;

        /**
         * field for UDF_32
         */
        protected org.apache.axis2.databinding.types.Token localUDF_32;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_32Tracker = false;

        /**
         * field for UDF_33
         */
        protected org.apache.axis2.databinding.types.Token localUDF_33;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_33Tracker = false;

        /**
         * field for UDF_34
         */
        protected org.apache.axis2.databinding.types.Token localUDF_34;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_34Tracker = false;

        /**
         * field for UDF_35
         */
        protected org.apache.axis2.databinding.types.Token localUDF_35;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_35Tracker = false;

        /**
         * field for UDF_36
         */
        protected org.apache.axis2.databinding.types.Token localUDF_36;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_36Tracker = false;

        /**
         * field for UDF_37
         */
        protected org.apache.axis2.databinding.types.Token localUDF_37;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_37Tracker = false;

        /**
         * field for UDF_38
         */
        protected org.apache.axis2.databinding.types.Token localUDF_38;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_38Tracker = false;

        /**
         * field for UDF_39
         */
        protected org.apache.axis2.databinding.types.Token localUDF_39;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_39Tracker = false;

        /**
         * field for UDF_40
         */
        protected org.apache.axis2.databinding.types.Token localUDF_40;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_40Tracker = false;

        /**
         * field for UDF_41
         */
        protected org.apache.axis2.databinding.types.Token localUDF_41;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_41Tracker = false;

        /**
         * field for UDF_42
         */
        protected org.apache.axis2.databinding.types.Token localUDF_42;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_42Tracker = false;

        /**
         * field for UDF_43
         */
        protected org.apache.axis2.databinding.types.Token localUDF_43;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_43Tracker = false;

        /**
         * field for UDF_44
         */
        protected org.apache.axis2.databinding.types.Token localUDF_44;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_44Tracker = false;

        /**
         * field for UDF_45
         */
        protected org.apache.axis2.databinding.types.Token localUDF_45;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_45Tracker = false;

        /**
         * field for UDF_46
         */
        protected org.apache.axis2.databinding.types.Token localUDF_46;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_46Tracker = false;

        /**
         * field for UDF_47
         */
        protected org.apache.axis2.databinding.types.Token localUDF_47;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_47Tracker = false;

        /**
         * field for UDF_48
         */
        protected org.apache.axis2.databinding.types.Token localUDF_48;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_48Tracker = false;

        /**
         * field for UDF_49
         */
        protected org.apache.axis2.databinding.types.Token localUDF_49;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_49Tracker = false;

        /**
         * field for UDF_50
         */
        protected org.apache.axis2.databinding.types.Token localUDF_50;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUDF_50Tracker = false;

        public boolean isCaseStatusSpecified() {
            return localCaseStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCaseStatus() {
            return localCaseStatus;
        }

        /**
         * Auto generated setter method
         * @param param CaseStatus
         */
        public void setCaseStatus(
            org.apache.axis2.databinding.types.Token param) {
            localCaseStatusTracker = param != null;

            this.localCaseStatus = param;
        }

        public boolean isIDCAIRnewSpecified() {
            return localIDCAIRnewTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIDCAIRnew() {
            return localIDCAIRnew;
        }

        /**
         * Auto generated setter method
         * @param param IDCAIRnew
         */
        public void setIDCAIRnew(org.apache.axis2.databinding.types.Token param) {
            localIDCAIRnewTracker = param != null;

            this.localIDCAIRnew = param;
        }

        public boolean isAssignedToSpecified() {
            return localAssignedToTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getAssignedTo() {
            return localAssignedTo;
        }

        /**
         * Auto generated setter method
         * @param param AssignedTo
         */
        public void setAssignedTo(CaseAddressListType param) {
            localAssignedToTracker = param != null;

            this.localAssignedTo = param;
        }

        public boolean isPersonToContactSpecified() {
            return localPersonToContactTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getPersonToContact() {
            return localPersonToContact;
        }

        /**
         * Auto generated setter method
         * @param param PersonToContact
         */
        public void setPersonToContact(CaseAddressListType param) {
            localPersonToContactTracker = param != null;

            this.localPersonToContact = param;
        }

        public boolean isTitleSpecified() {
            return localTitleTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTitle() {
            return localTitle;
        }

        /**
         * Auto generated setter method
         * @param param Title
         */
        public void setTitle(java.lang.String param) {
            localTitleTracker = param != null;

            this.localTitle = param;
        }

        public boolean isLeadProblemSpecified() {
            return localLeadProblemTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getLeadProblem() {
            return localLeadProblem;
        }

        /**
         * Auto generated setter method
         * @param param LeadProblem
         */
        public void setLeadProblem(
            org.apache.axis2.databinding.types.Token param) {
            localLeadProblemTracker = param != null;

            this.localLeadProblem = param;
        }

        public boolean isAdditionalProblemSpecified() {
            return localAdditionalProblemTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getAdditionalProblem() {
            return localAdditionalProblem;
        }

        /**
         * Auto generated setter method
         * @param param AdditionalProblem
         */
        public void setAdditionalProblem(
            org.apache.axis2.databinding.types.Token param) {
            localAdditionalProblemTracker = param != null;

            this.localAdditionalProblem = param;
        }

        public boolean isTypeCAIRnewSpecified() {
            return localTypeCAIRnewTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTypeCAIRnew() {
            return localTypeCAIRnew;
        }

        /**
         * Auto generated setter method
         * @param param TypeCAIRnew
         */
        public void setTypeCAIRnew(
            org.apache.axis2.databinding.types.Token param) {
            localTypeCAIRnewTracker = param != null;

            this.localTypeCAIRnew = param;
        }

        public boolean isSubtypeCAIRnewSpecified() {
            return localSubtypeCAIRnewTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSubtypeCAIRnew() {
            return localSubtypeCAIRnew;
        }

        /**
         * Auto generated setter method
         * @param param SubtypeCAIRnew
         */
        public void setSubtypeCAIRnew(
            org.apache.axis2.databinding.types.Token param) {
            localSubtypeCAIRnewTracker = param != null;

            this.localSubtypeCAIRnew = param;
        }

        public boolean isCountryCaseHappenedSpecified() {
            return localCountryCaseHappenedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCountryCaseHappened() {
            return localCountryCaseHappened;
        }

        /**
         * Auto generated setter method
         * @param param CountryCaseHappened
         */
        public void setCountryCaseHappened(
            org.apache.axis2.databinding.types.Token param) {
            localCountryCaseHappenedTracker = param != null;

            this.localCountryCaseHappened = param;
        }

        public boolean isLeadProductSpecified() {
            return localLeadProductTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getLeadProduct() {
            return localLeadProduct;
        }

        /**
         * Auto generated setter method
         * @param param LeadProduct
         */
        public void setLeadProduct(
            org.apache.axis2.databinding.types.Token param) {
            localLeadProductTracker = param != null;

            this.localLeadProduct = param;
        }

        public boolean isOriginalProductSpecified() {
            return localOriginalProductTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getOriginalProduct() {
            return localOriginalProduct;
        }

        /**
         * Auto generated setter method
         * @param param OriginalProduct
         */
        public void setOriginalProduct(
            org.apache.axis2.databinding.types.Token param) {
            localOriginalProductTracker = param != null;

            this.localOriginalProduct = param;
        }

        public boolean isCountryLeadProductSpecified() {
            return localCountryLeadProductTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCountryLeadProduct() {
            return localCountryLeadProduct;
        }

        /**
         * Auto generated setter method
         * @param param CountryLeadProduct
         */
        public void setCountryLeadProduct(
            org.apache.axis2.databinding.types.Token param) {
            localCountryLeadProductTracker = param != null;

            this.localCountryLeadProduct = param;
        }

        public boolean isBatchLotNumberSpecified() {
            return localBatchLotNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getBatchLotNumber() {
            return localBatchLotNumber;
        }

        /**
         * Auto generated setter method
         * @param param BatchLotNumber
         */
        public void setBatchLotNumber(
            org.apache.axis2.databinding.types.Token param) {
            localBatchLotNumberTracker = param != null;

            this.localBatchLotNumber = param;
        }

        public boolean isUFISpecified() {
            return localUFITracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUFI() {
            return localUFI;
        }

        /**
         * Auto generated setter method
         * @param param UFI
         */
        public void setUFI(org.apache.axis2.databinding.types.Token param) {
            localUFITracker = param != null;

            this.localUFI = param;
        }

        public boolean isPackSizeSpecified() {
            return localPackSizeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPackSize() {
            return localPackSize;
        }

        /**
         * Auto generated setter method
         * @param param PackSize
         */
        public void setPackSize(java.lang.String param) {
            localPackSizeTracker = param != null;

            this.localPackSize = param;
        }

        public boolean isPackSizeUnitSpecified() {
            return localPackSizeUnitTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPackSizeUnit() {
            return localPackSizeUnit;
        }

        /**
         * Auto generated setter method
         * @param param PackSizeUnit
         */
        public void setPackSizeUnit(
            org.apache.axis2.databinding.types.Token param) {
            localPackSizeUnitTracker = param != null;

            this.localPackSizeUnit = param;
        }

        public boolean isDetailedDescriptionSpecified() {
            return localDetailedDescriptionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDetailedDescription() {
            return localDetailedDescription;
        }

        /**
         * Auto generated setter method
         * @param param DetailedDescription
         */
        public void setDetailedDescription(java.lang.String param) {
            localDetailedDescriptionTracker = param != null;

            this.localDetailedDescription = param;
        }

        public boolean isSeedProblemSubTypeSpecified() {
            return localSeedProblemSubTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSeedProblemSubType() {
            return localSeedProblemSubType;
        }

        /**
         * Auto generated setter method
         * @param param SeedProblemSubType
         */
        public void setSeedProblemSubType(
            org.apache.axis2.databinding.types.Token param) {
            localSeedProblemSubTypeTracker = param != null;

            this.localSeedProblemSubType = param;
        }

        public boolean isOtherExternalIdSpecified() {
            return localOtherExternalIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOtherExternalId() {
            return localOtherExternalId;
        }

        /**
         * Auto generated setter method
         * @param param OtherExternalId
         */
        public void setOtherExternalId(java.lang.String param) {
            localOtherExternalIdTracker = param != null;

            this.localOtherExternalId = param;
        }

        public boolean isDistributorRetailerSpecified() {
            return localDistributorRetailerTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDistributorRetailer() {
            return localDistributorRetailer;
        }

        /**
         * Auto generated setter method
         * @param param DistributorRetailer
         */
        public void setDistributorRetailer(
            org.apache.axis2.databinding.types.Token param) {
            localDistributorRetailerTracker = param != null;

            this.localDistributorRetailer = param;
        }

        public boolean isTreatedCropSystemSpecified() {
            return localTreatedCropSystemTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTreatedCropSystem() {
            return localTreatedCropSystem;
        }

        /**
         * Auto generated setter method
         * @param param TreatedCropSystem
         */
        public void setTreatedCropSystem(
            org.apache.axis2.databinding.types.Token param) {
            localTreatedCropSystemTracker = param != null;

            this.localTreatedCropSystem = param;
        }

        public boolean isNonTargetImpactsSpecified() {
            return localNonTargetImpactsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getNonTargetImpacts() {
            return localNonTargetImpacts;
        }

        /**
         * Auto generated setter method
         * @param param NonTargetImpacts
         */
        public void setNonTargetImpacts(java.lang.String param) {
            localNonTargetImpactsTracker = param != null;

            this.localNonTargetImpacts = param;
        }

        public boolean isSeverityEstimationSpecified() {
            return localSeverityEstimationTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSeverityEstimation() {
            return localSeverityEstimation;
        }

        /**
         * Auto generated setter method
         * @param param SeverityEstimation
         */
        public void setSeverityEstimation(
            org.apache.axis2.databinding.types.Token param) {
            localSeverityEstimationTracker = param != null;

            this.localSeverityEstimation = param;
        }

        public boolean isAttachmentsSpecified() {
            return localAttachmentsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getAttachments() {
            return localAttachments;
        }

        /**
         * Auto generated setter method
         * @param param Attachments
         */
        public void setAttachments(AttachedDocumentsType param) {
            localAttachmentsTracker = param != null;

            this.localAttachments = param;
        }

        public boolean isDateOfOccurrenceSpecified() {
            return localDateOfOccurrenceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getDateOfOccurrence() {
            return localDateOfOccurrence;
        }

        /**
         * Auto generated setter method
         * @param param DateOfOccurrence
         */
        public void setDateOfOccurrence(java.util.Date param) {
            localDateOfOccurrenceTracker = param != null;

            this.localDateOfOccurrence = param;
        }

        public boolean isDateOfRecommendationSpecified() {
            return localDateOfRecommendationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getDateOfRecommendation() {
            return localDateOfRecommendation;
        }

        /**
         * Auto generated setter method
         * @param param DateOfRecommendation
         */
        public void setDateOfRecommendation(java.util.Date param) {
            localDateOfRecommendationTracker = param != null;

            this.localDateOfRecommendation = param;
        }

        public boolean isReporterNameSpecified() {
            return localReporterNameTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getReporterName() {
            return localReporterName;
        }

        /**
         * Auto generated setter method
         * @param param ReporterName
         */
        public void setReporterName(
            org.apache.axis2.databinding.types.Token param) {
            localReporterNameTracker = param != null;

            this.localReporterName = param;
        }

        public boolean isDateFirstReportedToBayerSpecified() {
            return localDateFirstReportedToBayerTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getDateFirstReportedToBayer() {
            return localDateFirstReportedToBayer;
        }

        /**
         * Auto generated setter method
         * @param param DateFirstReportedToBayer
         */
        public void setDateFirstReportedToBayer(java.util.Date param) {
            localDateFirstReportedToBayerTracker = param != null;

            this.localDateFirstReportedToBayer = param;
        }

        public boolean isCommunicationCommentsSpecified() {
            return localCommunicationCommentsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommunicationComments() {
            return localCommunicationComments;
        }

        /**
         * Auto generated setter method
         * @param param CommunicationComments
         */
        public void setCommunicationComments(java.lang.String param) {
            localCommunicationCommentsTracker = param != null;

            this.localCommunicationComments = param;
        }

        public boolean isTeamMembersSpecified() {
            return localTeamMembersTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType[]
         */
        public CaseAddressListType[] getTeamMembers() {
            return localTeamMembers;
        }

        /**
         * validate the array for TeamMembers
         */
        protected void validateTeamMembers(CaseAddressListType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param TeamMembers
         */
        public void setTeamMembers(CaseAddressListType[] param) {
            validateTeamMembers(param);

            localTeamMembersTracker = param != null;

            this.localTeamMembers = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param CaseAddressListType
         */
        public void addTeamMembers(CaseAddressListType param) {
            if (localTeamMembers == null) {
                localTeamMembers = new CaseAddressListType[] {  };
            }

            //update the setting tracker
            localTeamMembersTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localTeamMembers);
            list.add(param);
            this.localTeamMembers = (CaseAddressListType[]) list.toArray(new CaseAddressListType[list.size()]);
        }

        public boolean isCAIRNewCountryManagerSpecified() {
            return localCAIRNewCountryManagerTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token[]
         */
        public org.apache.axis2.databinding.types.Token[] getCAIRNewCountryManager() {
            return localCAIRNewCountryManager;
        }

        /**
         * validate the array for CAIRNewCountryManager
         */
        protected void validateCAIRNewCountryManager(
            org.apache.axis2.databinding.types.Token[] param) {
        }

        /**
         * Auto generated setter method
         * @param param CAIRNewCountryManager
         */
        public void setCAIRNewCountryManager(
            org.apache.axis2.databinding.types.Token[] param) {
            validateCAIRNewCountryManager(param);

            localCAIRNewCountryManagerTracker = param != null;

            this.localCAIRNewCountryManager = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param org.apache.axis2.databinding.types.Token
         */
        public void addCAIRNewCountryManager(
            org.apache.axis2.databinding.types.Token param) {
            if (localCAIRNewCountryManager == null) {
                localCAIRNewCountryManager = new org.apache.axis2.databinding.types.Token[] {
                        
                    };
            }

            //update the setting tracker
            localCAIRNewCountryManagerTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localCAIRNewCountryManager);
            list.add(param);
            this.localCAIRNewCountryManager = (org.apache.axis2.databinding.types.Token[]) list.toArray(new org.apache.axis2.databinding.types.Token[list.size()]);
        }

        public boolean isProblemTypeFromCRMPCCSpecified() {
            return localProblemTypeFromCRMPCCTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProblemTypeFromCRMPCC() {
            return localProblemTypeFromCRMPCC;
        }

        /**
         * Auto generated setter method
         * @param param ProblemTypeFromCRMPCC
         */
        public void setProblemTypeFromCRMPCC(java.lang.String param) {
            localProblemTypeFromCRMPCCTracker = param != null;

            this.localProblemTypeFromCRMPCC = param;
        }

        public boolean isOtherIdentifiedNumbersSpecified() {
            return localOtherIdentifiedNumbersTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOtherIdentifiedNumbers() {
            return localOtherIdentifiedNumbers;
        }

        /**
         * Auto generated setter method
         * @param param OtherIdentifiedNumbers
         */
        public void setOtherIdentifiedNumbers(java.lang.String param) {
            localOtherIdentifiedNumbersTracker = param != null;

            this.localOtherIdentifiedNumbers = param;
        }

        public boolean isExternalSourceSystemSpecified() {
            return localExternalSourceSystemTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getExternalSourceSystem() {
            return localExternalSourceSystem;
        }

        /**
         * Auto generated setter method
         * @param param ExternalSourceSystem
         */
        public void setExternalSourceSystem(java.lang.String param) {
            localExternalSourceSystemTracker = param != null;

            this.localExternalSourceSystem = param;
        }

        public boolean isRelatedIssuesSpecified() {
            return localRelatedIssuesTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getRelatedIssues() {
            return localRelatedIssues;
        }

        /**
         * Auto generated setter method
         * @param param RelatedIssues
         */
        public void setRelatedIssues(
            org.apache.axis2.databinding.types.Token param) {
            localRelatedIssuesTracker = param != null;

            this.localRelatedIssues = param;
        }

        public boolean isRepetitiveCasesSpecified() {
            return localRepetitiveCasesTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getRepetitiveCases() {
            return localRepetitiveCases;
        }

        /**
         * Auto generated setter method
         * @param param RepetitiveCases
         */
        public void setRepetitiveCases(
            org.apache.axis2.databinding.types.Token param) {
            localRepetitiveCasesTracker = param != null;

            this.localRepetitiveCases = param;
        }

        public boolean isCropFamilySpecified() {
            return localCropFamilyTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCropFamily() {
            return localCropFamily;
        }

        /**
         * Auto generated setter method
         * @param param CropFamily
         */
        public void setCropFamily(
            org.apache.axis2.databinding.types.Token param) {
            localCropFamilyTracker = param != null;

            this.localCropFamily = param;
        }

        public boolean isCropVarietySpecified() {
            return localCropVarietyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCropVariety() {
            return localCropVariety;
        }

        /**
         * Auto generated setter method
         * @param param CropVariety
         */
        public void setCropVariety(java.lang.String param) {
            localCropVarietyTracker = param != null;

            this.localCropVariety = param;
        }

        public boolean isTypeOfPremisesSpecified() {
            return localTypeOfPremisesTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTypeOfPremises() {
            return localTypeOfPremises;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfPremises
         */
        public void setTypeOfPremises(
            org.apache.axis2.databinding.types.Token param) {
            localTypeOfPremisesTracker = param != null;

            this.localTypeOfPremises = param;
        }

        public boolean isTypeOfDamageSpecified() {
            return localTypeOfDamageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTypeOfDamage() {
            return localTypeOfDamage;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfDamage
         */
        public void setTypeOfDamage(java.lang.String param) {
            localTypeOfDamageTracker = param != null;

            this.localTypeOfDamage = param;
        }

        public boolean isDamageExceeding5000Specified() {
            return localDamageExceeding5000Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDamageExceeding5000() {
            return localDamageExceeding5000;
        }

        /**
         * Auto generated setter method
         * @param param DamageExceeding5000
         */
        public void setDamageExceeding5000(
            org.apache.axis2.databinding.types.Token param) {
            localDamageExceeding5000Tracker = param != null;

            this.localDamageExceeding5000 = param;
        }

        public boolean isCouldDamageHaveCausedInjSpecified() {
            return localCouldDamageHaveCausedInjTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCouldDamageHaveCausedInj() {
            return localCouldDamageHaveCausedInj;
        }

        /**
         * Auto generated setter method
         * @param param CouldDamageHaveCausedInj
         */
        public void setCouldDamageHaveCausedInj(
            org.apache.axis2.databinding.types.Token param) {
            localCouldDamageHaveCausedInjTracker = param != null;

            this.localCouldDamageHaveCausedInj = param;
        }

        public boolean isLabelDirectionsFollowedSpecified() {
            return localLabelDirectionsFollowedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getLabelDirectionsFollowed() {
            return localLabelDirectionsFollowed;
        }

        /**
         * Auto generated setter method
         * @param param LabelDirectionsFollowed
         */
        public void setLabelDirectionsFollowed(
            org.apache.axis2.databinding.types.Token param) {
            localLabelDirectionsFollowedTracker = param != null;

            this.localLabelDirectionsFollowed = param;
        }

        public boolean isIntentionalMisuseSpecified() {
            return localIntentionalMisuseTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIntentionalMisuse() {
            return localIntentionalMisuse;
        }

        /**
         * Auto generated setter method
         * @param param IntentionalMisuse
         */
        public void setIntentionalMisuse(
            org.apache.axis2.databinding.types.Token param) {
            localIntentionalMisuseTracker = param != null;

            this.localIntentionalMisuse = param;
        }

        public boolean isModeOfExposureSpecified() {
            return localModeOfExposureTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getModeOfExposure() {
            return localModeOfExposure;
        }

        /**
         * Auto generated setter method
         * @param param ModeOfExposure
         */
        public void setModeOfExposure(
            org.apache.axis2.databinding.types.Token param) {
            localModeOfExposureTracker = param != null;

            this.localModeOfExposure = param;
        }

        public boolean isTaskCausingTheIncidentSpecified() {
            return localTaskCausingTheIncidentTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTaskCausingTheIncident() {
            return localTaskCausingTheIncident;
        }

        /**
         * Auto generated setter method
         * @param param TaskCausingTheIncident
         */
        public void setTaskCausingTheIncident(
            org.apache.axis2.databinding.types.Token param) {
            localTaskCausingTheIncidentTracker = param != null;

            this.localTaskCausingTheIncident = param;
        }

        public boolean isExposureSiteSpecified() {
            return localExposureSiteTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getExposureSite() {
            return localExposureSite;
        }

        /**
         * Auto generated setter method
         * @param param ExposureSite
         */
        public void setExposureSite(
            org.apache.axis2.databinding.types.Token param) {
            localExposureSiteTracker = param != null;

            this.localExposureSite = param;
        }

        public boolean isIntendedUseSiteSpecified() {
            return localIntendedUseSiteTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIntendedUseSite() {
            return localIntendedUseSite;
        }

        /**
         * Auto generated setter method
         * @param param IntendedUseSite
         */
        public void setIntendedUseSite(
            org.apache.axis2.databinding.types.Token param) {
            localIntendedUseSiteTracker = param != null;

            this.localIntendedUseSite = param;
        }

        public boolean isGPSCoordinatesSpecified() {
            return localGPSCoordinatesTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getGPSCoordinates() {
            return localGPSCoordinates;
        }

        /**
         * Auto generated setter method
         * @param param GPSCoordinates
         */
        public void setGPSCoordinates(
            org.apache.axis2.databinding.types.Token param) {
            localGPSCoordinatesTracker = param != null;

            this.localGPSCoordinates = param;
        }

        public boolean isReporterContactedSpecified() {
            return localReporterContactedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getReporterContacted() {
            return localReporterContacted;
        }

        /**
         * Auto generated setter method
         * @param param ReporterContacted
         */
        public void setReporterContacted(
            org.apache.axis2.databinding.types.Token param) {
            localReporterContactedTracker = param != null;

            this.localReporterContacted = param;
        }

        public boolean isContactDateReporterSpecified() {
            return localContactDateReporterTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getContactDateReporter() {
            return localContactDateReporter;
        }

        /**
         * Auto generated setter method
         * @param param ContactDateReporter
         */
        public void setContactDateReporter(java.util.Date param) {
            localContactDateReporterTracker = param != null;

            this.localContactDateReporter = param;
        }

        public boolean isSupplierContactedSpecified() {
            return localSupplierContactedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSupplierContacted() {
            return localSupplierContacted;
        }

        /**
         * Auto generated setter method
         * @param param SupplierContacted
         */
        public void setSupplierContacted(
            org.apache.axis2.databinding.types.Token param) {
            localSupplierContactedTracker = param != null;

            this.localSupplierContacted = param;
        }

        public boolean isContactDateSupplierSpecified() {
            return localContactDateSupplierTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getContactDateSupplier() {
            return localContactDateSupplier;
        }

        /**
         * Auto generated setter method
         * @param param ContactDateSupplier
         */
        public void setContactDateSupplier(java.util.Date param) {
            localContactDateSupplierTracker = param != null;

            this.localContactDateSupplier = param;
        }

        public boolean isSupplierAddressSpecified() {
            return localSupplierAddressTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSupplierAddress() {
            return localSupplierAddress;
        }

        /**
         * Auto generated setter method
         * @param param SupplierAddress
         */
        public void setSupplierAddress(
            org.apache.axis2.databinding.types.Token param) {
            localSupplierAddressTracker = param != null;

            this.localSupplierAddress = param;
        }

        public boolean isInspectedConditionOfCropSpecified() {
            return localInspectedConditionOfCropTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getInspectedConditionOfCrop() {
            return localInspectedConditionOfCrop;
        }

        /**
         * Auto generated setter method
         * @param param InspectedConditionOfCrop
         */
        public void setInspectedConditionOfCrop(
            org.apache.axis2.databinding.types.Token param) {
            localInspectedConditionOfCropTracker = param != null;

            this.localInspectedConditionOfCrop = param;
        }

        public boolean isMagnitudeOfEffectSpecified() {
            return localMagnitudeOfEffectTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getMagnitudeOfEffect() {
            return localMagnitudeOfEffect;
        }

        /**
         * Auto generated setter method
         * @param param MagnitudeOfEffect
         */
        public void setMagnitudeOfEffect(java.math.BigDecimal param) {
            localMagnitudeOfEffectTracker = param != null;

            this.localMagnitudeOfEffect = param;
        }

        public boolean isCommentsOnEffectsEfficacySpecified() {
            return localCommentsOnEffectsEfficacyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentsOnEffectsEfficacy() {
            return localCommentsOnEffectsEfficacy;
        }

        /**
         * Auto generated setter method
         * @param param CommentsOnEffectsEfficacy
         */
        public void setCommentsOnEffectsEfficacy(java.lang.String param) {
            localCommentsOnEffectsEfficacyTracker = param != null;

            this.localCommentsOnEffectsEfficacy = param;
        }

        public boolean isResistanceSuspectedSpecified() {
            return localResistanceSuspectedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getResistanceSuspected() {
            return localResistanceSuspected;
        }

        /**
         * Auto generated setter method
         * @param param ResistanceSuspected
         */
        public void setResistanceSuspected(
            org.apache.axis2.databinding.types.Token param) {
            localResistanceSuspectedTracker = param != null;

            this.localResistanceSuspected = param;
        }

        public boolean isResistanceDescriptionSpecified() {
            return localResistanceDescriptionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getResistanceDescription() {
            return localResistanceDescription;
        }

        /**
         * Auto generated setter method
         * @param param ResistanceDescription
         */
        public void setResistanceDescription(java.lang.String param) {
            localResistanceDescriptionTracker = param != null;

            this.localResistanceDescription = param;
        }

        public boolean isIncompatibilitySuspectedSpecified() {
            return localIncompatibilitySuspectedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIncompatibilitySuspected() {
            return localIncompatibilitySuspected;
        }

        /**
         * Auto generated setter method
         * @param param IncompatibilitySuspected
         */
        public void setIncompatibilitySuspected(
            org.apache.axis2.databinding.types.Token param) {
            localIncompatibilitySuspectedTracker = param != null;

            this.localIncompatibilitySuspected = param;
        }

        public boolean isIncompatibilityDescriptionSpecified() {
            return localIncompatibilityDescriptionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIncompatibilityDescription() {
            return localIncompatibilityDescription;
        }

        /**
         * Auto generated setter method
         * @param param IncompatibilityDescription
         */
        public void setIncompatibilityDescription(java.lang.String param) {
            localIncompatibilityDescriptionTracker = param != null;

            this.localIncompatibilityDescription = param;
        }

        public boolean isDescriptionOfIncidentSiteSpecified() {
            return localDescriptionOfIncidentSiteTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDescriptionOfIncidentSite() {
            return localDescriptionOfIncidentSite;
        }

        /**
         * Auto generated setter method
         * @param param DescriptionOfIncidentSite
         */
        public void setDescriptionOfIncidentSite(java.lang.String param) {
            localDescriptionOfIncidentSiteTracker = param != null;

            this.localDescriptionOfIncidentSite = param;
        }

        public boolean isDistanceTreatedIncidentSiteSpecified() {
            return localDistanceTreatedIncidentSiteTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDistanceTreatedIncidentSite() {
            return localDistanceTreatedIncidentSite;
        }

        /**
         * Auto generated setter method
         * @param param DistanceTreatedIncidentSite
         */
        public void setDistanceTreatedIncidentSite(
            org.apache.axis2.databinding.types.Token param) {
            localDistanceTreatedIncidentSiteTracker = param != null;

            this.localDistanceTreatedIncidentSite = param;
        }

        public boolean isUnitOfMeasureWildLifeSpecified() {
            return localUnitOfMeasureWildLifeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureWildLife() {
            return localUnitOfMeasureWildLife;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureWildLife
         */
        public void setUnitOfMeasureWildLife(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureWildLifeTracker = param != null;

            this.localUnitOfMeasureWildLife = param;
        }

        public boolean isSymptomsOfWildLifeAnimalSpecified() {
            return localSymptomsOfWildLifeAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSymptomsOfWildLifeAnimal() {
            return localSymptomsOfWildLifeAnimal;
        }

        /**
         * Auto generated setter method
         * @param param SymptomsOfWildLifeAnimal
         */
        public void setSymptomsOfWildLifeAnimal(java.lang.String param) {
            localSymptomsOfWildLifeAnimalTracker = param != null;

            this.localSymptomsOfWildLifeAnimal = param;
        }

        public boolean isMagnitudeOfEffectWlSpecified() {
            return localMagnitudeOfEffectWlTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMagnitudeOfEffectWl() {
            return localMagnitudeOfEffectWl;
        }

        /**
         * Auto generated setter method
         * @param param MagnitudeOfEffectWl
         */
        public void setMagnitudeOfEffectWl(java.lang.String param) {
            localMagnitudeOfEffectWlTracker = param != null;

            this.localMagnitudeOfEffectWl = param;
        }

        public boolean isDescriptionOfHabitatSpecified() {
            return localDescriptionOfHabitatTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDescriptionOfHabitat() {
            return localDescriptionOfHabitat;
        }

        /**
         * Auto generated setter method
         * @param param DescriptionOfHabitat
         */
        public void setDescriptionOfHabitat(java.lang.String param) {
            localDescriptionOfHabitatTracker = param != null;

            this.localDescriptionOfHabitat = param;
        }

        public boolean isLocationOfDeadBeesFoundSpecified() {
            return localLocationOfDeadBeesFoundTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getLocationOfDeadBeesFound() {
            return localLocationOfDeadBeesFound;
        }

        /**
         * Auto generated setter method
         * @param param LocationOfDeadBeesFound
         */
        public void setLocationOfDeadBeesFound(
            org.apache.axis2.databinding.types.Token param) {
            localLocationOfDeadBeesFoundTracker = param != null;

            this.localLocationOfDeadBeesFound = param;
        }

        public boolean isTotalNoOfColoniesInApiarySpecified() {
            return localTotalNoOfColoniesInApiaryTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getTotalNoOfColoniesInApiary() {
            return localTotalNoOfColoniesInApiary;
        }

        /**
         * Auto generated setter method
         * @param param TotalNoOfColoniesInApiary
         */
        public void setTotalNoOfColoniesInApiary(java.math.BigInteger param) {
            localTotalNoOfColoniesInApiaryTracker = param != null;

            this.localTotalNoOfColoniesInApiary = param;
        }

        public boolean isNumberOfAffectedHivesSpecified() {
            return localNumberOfAffectedHivesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getNumberOfAffectedHives() {
            return localNumberOfAffectedHives;
        }

        /**
         * Auto generated setter method
         * @param param NumberOfAffectedHives
         */
        public void setNumberOfAffectedHives(java.math.BigInteger param) {
            localNumberOfAffectedHivesTracker = param != null;

            this.localNumberOfAffectedHives = param;
        }

        public boolean isNumberOfDeadBeesFoundSpecified() {
            return localNumberOfDeadBeesFoundTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getNumberOfDeadBeesFound() {
            return localNumberOfDeadBeesFound;
        }

        /**
         * Auto generated setter method
         * @param param NumberOfDeadBeesFound
         */
        public void setNumberOfDeadBeesFound(java.math.BigInteger param) {
            localNumberOfDeadBeesFoundTracker = param != null;

            this.localNumberOfDeadBeesFound = param;
        }

        public boolean isHistoryOfBeeKillsInAreaSpecified() {
            return localHistoryOfBeeKillsInAreaTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getHistoryOfBeeKillsInArea() {
            return localHistoryOfBeeKillsInArea;
        }

        /**
         * Auto generated setter method
         * @param param HistoryOfBeeKillsInArea
         */
        public void setHistoryOfBeeKillsInArea(
            org.apache.axis2.databinding.types.Token param) {
            localHistoryOfBeeKillsInAreaTracker = param != null;

            this.localHistoryOfBeeKillsInArea = param;
        }

        public boolean isHistoryOfBeeKillsSpecified() {
            return localHistoryOfBeeKillsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHistoryOfBeeKills() {
            return localHistoryOfBeeKills;
        }

        /**
         * Auto generated setter method
         * @param param HistoryOfBeeKills
         */
        public void setHistoryOfBeeKills(java.lang.String param) {
            localHistoryOfBeeKillsTracker = param != null;

            this.localHistoryOfBeeKills = param;
        }

        public boolean isHivesExaminedForDiseasesSpecified() {
            return localHivesExaminedForDiseasesTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getHivesExaminedForDiseases() {
            return localHivesExaminedForDiseases;
        }

        /**
         * Auto generated setter method
         * @param param HivesExaminedForDiseases
         */
        public void setHivesExaminedForDiseases(
            org.apache.axis2.databinding.types.Token param) {
            localHivesExaminedForDiseasesTracker = param != null;

            this.localHivesExaminedForDiseases = param;
        }

        public boolean isDiseasesFoundSpecified() {
            return localDiseasesFoundTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDiseasesFound() {
            return localDiseasesFound;
        }

        /**
         * Auto generated setter method
         * @param param DiseasesFound
         */
        public void setDiseasesFound(
            org.apache.axis2.databinding.types.Token param) {
            localDiseasesFoundTracker = param != null;

            this.localDiseasesFound = param;
        }

        public boolean isDetailsOfInfectionInfestSpecified() {
            return localDetailsOfInfectionInfestTracker;
        }

        /**
         * Auto generated getter method
         * @return DetailsOfInfectionInfest_type0[]
         */
        public DetailsOfInfectionInfest_type0[] getDetailsOfInfectionInfest() {
            return localDetailsOfInfectionInfest;
        }

        /**
         * validate the array for DetailsOfInfectionInfest
         */
        protected void validateDetailsOfInfectionInfest(
            DetailsOfInfectionInfest_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param DetailsOfInfectionInfest
         */
        public void setDetailsOfInfectionInfest(
            DetailsOfInfectionInfest_type0[] param) {
            validateDetailsOfInfectionInfest(param);

            localDetailsOfInfectionInfestTracker = param != null;

            this.localDetailsOfInfectionInfest = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param DetailsOfInfectionInfest_type0
         */
        public void addDetailsOfInfectionInfest(
            DetailsOfInfectionInfest_type0 param) {
            if (localDetailsOfInfectionInfest == null) {
                localDetailsOfInfectionInfest = new DetailsOfInfectionInfest_type0[] {
                        
                    };
            }

            //update the setting tracker
            localDetailsOfInfectionInfestTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localDetailsOfInfectionInfest);
            list.add(param);
            this.localDetailsOfInfectionInfest = (DetailsOfInfectionInfest_type0[]) list.toArray(new DetailsOfInfectionInfest_type0[list.size()]);
        }

        public boolean isCaseInvestigationContactsSpecified() {
            return localCaseInvestigationContactsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCaseInvestigationContacts() {
            return localCaseInvestigationContacts;
        }

        /**
         * Auto generated setter method
         * @param param CaseInvestigationContacts
         */
        public void setCaseInvestigationContacts(java.lang.String param) {
            localCaseInvestigationContactsTracker = param != null;

            this.localCaseInvestigationContacts = param;
        }

        public boolean isExternalInvestigationSpecified() {
            return localExternalInvestigationTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getExternalInvestigation() {
            return localExternalInvestigation;
        }

        /**
         * Auto generated setter method
         * @param param ExternalInvestigation
         */
        public void setExternalInvestigation(
            org.apache.axis2.databinding.types.Token param) {
            localExternalInvestigationTracker = param != null;

            this.localExternalInvestigation = param;
        }

        public boolean isExternalAttachmentsSpecified() {
            return localExternalAttachmentsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getExternalAttachments() {
            return localExternalAttachments;
        }

        /**
         * Auto generated setter method
         * @param param ExternalAttachments
         */
        public void setExternalAttachments(AttachedDocumentsType param) {
            localExternalAttachmentsTracker = param != null;

            this.localExternalAttachments = param;
        }

        public boolean isInvestigationAttachmentsSpecified() {
            return localInvestigationAttachmentsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getInvestigationAttachments() {
            return localInvestigationAttachments;
        }

        /**
         * Auto generated setter method
         * @param param InvestigationAttachments
         */
        public void setInvestigationAttachments(AttachedDocumentsType param) {
            localInvestigationAttachmentsTracker = param != null;

            this.localInvestigationAttachments = param;
        }

        public boolean isFollowUpRequiredSpecified() {
            return localFollowUpRequiredTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getFollowUpRequired() {
            return localFollowUpRequired;
        }

        /**
         * Auto generated setter method
         * @param param FollowUpRequired
         */
        public void setFollowUpRequired(
            org.apache.axis2.databinding.types.Token param) {
            localFollowUpRequiredTracker = param != null;

            this.localFollowUpRequired = param;
        }

        public boolean isSoilTypeSpecified() {
            return localSoilTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSoilType() {
            return localSoilType;
        }

        /**
         * Auto generated setter method
         * @param param SoilType
         */
        public void setSoilType(org.apache.axis2.databinding.types.Token param) {
            localSoilTypeTracker = param != null;

            this.localSoilType = param;
        }

        public boolean isPercentOrganicMatterCarbonSpecified() {
            return localPercentOrganicMatterCarbonTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getPercentOrganicMatterCarbon() {
            return localPercentOrganicMatterCarbon;
        }

        /**
         * Auto generated setter method
         * @param param PercentOrganicMatterCarbon
         */
        public void setPercentOrganicMatterCarbon(java.math.BigDecimal param) {
            localPercentOrganicMatterCarbonTracker = param != null;

            this.localPercentOrganicMatterCarbon = param;
        }

        public boolean isSoilMoistureWetnessSpecified() {
            return localSoilMoistureWetnessTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSoilMoistureWetness() {
            return localSoilMoistureWetness;
        }

        /**
         * Auto generated setter method
         * @param param SoilMoistureWetness
         */
        public void setSoilMoistureWetness(
            org.apache.axis2.databinding.types.Token param) {
            localSoilMoistureWetnessTracker = param != null;

            this.localSoilMoistureWetness = param;
        }

        public boolean isFertilizerRegimeSpecified() {
            return localFertilizerRegimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFertilizerRegime() {
            return localFertilizerRegime;
        }

        /**
         * Auto generated setter method
         * @param param FertilizerRegime
         */
        public void setFertilizerRegime(java.lang.String param) {
            localFertilizerRegimeTracker = param != null;

            this.localFertilizerRegime = param;
        }

        public boolean isOpenerCoulterSpecified() {
            return localOpenerCoulterTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOpenerCoulter() {
            return localOpenerCoulter;
        }

        /**
         * Auto generated setter method
         * @param param OpenerCoulter
         */
        public void setOpenerCoulter(java.lang.String param) {
            localOpenerCoulterTracker = param != null;

            this.localOpenerCoulter = param;
        }

        public boolean isRainfallAfterTreatmentSpecified() {
            return localRainfallAfterTreatmentTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getRainfallAfterTreatment() {
            return localRainfallAfterTreatment;
        }

        /**
         * Auto generated setter method
         * @param param RainfallAfterTreatment
         */
        public void setRainfallAfterTreatment(java.math.BigDecimal param) {
            localRainfallAfterTreatmentTracker = param != null;

            this.localRainfallAfterTreatment = param;
        }

        public boolean isFurtherCommentsWeatherSpecified() {
            return localFurtherCommentsWeatherTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFurtherCommentsWeather() {
            return localFurtherCommentsWeather;
        }

        /**
         * Auto generated setter method
         * @param param FurtherCommentsWeather
         */
        public void setFurtherCommentsWeather(java.lang.String param) {
            localFurtherCommentsWeatherTracker = param != null;

            this.localFurtherCommentsWeather = param;
        }

        public boolean isSourceOfWeatherInformationSpecified() {
            return localSourceOfWeatherInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSourceOfWeatherInformation() {
            return localSourceOfWeatherInformation;
        }

        /**
         * Auto generated setter method
         * @param param SourceOfWeatherInformation
         */
        public void setSourceOfWeatherInformation(java.lang.String param) {
            localSourceOfWeatherInformationTracker = param != null;

            this.localSourceOfWeatherInformation = param;
        }

        public boolean isGeneralWeatherInformationSpecified() {
            return localGeneralWeatherInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGeneralWeatherInformation() {
            return localGeneralWeatherInformation;
        }

        /**
         * Auto generated setter method
         * @param param GeneralWeatherInformation
         */
        public void setGeneralWeatherInformation(java.lang.String param) {
            localGeneralWeatherInformationTracker = param != null;

            this.localGeneralWeatherInformation = param;
        }

        public boolean isWeatherAttachmentsSpecified() {
            return localWeatherAttachmentsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getWeatherAttachments() {
            return localWeatherAttachments;
        }

        /**
         * Auto generated setter method
         * @param param WeatherAttachments
         */
        public void setWeatherAttachments(AttachedDocumentsType param) {
            localWeatherAttachmentsTracker = param != null;

            this.localWeatherAttachments = param;
        }

        public boolean isAffectedPersonInformationSpecified() {
            return localAffectedPersonInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return AffectedPersonInformation_type0[]
         */
        public AffectedPersonInformation_type0[] getAffectedPersonInformation() {
            return localAffectedPersonInformation;
        }

        /**
         * validate the array for AffectedPersonInformation
         */
        protected void validateAffectedPersonInformation(
            AffectedPersonInformation_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param AffectedPersonInformation
         */
        public void setAffectedPersonInformation(
            AffectedPersonInformation_type0[] param) {
            validateAffectedPersonInformation(param);

            localAffectedPersonInformationTracker = param != null;

            this.localAffectedPersonInformation = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param AffectedPersonInformation_type0
         */
        public void addAffectedPersonInformation(
            AffectedPersonInformation_type0 param) {
            if (localAffectedPersonInformation == null) {
                localAffectedPersonInformation = new AffectedPersonInformation_type0[] {
                        
                    };
            }

            //update the setting tracker
            localAffectedPersonInformationTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAffectedPersonInformation);
            list.add(param);
            this.localAffectedPersonInformation = (AffectedPersonInformation_type0[]) list.toArray(new AffectedPersonInformation_type0[list.size()]);
        }

        public boolean isExposuresSpecified() {
            return localExposuresTracker;
        }

        /**
         * Auto generated getter method
         * @return Exposures_type0[]
         */
        public Exposures_type0[] getExposures() {
            return localExposures;
        }

        /**
         * validate the array for Exposures
         */
        protected void validateExposures(Exposures_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Exposures
         */
        public void setExposures(Exposures_type0[] param) {
            validateExposures(param);

            localExposuresTracker = param != null;

            this.localExposures = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Exposures_type0
         */
        public void addExposures(Exposures_type0 param) {
            if (localExposures == null) {
                localExposures = new Exposures_type0[] {  };
            }

            //update the setting tracker
            localExposuresTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localExposures);
            list.add(param);
            this.localExposures = (Exposures_type0[]) list.toArray(new Exposures_type0[list.size()]);
        }

        public boolean isExposureDetailsListSpecified() {
            return localExposureDetailsListTracker;
        }

        /**
         * Auto generated getter method
         * @return ExposureDetailsList_type0[]
         */
        public ExposureDetailsList_type0[] getExposureDetailsList() {
            return localExposureDetailsList;
        }

        /**
         * validate the array for ExposureDetailsList
         */
        protected void validateExposureDetailsList(
            ExposureDetailsList_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ExposureDetailsList
         */
        public void setExposureDetailsList(ExposureDetailsList_type0[] param) {
            validateExposureDetailsList(param);

            localExposureDetailsListTracker = param != null;

            this.localExposureDetailsList = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ExposureDetailsList_type0
         */
        public void addExposureDetailsList(ExposureDetailsList_type0 param) {
            if (localExposureDetailsList == null) {
                localExposureDetailsList = new ExposureDetailsList_type0[] {  };
            }

            //update the setting tracker
            localExposureDetailsListTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localExposureDetailsList);
            list.add(param);
            this.localExposureDetailsList = (ExposureDetailsList_type0[]) list.toArray(new ExposureDetailsList_type0[list.size()]);
        }

        public boolean isDomesticAnimalSpecified() {
            return localDomesticAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return DomesticAnimal_type0[]
         */
        public DomesticAnimal_type0[] getDomesticAnimal() {
            return localDomesticAnimal;
        }

        /**
         * validate the array for DomesticAnimal
         */
        protected void validateDomesticAnimal(DomesticAnimal_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param DomesticAnimal
         */
        public void setDomesticAnimal(DomesticAnimal_type0[] param) {
            validateDomesticAnimal(param);

            localDomesticAnimalTracker = param != null;

            this.localDomesticAnimal = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param DomesticAnimal_type0
         */
        public void addDomesticAnimal(DomesticAnimal_type0 param) {
            if (localDomesticAnimal == null) {
                localDomesticAnimal = new DomesticAnimal_type0[] {  };
            }

            //update the setting tracker
            localDomesticAnimalTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localDomesticAnimal);
            list.add(param);
            this.localDomesticAnimal = (DomesticAnimal_type0[]) list.toArray(new DomesticAnimal_type0[list.size()]);
        }

        public boolean isSymptomsOfDomesticAnimalSpecified() {
            return localSymptomsOfDomesticAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSymptomsOfDomesticAnimal() {
            return localSymptomsOfDomesticAnimal;
        }

        /**
         * Auto generated setter method
         * @param param SymptomsOfDomesticAnimal
         */
        public void setSymptomsOfDomesticAnimal(java.lang.String param) {
            localSymptomsOfDomesticAnimalTracker = param != null;

            this.localSymptomsOfDomesticAnimal = param;
        }

        public boolean isOutcomeOfSymptomDASpecified() {
            return localOutcomeOfSymptomDATracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOutcomeOfSymptomDA() {
            return localOutcomeOfSymptomDA;
        }

        /**
         * Auto generated setter method
         * @param param OutcomeOfSymptomDA
         */
        public void setOutcomeOfSymptomDA(java.lang.String param) {
            localOutcomeOfSymptomDATracker = param != null;

            this.localOutcomeOfSymptomDA = param;
        }

        public boolean isTimeUntilOnsetOfSymptomsSpecified() {
            return localTimeUntilOnsetOfSymptomsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTimeUntilOnsetOfSymptoms() {
            return localTimeUntilOnsetOfSymptoms;
        }

        /**
         * Auto generated setter method
         * @param param TimeUntilOnsetOfSymptoms
         */
        public void setTimeUntilOnsetOfSymptoms(java.lang.String param) {
            localTimeUntilOnsetOfSymptomsTracker = param != null;

            this.localTimeUntilOnsetOfSymptoms = param;
        }

        public boolean isUnitOfMeasOnsetSympSpecified() {
            return localUnitOfMeasOnsetSympTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUnitOfMeasOnsetSymp() {
            return localUnitOfMeasOnsetSymp;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasOnsetSymp
         */
        public void setUnitOfMeasOnsetSymp(java.lang.String param) {
            localUnitOfMeasOnsetSympTracker = param != null;

            this.localUnitOfMeasOnsetSymp = param;
        }

        public boolean isDurationOfSymptomDASpecified() {
            return localDurationOfSymptomDATracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDurationOfSymptomDA() {
            return localDurationOfSymptomDA;
        }

        /**
         * Auto generated setter method
         * @param param DurationOfSymptomDA
         */
        public void setDurationOfSymptomDA(java.lang.String param) {
            localDurationOfSymptomDATracker = param != null;

            this.localDurationOfSymptomDA = param;
        }

        public boolean isUnitDurationSymptonDASpecified() {
            return localUnitDurationSymptonDATracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUnitDurationSymptonDA() {
            return localUnitDurationSymptonDA;
        }

        /**
         * Auto generated setter method
         * @param param UnitDurationSymptonDA
         */
        public void setUnitDurationSymptonDA(java.lang.String param) {
            localUnitDurationSymptonDATracker = param != null;

            this.localUnitDurationSymptonDA = param;
        }

        public boolean isMedicalTreatmentOfAnimalSpecified() {
            return localMedicalTreatmentOfAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMedicalTreatmentOfAnimal() {
            return localMedicalTreatmentOfAnimal;
        }

        /**
         * Auto generated setter method
         * @param param MedicalTreatmentOfAnimal
         */
        public void setMedicalTreatmentOfAnimal(java.lang.String param) {
            localMedicalTreatmentOfAnimalTracker = param != null;

            this.localMedicalTreatmentOfAnimal = param;
        }

        public boolean isHospitalizationOfAnimalSpecified() {
            return localHospitalizationOfAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHospitalizationOfAnimal() {
            return localHospitalizationOfAnimal;
        }

        /**
         * Auto generated setter method
         * @param param HospitalizationOfAnimal
         */
        public void setHospitalizationOfAnimal(java.lang.String param) {
            localHospitalizationOfAnimalTracker = param != null;

            this.localHospitalizationOfAnimal = param;
        }

        public boolean isWildLifeDetailsSpecified() {
            return localWildLifeDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return WildLifeDetails_type0[]
         */
        public WildLifeDetails_type0[] getWildLifeDetails() {
            return localWildLifeDetails;
        }

        /**
         * validate the array for WildLifeDetails
         */
        protected void validateWildLifeDetails(WildLifeDetails_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param WildLifeDetails
         */
        public void setWildLifeDetails(WildLifeDetails_type0[] param) {
            validateWildLifeDetails(param);

            localWildLifeDetailsTracker = param != null;

            this.localWildLifeDetails = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param WildLifeDetails_type0
         */
        public void addWildLifeDetails(WildLifeDetails_type0 param) {
            if (localWildLifeDetails == null) {
                localWildLifeDetails = new WildLifeDetails_type0[] {  };
            }

            //update the setting tracker
            localWildLifeDetailsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWildLifeDetails);
            list.add(param);
            this.localWildLifeDetails = (WildLifeDetails_type0[]) list.toArray(new WildLifeDetails_type0[list.size()]);
        }

        public boolean isBusinessSegmentsSpecified() {
            return localBusinessSegmentsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token[]
         */
        public org.apache.axis2.databinding.types.Token[] getBusinessSegments() {
            return localBusinessSegments;
        }

        /**
         * validate the array for BusinessSegments
         */
        protected void validateBusinessSegments(
            org.apache.axis2.databinding.types.Token[] param) {
        }

        /**
         * Auto generated setter method
         * @param param BusinessSegments
         */
        public void setBusinessSegments(
            org.apache.axis2.databinding.types.Token[] param) {
            validateBusinessSegments(param);

            localBusinessSegmentsTracker = param != null;

            this.localBusinessSegments = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param org.apache.axis2.databinding.types.Token
         */
        public void addBusinessSegments(
            org.apache.axis2.databinding.types.Token param) {
            if (localBusinessSegments == null) {
                localBusinessSegments = new org.apache.axis2.databinding.types.Token[] {
                        
                    };
            }

            //update the setting tracker
            localBusinessSegmentsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localBusinessSegments);
            list.add(param);
            this.localBusinessSegments = (org.apache.axis2.databinding.types.Token[]) list.toArray(new org.apache.axis2.databinding.types.Token[list.size()]);
        }

        public boolean isProductIndicationSpecified() {
            return localProductIndicationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductIndication() {
            return localProductIndication;
        }

        /**
         * Auto generated setter method
         * @param param ProductIndication
         */
        public void setProductIndication(java.lang.String param) {
            localProductIndicationTracker = param != null;

            this.localProductIndication = param;
        }

        public boolean isSpecifiedContentSpecified() {
            return localSpecifiedContentTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSpecifiedContent() {
            return localSpecifiedContent;
        }

        /**
         * Auto generated setter method
         * @param param SpecifiedContent
         */
        public void setSpecifiedContent(java.lang.String param) {
            localSpecifiedContentTracker = param != null;

            this.localSpecifiedContent = param;
        }

        public boolean isFormulationTypeSpecified() {
            return localFormulationTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getFormulationType() {
            return localFormulationType;
        }

        /**
         * Auto generated setter method
         * @param param FormulationType
         */
        public void setFormulationType(
            org.apache.axis2.databinding.types.Token param) {
            localFormulationTypeTracker = param != null;

            this.localFormulationType = param;
        }

        public boolean isPackSizeAndTypeSpecified() {
            return localPackSizeAndTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPackSizeAndType() {
            return localPackSizeAndType;
        }

        /**
         * Auto generated setter method
         * @param param PackSizeAndType
         */
        public void setPackSizeAndType(java.lang.String param) {
            localPackSizeAndTypeTracker = param != null;

            this.localPackSizeAndType = param;
        }

        public boolean isActiveIngredientsSpecified() {
            return localActiveIngredientsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token[]
         */
        public org.apache.axis2.databinding.types.Token[] getActiveIngredients() {
            return localActiveIngredients;
        }

        /**
         * validate the array for ActiveIngredients
         */
        protected void validateActiveIngredients(
            org.apache.axis2.databinding.types.Token[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ActiveIngredients
         */
        public void setActiveIngredients(
            org.apache.axis2.databinding.types.Token[] param) {
            validateActiveIngredients(param);

            localActiveIngredientsTracker = param != null;

            this.localActiveIngredients = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param org.apache.axis2.databinding.types.Token
         */
        public void addActiveIngredients(
            org.apache.axis2.databinding.types.Token param) {
            if (localActiveIngredients == null) {
                localActiveIngredients = new org.apache.axis2.databinding.types.Token[] {
                        
                    };
            }

            //update the setting tracker
            localActiveIngredientsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localActiveIngredients);
            list.add(param);
            this.localActiveIngredients = (org.apache.axis2.databinding.types.Token[]) list.toArray(new org.apache.axis2.databinding.types.Token[list.size()]);
        }

        public boolean isBayerProductSpecified() {
            return localBayerProductTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getBayerProduct() {
            return localBayerProduct;
        }

        /**
         * Auto generated setter method
         * @param param BayerProduct
         */
        public void setBayerProduct(
            org.apache.axis2.databinding.types.Token param) {
            localBayerProductTracker = param != null;

            this.localBayerProduct = param;
        }

        public boolean isSearchstringLeadProdSpecified() {
            return localSearchstringLeadProdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSearchstringLeadProd() {
            return localSearchstringLeadProd;
        }

        /**
         * Auto generated setter method
         * @param param SearchstringLeadProd
         */
        public void setSearchstringLeadProd(java.lang.String param) {
            localSearchstringLeadProdTracker = param != null;

            this.localSearchstringLeadProd = param;
        }

        public boolean isMaterialNumberPackedSpecified() {
            return localMaterialNumberPackedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getMaterialNumberPacked() {
            return localMaterialNumberPacked;
        }

        /**
         * Auto generated setter method
         * @param param MaterialNumberPacked
         */
        public void setMaterialNumberPacked(
            org.apache.axis2.databinding.types.Token param) {
            localMaterialNumberPackedTracker = param != null;

            this.localMaterialNumberPacked = param;
        }

        public boolean isMaterialNumberUnpackedSpecified() {
            return localMaterialNumberUnpackedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getMaterialNumberUnpacked() {
            return localMaterialNumberUnpacked;
        }

        /**
         * Auto generated setter method
         * @param param MaterialNumberUnpacked
         */
        public void setMaterialNumberUnpacked(
            org.apache.axis2.databinding.types.Token param) {
            localMaterialNumberUnpackedTracker = param != null;

            this.localMaterialNumberUnpacked = param;
        }

        public boolean isMaterialTextPackedSpecified() {
            return localMaterialTextPackedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getMaterialTextPacked() {
            return localMaterialTextPacked;
        }

        /**
         * Auto generated setter method
         * @param param MaterialTextPacked
         */
        public void setMaterialTextPacked(
            org.apache.axis2.databinding.types.Token param) {
            localMaterialTextPackedTracker = param != null;

            this.localMaterialTextPacked = param;
        }

        public boolean isMaterialTextUnpackedSpecified() {
            return localMaterialTextUnpackedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getMaterialTextUnpacked() {
            return localMaterialTextUnpacked;
        }

        /**
         * Auto generated setter method
         * @param param MaterialTextUnpacked
         */
        public void setMaterialTextUnpacked(
            org.apache.axis2.databinding.types.Token param) {
            localMaterialTextUnpackedTracker = param != null;

            this.localMaterialTextUnpacked = param;
        }

        public boolean isSpecificationNumberSpecified() {
            return localSpecificationNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSpecificationNumber() {
            return localSpecificationNumber;
        }

        /**
         * Auto generated setter method
         * @param param SpecificationNumber
         */
        public void setSpecificationNumber(
            org.apache.axis2.databinding.types.Token param) {
            localSpecificationNumberTracker = param != null;

            this.localSpecificationNumber = param;
        }

        public boolean isProductRegistrationNumberSpecified() {
            return localProductRegistrationNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProductRegistrationNumber() {
            return localProductRegistrationNumber;
        }

        /**
         * Auto generated setter method
         * @param param ProductRegistrationNumber
         */
        public void setProductRegistrationNumber(
            org.apache.axis2.databinding.types.Token param) {
            localProductRegistrationNumberTracker = param != null;

            this.localProductRegistrationNumber = param;
        }

        public boolean isProductSampleCommentsSpecified() {
            return localProductSampleCommentsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProductSampleComments() {
            return localProductSampleComments;
        }

        /**
         * Auto generated setter method
         * @param param ProductSampleComments
         */
        public void setProductSampleComments(
            org.apache.axis2.databinding.types.Token param) {
            localProductSampleCommentsTracker = param != null;

            this.localProductSampleComments = param;
        }

        public boolean isProductSampleTakenSpecified() {
            return localProductSampleTakenTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProductSampleTaken() {
            return localProductSampleTaken;
        }

        /**
         * Auto generated setter method
         * @param param ProductSampleTaken
         */
        public void setProductSampleTaken(
            org.apache.axis2.databinding.types.Token param) {
            localProductSampleTakenTracker = param != null;

            this.localProductSampleTaken = param;
        }

        public boolean isProductBrandName2Specified() {
            return localProductBrandName2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProductBrandName2() {
            return localProductBrandName2;
        }

        /**
         * Auto generated setter method
         * @param param ProductBrandName2
         */
        public void setProductBrandName2(
            org.apache.axis2.databinding.types.Token param) {
            localProductBrandName2Tracker = param != null;

            this.localProductBrandName2 = param;
        }

        public boolean isSpecifiedContent2Specified() {
            return localSpecifiedContent2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSpecifiedContent2() {
            return localSpecifiedContent2;
        }

        /**
         * Auto generated setter method
         * @param param SpecifiedContent2
         */
        public void setSpecifiedContent2(java.lang.String param) {
            localSpecifiedContent2Tracker = param != null;

            this.localSpecifiedContent2 = param;
        }

        public boolean isFormulationType2Specified() {
            return localFormulationType2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getFormulationType2() {
            return localFormulationType2;
        }

        /**
         * Auto generated setter method
         * @param param FormulationType2
         */
        public void setFormulationType2(
            org.apache.axis2.databinding.types.Token param) {
            localFormulationType2Tracker = param != null;

            this.localFormulationType2 = param;
        }

        public boolean isBatchLotNumber2Specified() {
            return localBatchLotNumber2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBatchLotNumber2() {
            return localBatchLotNumber2;
        }

        /**
         * Auto generated setter method
         * @param param BatchLotNumber2
         */
        public void setBatchLotNumber2(java.lang.String param) {
            localBatchLotNumber2Tracker = param != null;

            this.localBatchLotNumber2 = param;
        }

        public boolean isUFI2Specified() {
            return localUFI2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUFI2() {
            return localUFI2;
        }

        /**
         * Auto generated setter method
         * @param param UFI2
         */
        public void setUFI2(java.lang.String param) {
            localUFI2Tracker = param != null;

            this.localUFI2 = param;
        }

        public boolean isPackSizeAndType2Specified() {
            return localPackSizeAndType2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPackSizeAndType2() {
            return localPackSizeAndType2;
        }

        /**
         * Auto generated setter method
         * @param param PackSizeAndType2
         */
        public void setPackSizeAndType2(java.lang.String param) {
            localPackSizeAndType2Tracker = param != null;

            this.localPackSizeAndType2 = param;
        }

        public boolean isActiveIngredients2Specified() {
            return localActiveIngredients2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token[]
         */
        public org.apache.axis2.databinding.types.Token[] getActiveIngredients2() {
            return localActiveIngredients2;
        }

        /**
         * validate the array for ActiveIngredients2
         */
        protected void validateActiveIngredients2(
            org.apache.axis2.databinding.types.Token[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ActiveIngredients2
         */
        public void setActiveIngredients2(
            org.apache.axis2.databinding.types.Token[] param) {
            validateActiveIngredients2(param);

            localActiveIngredients2Tracker = param != null;

            this.localActiveIngredients2 = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param org.apache.axis2.databinding.types.Token
         */
        public void addActiveIngredients2(
            org.apache.axis2.databinding.types.Token param) {
            if (localActiveIngredients2 == null) {
                localActiveIngredients2 = new org.apache.axis2.databinding.types.Token[] {
                        
                    };
            }

            //update the setting tracker
            localActiveIngredients2Tracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localActiveIngredients2);
            list.add(param);
            this.localActiveIngredients2 = (org.apache.axis2.databinding.types.Token[]) list.toArray(new org.apache.axis2.databinding.types.Token[list.size()]);
        }

        public boolean isBayerProduct2Specified() {
            return localBayerProduct2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getBayerProduct2() {
            return localBayerProduct2;
        }

        /**
         * Auto generated setter method
         * @param param BayerProduct2
         */
        public void setBayerProduct2(
            org.apache.axis2.databinding.types.Token param) {
            localBayerProduct2Tracker = param != null;

            this.localBayerProduct2 = param;
        }

        public boolean isSearchstringAddProdSpecified() {
            return localSearchstringAddProdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSearchstringAddProd() {
            return localSearchstringAddProd;
        }

        /**
         * Auto generated setter method
         * @param param SearchstringAddProd
         */
        public void setSearchstringAddProd(java.lang.String param) {
            localSearchstringAddProdTracker = param != null;

            this.localSearchstringAddProd = param;
        }

        public boolean isMaterialNumberPacked2Specified() {
            return localMaterialNumberPacked2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getMaterialNumberPacked2() {
            return localMaterialNumberPacked2;
        }

        /**
         * Auto generated setter method
         * @param param MaterialNumberPacked2
         */
        public void setMaterialNumberPacked2(
            org.apache.axis2.databinding.types.Token param) {
            localMaterialNumberPacked2Tracker = param != null;

            this.localMaterialNumberPacked2 = param;
        }

        public boolean isMaterialNumberUnpacked2Specified() {
            return localMaterialNumberUnpacked2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getMaterialNumberUnpacked2() {
            return localMaterialNumberUnpacked2;
        }

        /**
         * Auto generated setter method
         * @param param MaterialNumberUnpacked2
         */
        public void setMaterialNumberUnpacked2(
            org.apache.axis2.databinding.types.Token param) {
            localMaterialNumberUnpacked2Tracker = param != null;

            this.localMaterialNumberUnpacked2 = param;
        }

        public boolean isMaterialTextPacked2Specified() {
            return localMaterialTextPacked2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getMaterialTextPacked2() {
            return localMaterialTextPacked2;
        }

        /**
         * Auto generated setter method
         * @param param MaterialTextPacked2
         */
        public void setMaterialTextPacked2(
            org.apache.axis2.databinding.types.Token param) {
            localMaterialTextPacked2Tracker = param != null;

            this.localMaterialTextPacked2 = param;
        }

        public boolean isMaterialTextUnpacked2Specified() {
            return localMaterialTextUnpacked2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getMaterialTextUnpacked2() {
            return localMaterialTextUnpacked2;
        }

        /**
         * Auto generated setter method
         * @param param MaterialTextUnpacked2
         */
        public void setMaterialTextUnpacked2(
            org.apache.axis2.databinding.types.Token param) {
            localMaterialTextUnpacked2Tracker = param != null;

            this.localMaterialTextUnpacked2 = param;
        }

        public boolean isSpecificationNumber2Specified() {
            return localSpecificationNumber2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSpecificationNumber2() {
            return localSpecificationNumber2;
        }

        /**
         * Auto generated setter method
         * @param param SpecificationNumber2
         */
        public void setSpecificationNumber2(
            org.apache.axis2.databinding.types.Token param) {
            localSpecificationNumber2Tracker = param != null;

            this.localSpecificationNumber2 = param;
        }

        public boolean isProdRegistrationNumber2Specified() {
            return localProdRegistrationNumber2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProdRegistrationNumber2() {
            return localProdRegistrationNumber2;
        }

        /**
         * Auto generated setter method
         * @param param ProdRegistrationNumber2
         */
        public void setProdRegistrationNumber2(
            org.apache.axis2.databinding.types.Token param) {
            localProdRegistrationNumber2Tracker = param != null;

            this.localProdRegistrationNumber2 = param;
        }

        public boolean isProductSampleComments2Specified() {
            return localProductSampleComments2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProductSampleComments2() {
            return localProductSampleComments2;
        }

        /**
         * Auto generated setter method
         * @param param ProductSampleComments2
         */
        public void setProductSampleComments2(
            org.apache.axis2.databinding.types.Token param) {
            localProductSampleComments2Tracker = param != null;

            this.localProductSampleComments2 = param;
        }

        public boolean isProductSampleTaken2Specified() {
            return localProductSampleTaken2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProductSampleTaken2() {
            return localProductSampleTaken2;
        }

        /**
         * Auto generated setter method
         * @param param ProductSampleTaken2
         */
        public void setProductSampleTaken2(
            org.apache.axis2.databinding.types.Token param) {
            localProductSampleTaken2Tracker = param != null;

            this.localProductSampleTaken2 = param;
        }

        public boolean isFurtherProductsSpecified() {
            return localFurtherProductsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFurtherProducts() {
            return localFurtherProducts;
        }

        /**
         * Auto generated setter method
         * @param param FurtherProducts
         */
        public void setFurtherProducts(java.lang.String param) {
            localFurtherProductsTracker = param != null;

            this.localFurtherProducts = param;
        }

        public boolean isAttachmentsForProductsSpecified() {
            return localAttachmentsForProductsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getAttachmentsForProducts() {
            return localAttachmentsForProducts;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentsForProducts
         */
        public void setAttachmentsForProducts(AttachedDocumentsType param) {
            localAttachmentsForProductsTracker = param != null;

            this.localAttachmentsForProducts = param;
        }

        public boolean isFurtherCommentsOnProductsSpecified() {
            return localFurtherCommentsOnProductsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFurtherCommentsOnProducts() {
            return localFurtherCommentsOnProducts;
        }

        /**
         * Auto generated setter method
         * @param param FurtherCommentsOnProducts
         */
        public void setFurtherCommentsOnProducts(java.lang.String param) {
            localFurtherCommentsOnProductsTracker = param != null;

            this.localFurtherCommentsOnProducts = param;
        }

        public boolean isDepotNameSpecified() {
            return localDepotNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDepotName() {
            return localDepotName;
        }

        /**
         * Auto generated setter method
         * @param param DepotName
         */
        public void setDepotName(java.lang.String param) {
            localDepotNameTracker = param != null;

            this.localDepotName = param;
        }

        public boolean isPackagingSpecified() {
            return localPackagingTracker;
        }

        /**
         * Auto generated getter method
         * @return Packaging_type0[]
         */
        public Packaging_type0[] getPackaging() {
            return localPackaging;
        }

        /**
         * validate the array for Packaging
         */
        protected void validatePackaging(Packaging_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Packaging
         */
        public void setPackaging(Packaging_type0[] param) {
            validatePackaging(param);

            localPackagingTracker = param != null;

            this.localPackaging = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Packaging_type0
         */
        public void addPackaging(Packaging_type0 param) {
            if (localPackaging == null) {
                localPackaging = new Packaging_type0[] {  };
            }

            //update the setting tracker
            localPackagingTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localPackaging);
            list.add(param);
            this.localPackaging = (Packaging_type0[]) list.toArray(new Packaging_type0[list.size()]);
        }

        public boolean isCommentOnPackagingSpecified() {
            return localCommentOnPackagingTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentOnPackaging() {
            return localCommentOnPackaging;
        }

        /**
         * Auto generated setter method
         * @param param CommentOnPackaging
         */
        public void setCommentOnPackaging(java.lang.String param) {
            localCommentOnPackagingTracker = param != null;

            this.localCommentOnPackaging = param;
        }

        public boolean isAttachementsForPackagingSpecified() {
            return localAttachementsForPackagingTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getAttachementsForPackaging() {
            return localAttachementsForPackaging;
        }

        /**
         * Auto generated setter method
         * @param param AttachementsForPackaging
         */
        public void setAttachementsForPackaging(AttachedDocumentsType param) {
            localAttachementsForPackagingTracker = param != null;

            this.localAttachementsForPackaging = param;
        }

        public boolean isFormulationDetailsSpecified() {
            return localFormulationDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return FormulationDetails_type0[]
         */
        public FormulationDetails_type0[] getFormulationDetails() {
            return localFormulationDetails;
        }

        /**
         * validate the array for FormulationDetails
         */
        protected void validateFormulationDetails(
            FormulationDetails_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param FormulationDetails
         */
        public void setFormulationDetails(FormulationDetails_type0[] param) {
            validateFormulationDetails(param);

            localFormulationDetailsTracker = param != null;

            this.localFormulationDetails = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param FormulationDetails_type0
         */
        public void addFormulationDetails(FormulationDetails_type0 param) {
            if (localFormulationDetails == null) {
                localFormulationDetails = new FormulationDetails_type0[] {  };
            }

            //update the setting tracker
            localFormulationDetailsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localFormulationDetails);
            list.add(param);
            this.localFormulationDetails = (FormulationDetails_type0[]) list.toArray(new FormulationDetails_type0[list.size()]);
        }

        public boolean isDeliveryNumberSpecified() {
            return localDeliveryNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDeliveryNumber() {
            return localDeliveryNumber;
        }

        /**
         * Auto generated setter method
         * @param param DeliveryNumber
         */
        public void setDeliveryNumber(
            org.apache.axis2.databinding.types.Token param) {
            localDeliveryNumberTracker = param != null;

            this.localDeliveryNumber = param;
        }

        public boolean isDeliveryItemSpecified() {
            return localDeliveryItemTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDeliveryItem() {
            return localDeliveryItem;
        }

        /**
         * Auto generated setter method
         * @param param DeliveryItem
         */
        public void setDeliveryItem(
            org.apache.axis2.databinding.types.Token param) {
            localDeliveryItemTracker = param != null;

            this.localDeliveryItem = param;
        }

        public boolean isCustomerNameSoldToSpecified() {
            return localCustomerNameSoldToTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCustomerNameSoldTo() {
            return localCustomerNameSoldTo;
        }

        /**
         * Auto generated setter method
         * @param param CustomerNameSoldTo
         */
        public void setCustomerNameSoldTo(java.lang.String param) {
            localCustomerNameSoldToTracker = param != null;

            this.localCustomerNameSoldTo = param;
        }

        public boolean isCustomerNameShippedToSpecified() {
            return localCustomerNameShippedToTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCustomerNameShippedTo() {
            return localCustomerNameShippedTo;
        }

        /**
         * Auto generated setter method
         * @param param CustomerNameShippedTo
         */
        public void setCustomerNameShippedTo(java.lang.String param) {
            localCustomerNameShippedToTracker = param != null;

            this.localCustomerNameShippedTo = param;
        }

        public boolean isCustomerSAPcodeSoldToSpecified() {
            return localCustomerSAPcodeSoldToTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCustomerSAPcodeSoldTo() {
            return localCustomerSAPcodeSoldTo;
        }

        /**
         * Auto generated setter method
         * @param param CustomerSAPcodeSoldTo
         */
        public void setCustomerSAPcodeSoldTo(
            org.apache.axis2.databinding.types.Token param) {
            localCustomerSAPcodeSoldToTracker = param != null;

            this.localCustomerSAPcodeSoldTo = param;
        }

        public boolean isCustomerSAPCodeShippedToSpecified() {
            return localCustomerSAPCodeShippedToTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCustomerSAPCodeShippedTo() {
            return localCustomerSAPCodeShippedTo;
        }

        /**
         * Auto generated setter method
         * @param param CustomerSAPCodeShippedTo
         */
        public void setCustomerSAPCodeShippedTo(
            org.apache.axis2.databinding.types.Token param) {
            localCustomerSAPCodeShippedToTracker = param != null;

            this.localCustomerSAPCodeShippedTo = param;
        }

        public boolean isTotalQuantitySpecified() {
            return localTotalQuantityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getTotalQuantity() {
            return localTotalQuantity;
        }

        /**
         * Auto generated setter method
         * @param param TotalQuantity
         */
        public void setTotalQuantity(java.math.BigDecimal param) {
            localTotalQuantityTracker = param != null;

            this.localTotalQuantity = param;
        }

        public boolean isUnitOfMeasurementQuantitySpecified() {
            return localUnitOfMeasurementQuantityTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasurementQuantity() {
            return localUnitOfMeasurementQuantity;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasurementQuantity
         */
        public void setUnitOfMeasurementQuantity(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasurementQuantityTracker = param != null;

            this.localUnitOfMeasurementQuantity = param;
        }

        public boolean isDamagedQuantitySpecified() {
            return localDamagedQuantityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDamagedQuantity() {
            return localDamagedQuantity;
        }

        /**
         * Auto generated setter method
         * @param param DamagedQuantity
         */
        public void setDamagedQuantity(java.math.BigDecimal param) {
            localDamagedQuantityTracker = param != null;

            this.localDamagedQuantity = param;
        }

        public boolean isMarketValueOfAffectedGoodsSpecified() {
            return localMarketValueOfAffectedGoodsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getMarketValueOfAffectedGoods() {
            return localMarketValueOfAffectedGoods;
        }

        /**
         * Auto generated setter method
         * @param param MarketValueOfAffectedGoods
         */
        public void setMarketValueOfAffectedGoods(java.math.BigDecimal param) {
            localMarketValueOfAffectedGoodsTracker = param != null;

            this.localMarketValueOfAffectedGoods = param;
        }

        public boolean isCurrencyTypeSpecified() {
            return localCurrencyTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCurrencyType() {
            return localCurrencyType;
        }

        /**
         * Auto generated setter method
         * @param param CurrencyType
         */
        public void setCurrencyType(
            org.apache.axis2.databinding.types.Token param) {
            localCurrencyTypeTracker = param != null;

            this.localCurrencyType = param;
        }

        public boolean isDeliveryNumber2Specified() {
            return localDeliveryNumber2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDeliveryNumber2() {
            return localDeliveryNumber2;
        }

        /**
         * Auto generated setter method
         * @param param DeliveryNumber2
         */
        public void setDeliveryNumber2(
            org.apache.axis2.databinding.types.Token param) {
            localDeliveryNumber2Tracker = param != null;

            this.localDeliveryNumber2 = param;
        }

        public boolean isDeliveryItem2Specified() {
            return localDeliveryItem2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDeliveryItem2() {
            return localDeliveryItem2;
        }

        /**
         * Auto generated setter method
         * @param param DeliveryItem2
         */
        public void setDeliveryItem2(
            org.apache.axis2.databinding.types.Token param) {
            localDeliveryItem2Tracker = param != null;

            this.localDeliveryItem2 = param;
        }

        public boolean isCustomerNameSoldTo2Specified() {
            return localCustomerNameSoldTo2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCustomerNameSoldTo2() {
            return localCustomerNameSoldTo2;
        }

        /**
         * Auto generated setter method
         * @param param CustomerNameSoldTo2
         */
        public void setCustomerNameSoldTo2(java.lang.String param) {
            localCustomerNameSoldTo2Tracker = param != null;

            this.localCustomerNameSoldTo2 = param;
        }

        public boolean isCustomerNameShippedTo2Specified() {
            return localCustomerNameShippedTo2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCustomerNameShippedTo2() {
            return localCustomerNameShippedTo2;
        }

        /**
         * Auto generated setter method
         * @param param CustomerNameShippedTo2
         */
        public void setCustomerNameShippedTo2(java.lang.String param) {
            localCustomerNameShippedTo2Tracker = param != null;

            this.localCustomerNameShippedTo2 = param;
        }

        public boolean isCustomerSAPCodeSoldTo2Specified() {
            return localCustomerSAPCodeSoldTo2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCustomerSAPCodeSoldTo2() {
            return localCustomerSAPCodeSoldTo2;
        }

        /**
         * Auto generated setter method
         * @param param CustomerSAPCodeSoldTo2
         */
        public void setCustomerSAPCodeSoldTo2(
            org.apache.axis2.databinding.types.Token param) {
            localCustomerSAPCodeSoldTo2Tracker = param != null;

            this.localCustomerSAPCodeSoldTo2 = param;
        }

        public boolean isCustomerSAPCodeShippedTo2Specified() {
            return localCustomerSAPCodeShippedTo2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCustomerSAPCodeShippedTo2() {
            return localCustomerSAPCodeShippedTo2;
        }

        /**
         * Auto generated setter method
         * @param param CustomerSAPCodeShippedTo2
         */
        public void setCustomerSAPCodeShippedTo2(
            org.apache.axis2.databinding.types.Token param) {
            localCustomerSAPCodeShippedTo2Tracker = param != null;

            this.localCustomerSAPCodeShippedTo2 = param;
        }

        public boolean isDistributorRetailer2Specified() {
            return localDistributorRetailer2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDistributorRetailer2() {
            return localDistributorRetailer2;
        }

        /**
         * Auto generated setter method
         * @param param DistributorRetailer2
         */
        public void setDistributorRetailer2(
            org.apache.axis2.databinding.types.Token param) {
            localDistributorRetailer2Tracker = param != null;

            this.localDistributorRetailer2 = param;
        }

        public boolean isDepotName2Specified() {
            return localDepotName2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDepotName2() {
            return localDepotName2;
        }

        /**
         * Auto generated setter method
         * @param param DepotName2
         */
        public void setDepotName2(java.lang.String param) {
            localDepotName2Tracker = param != null;

            this.localDepotName2 = param;
        }

        public boolean isTotalQuantity2Specified() {
            return localTotalQuantity2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getTotalQuantity2() {
            return localTotalQuantity2;
        }

        /**
         * Auto generated setter method
         * @param param TotalQuantity2
         */
        public void setTotalQuantity2(java.math.BigDecimal param) {
            localTotalQuantity2Tracker = param != null;

            this.localTotalQuantity2 = param;
        }

        public boolean isUnitOfMeasurementQuantity2Specified() {
            return localUnitOfMeasurementQuantity2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasurementQuantity2() {
            return localUnitOfMeasurementQuantity2;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasurementQuantity2
         */
        public void setUnitOfMeasurementQuantity2(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasurementQuantity2Tracker = param != null;

            this.localUnitOfMeasurementQuantity2 = param;
        }

        public boolean isDamagedQuantity2Specified() {
            return localDamagedQuantity2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDamagedQuantity2() {
            return localDamagedQuantity2;
        }

        /**
         * Auto generated setter method
         * @param param DamagedQuantity2
         */
        public void setDamagedQuantity2(java.math.BigDecimal param) {
            localDamagedQuantity2Tracker = param != null;

            this.localDamagedQuantity2 = param;
        }

        public boolean isMarketValueOfAffectedGoods2Specified() {
            return localMarketValueOfAffectedGoods2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getMarketValueOfAffectedGoods2() {
            return localMarketValueOfAffectedGoods2;
        }

        /**
         * Auto generated setter method
         * @param param MarketValueOfAffectedGoods2
         */
        public void setMarketValueOfAffectedGoods2(java.math.BigDecimal param) {
            localMarketValueOfAffectedGoods2Tracker = param != null;

            this.localMarketValueOfAffectedGoods2 = param;
        }

        public boolean isCurrencyType2Specified() {
            return localCurrencyType2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCurrencyType2() {
            return localCurrencyType2;
        }

        /**
         * Auto generated setter method
         * @param param CurrencyType2
         */
        public void setCurrencyType2(java.lang.String param) {
            localCurrencyType2Tracker = param != null;

            this.localCurrencyType2 = param;
        }

        public boolean isCommentsOnDeliverySpecified() {
            return localCommentsOnDeliveryTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentsOnDelivery() {
            return localCommentsOnDelivery;
        }

        /**
         * Auto generated setter method
         * @param param CommentsOnDelivery
         */
        public void setCommentsOnDelivery(java.lang.String param) {
            localCommentsOnDeliveryTracker = param != null;

            this.localCommentsOnDelivery = param;
        }

        public boolean isAttachmentsForDeliverySpecified() {
            return localAttachmentsForDeliveryTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getAttachmentsForDelivery() {
            return localAttachmentsForDelivery;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentsForDelivery
         */
        public void setAttachmentsForDelivery(AttachedDocumentsType param) {
            localAttachmentsForDeliveryTracker = param != null;

            this.localAttachmentsForDelivery = param;
        }

        public boolean isApplicationsSpecified() {
            return localApplicationsTracker;
        }

        /**
         * Auto generated getter method
         * @return Applications_type0[]
         */
        public Applications_type0[] getApplications() {
            return localApplications;
        }

        /**
         * validate the array for Applications
         */
        protected void validateApplications(Applications_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Applications
         */
        public void setApplications(Applications_type0[] param) {
            validateApplications(param);

            localApplicationsTracker = param != null;

            this.localApplications = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Applications_type0
         */
        public void addApplications(Applications_type0 param) {
            if (localApplications == null) {
                localApplications = new Applications_type0[] {  };
            }

            //update the setting tracker
            localApplicationsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localApplications);
            list.add(param);
            this.localApplications = (Applications_type0[]) list.toArray(new Applications_type0[list.size()]);
        }

        public boolean isPriorAppliedProductsSpecified() {
            return localPriorAppliedProductsTracker;
        }

        /**
         * Auto generated getter method
         * @return PriorAppliedProducts_type0[]
         */
        public PriorAppliedProducts_type0[] getPriorAppliedProducts() {
            return localPriorAppliedProducts;
        }

        /**
         * validate the array for PriorAppliedProducts
         */
        protected void validatePriorAppliedProducts(
            PriorAppliedProducts_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param PriorAppliedProducts
         */
        public void setPriorAppliedProducts(PriorAppliedProducts_type0[] param) {
            validatePriorAppliedProducts(param);

            localPriorAppliedProductsTracker = param != null;

            this.localPriorAppliedProducts = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param PriorAppliedProducts_type0
         */
        public void addPriorAppliedProducts(PriorAppliedProducts_type0 param) {
            if (localPriorAppliedProducts == null) {
                localPriorAppliedProducts = new PriorAppliedProducts_type0[] {  };
            }

            //update the setting tracker
            localPriorAppliedProductsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localPriorAppliedProducts);
            list.add(param);
            this.localPriorAppliedProducts = (PriorAppliedProducts_type0[]) list.toArray(new PriorAppliedProducts_type0[list.size()]);
        }

        public boolean isDateOfLastApplicationSpecified() {
            return localDateOfLastApplicationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getDateOfLastApplication() {
            return localDateOfLastApplication;
        }

        /**
         * Auto generated setter method
         * @param param DateOfLastApplication
         */
        public void setDateOfLastApplication(java.util.Date param) {
            localDateOfLastApplicationTracker = param != null;

            this.localDateOfLastApplication = param;
        }

        public boolean isCommentOnApplicationSpecified() {
            return localCommentOnApplicationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentOnApplication() {
            return localCommentOnApplication;
        }

        /**
         * Auto generated setter method
         * @param param CommentOnApplication
         */
        public void setCommentOnApplication(java.lang.String param) {
            localCommentOnApplicationTracker = param != null;

            this.localCommentOnApplication = param;
        }

        public boolean isUserALicensedApplicatorSpecified() {
            return localUserALicensedApplicatorTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUserALicensedApplicator() {
            return localUserALicensedApplicator;
        }

        /**
         * Auto generated setter method
         * @param param UserALicensedApplicator
         */
        public void setUserALicensedApplicator(
            org.apache.axis2.databinding.types.Token param) {
            localUserALicensedApplicatorTracker = param != null;

            this.localUserALicensedApplicator = param;
        }

        public boolean isApplicationRecordAddedSpecified() {
            return localApplicationRecordAddedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getApplicationRecordAdded() {
            return localApplicationRecordAdded;
        }

        /**
         * Auto generated setter method
         * @param param ApplicationRecordAdded
         */
        public void setApplicationRecordAdded(
            org.apache.axis2.databinding.types.Token param) {
            localApplicationRecordAddedTracker = param != null;

            this.localApplicationRecordAdded = param;
        }

        public boolean isApplicationRecordSpecified() {
            return localApplicationRecordTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getApplicationRecord() {
            return localApplicationRecord;
        }

        /**
         * Auto generated setter method
         * @param param ApplicationRecord
         */
        public void setApplicationRecord(AttachedDocumentsType param) {
            localApplicationRecordTracker = param != null;

            this.localApplicationRecord = param;
        }

        public boolean isBufferZoneSpecified() {
            return localBufferZoneTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBufferZone() {
            return localBufferZone;
        }

        /**
         * Auto generated setter method
         * @param param BufferZone
         */
        public void setBufferZone(java.lang.String param) {
            localBufferZoneTracker = param != null;

            this.localBufferZone = param;
        }

        public boolean isUnitOfMeasureBufferSpecified() {
            return localUnitOfMeasureBufferTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureBuffer() {
            return localUnitOfMeasureBuffer;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureBuffer
         */
        public void setUnitOfMeasureBuffer(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureBufferTracker = param != null;

            this.localUnitOfMeasureBuffer = param;
        }

        public boolean isNonBCSPrdApplInVicinitySpecified() {
            return localNonBCSPrdApplInVicinityTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getNonBCSPrdApplInVicinity() {
            return localNonBCSPrdApplInVicinity;
        }

        /**
         * Auto generated setter method
         * @param param NonBCSPrdApplInVicinity
         */
        public void setNonBCSPrdApplInVicinity(
            org.apache.axis2.databinding.types.Token param) {
            localNonBCSPrdApplInVicinityTracker = param != null;

            this.localNonBCSPrdApplInVicinity = param;
        }

        public boolean isSeedBrandVarietySpecified() {
            return localSeedBrandVarietyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSeedBrandVariety() {
            return localSeedBrandVariety;
        }

        /**
         * Auto generated setter method
         * @param param SeedBrandVariety
         */
        public void setSeedBrandVariety(java.lang.String param) {
            localSeedBrandVarietyTracker = param != null;

            this.localSeedBrandVariety = param;
        }

        public boolean isSeedLotSpecified() {
            return localSeedLotTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSeedLot() {
            return localSeedLot;
        }

        /**
         * Auto generated setter method
         * @param param SeedLot
         */
        public void setSeedLot(java.lang.String param) {
            localSeedLotTracker = param != null;

            this.localSeedLot = param;
        }

        public boolean isSeedCompanySpecified() {
            return localSeedCompanyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSeedCompany() {
            return localSeedCompany;
        }

        /**
         * Auto generated setter method
         * @param param SeedCompany
         */
        public void setSeedCompany(java.lang.String param) {
            localSeedCompanyTracker = param != null;

            this.localSeedCompany = param;
        }

        public boolean isFurtherInformationOnSeedSpecified() {
            return localFurtherInformationOnSeedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFurtherInformationOnSeed() {
            return localFurtherInformationOnSeed;
        }

        /**
         * Auto generated setter method
         * @param param FurtherInformationOnSeed
         */
        public void setFurtherInformationOnSeed(java.lang.String param) {
            localFurtherInformationOnSeedTracker = param != null;

            this.localFurtherInformationOnSeed = param;
        }

        public boolean isProcessorNameSpecified() {
            return localProcessorNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProcessorName() {
            return localProcessorName;
        }

        /**
         * Auto generated setter method
         * @param param ProcessorName
         */
        public void setProcessorName(java.lang.String param) {
            localProcessorNameTracker = param != null;

            this.localProcessorName = param;
        }

        public boolean isSeedTreatmentFacilitySpecified() {
            return localSeedTreatmentFacilityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSeedTreatmentFacility() {
            return localSeedTreatmentFacility;
        }

        /**
         * Auto generated setter method
         * @param param SeedTreatmentFacility
         */
        public void setSeedTreatmentFacility(java.lang.String param) {
            localSeedTreatmentFacilityTracker = param != null;

            this.localSeedTreatmentFacility = param;
        }

        public boolean isProcessorLocationSpecified() {
            return localProcessorLocationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProcessorLocation() {
            return localProcessorLocation;
        }

        /**
         * Auto generated setter method
         * @param param ProcessorLocation
         */
        public void setProcessorLocation(java.lang.String param) {
            localProcessorLocationTracker = param != null;

            this.localProcessorLocation = param;
        }

        public boolean isLoadingTestResultSpecified() {
            return localLoadingTestResultTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLoadingTestResult() {
            return localLoadingTestResult;
        }

        /**
         * Auto generated setter method
         * @param param LoadingTestResult
         */
        public void setLoadingTestResult(java.lang.String param) {
            localLoadingTestResultTracker = param != null;

            this.localLoadingTestResult = param;
        }

        public boolean isGerminationTestResultSpecified() {
            return localGerminationTestResultTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGerminationTestResult() {
            return localGerminationTestResult;
        }

        /**
         * Auto generated setter method
         * @param param GerminationTestResult
         */
        public void setGerminationTestResult(java.lang.String param) {
            localGerminationTestResultTracker = param != null;

            this.localGerminationTestResult = param;
        }

        public boolean isVigorTestResultSpecified() {
            return localVigorTestResultTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getVigorTestResult() {
            return localVigorTestResult;
        }

        /**
         * Auto generated setter method
         * @param param VigorTestResult
         */
        public void setVigorTestResult(java.lang.String param) {
            localVigorTestResultTracker = param != null;

            this.localVigorTestResult = param;
        }

        public boolean isSowingDatePlantedSpecified() {
            return localSowingDatePlantedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getSowingDatePlanted() {
            return localSowingDatePlanted;
        }

        /**
         * Auto generated setter method
         * @param param SowingDatePlanted
         */
        public void setSowingDatePlanted(java.util.Date param) {
            localSowingDatePlantedTracker = param != null;

            this.localSowingDatePlanted = param;
        }

        public boolean isSeedRatePlantsSpecified() {
            return localSeedRatePlantsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getSeedRatePlants() {
            return localSeedRatePlants;
        }

        /**
         * Auto generated setter method
         * @param param SeedRatePlants
         */
        public void setSeedRatePlants(java.math.BigDecimal param) {
            localSeedRatePlantsTracker = param != null;

            this.localSeedRatePlants = param;
        }

        public boolean isUnitOfMeasureSeedPlantsSpecified() {
            return localUnitOfMeasureSeedPlantsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureSeedPlants() {
            return localUnitOfMeasureSeedPlants;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureSeedPlants
         */
        public void setUnitOfMeasureSeedPlants(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureSeedPlantsTracker = param != null;

            this.localUnitOfMeasureSeedPlants = param;
        }

        public boolean isCommentOnSowingSpecified() {
            return localCommentOnSowingTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentOnSowing() {
            return localCommentOnSowing;
        }

        /**
         * Auto generated setter method
         * @param param CommentOnSowing
         */
        public void setCommentOnSowing(java.lang.String param) {
            localCommentOnSowingTracker = param != null;

            this.localCommentOnSowing = param;
        }

        public boolean isDescriptionOfMachineryUsedSpecified() {
            return localDescriptionOfMachineryUsedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDescriptionOfMachineryUsed() {
            return localDescriptionOfMachineryUsed;
        }

        /**
         * Auto generated setter method
         * @param param DescriptionOfMachineryUsed
         */
        public void setDescriptionOfMachineryUsed(java.lang.String param) {
            localDescriptionOfMachineryUsedTracker = param != null;

            this.localDescriptionOfMachineryUsed = param;
        }

        public boolean isNozzleTypeSpecified() {
            return localNozzleTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getNozzleType() {
            return localNozzleType;
        }

        /**
         * Auto generated setter method
         * @param param NozzleType
         */
        public void setNozzleType(
            org.apache.axis2.databinding.types.Token param) {
            localNozzleTypeTracker = param != null;

            this.localNozzleType = param;
        }

        public boolean isDropletSizeOfNozzlesSpecified() {
            return localDropletSizeOfNozzlesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDropletSizeOfNozzles() {
            return localDropletSizeOfNozzles;
        }

        /**
         * Auto generated setter method
         * @param param DropletSizeOfNozzles
         */
        public void setDropletSizeOfNozzles(java.lang.String param) {
            localDropletSizeOfNozzlesTracker = param != null;

            this.localDropletSizeOfNozzles = param;
        }

        public boolean isSymptomsSpecified() {
            return localSymptomsTracker;
        }

        /**
         * Auto generated getter method
         * @return Symptoms_type0[]
         */
        public Symptoms_type0[] getSymptoms() {
            return localSymptoms;
        }

        /**
         * validate the array for Symptoms
         */
        protected void validateSymptoms(Symptoms_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Symptoms
         */
        public void setSymptoms(Symptoms_type0[] param) {
            validateSymptoms(param);

            localSymptomsTracker = param != null;

            this.localSymptoms = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Symptoms_type0
         */
        public void addSymptoms(Symptoms_type0 param) {
            if (localSymptoms == null) {
                localSymptoms = new Symptoms_type0[] {  };
            }

            //update the setting tracker
            localSymptomsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localSymptoms);
            list.add(param);
            this.localSymptoms = (Symptoms_type0[]) list.toArray(new Symptoms_type0[list.size()]);
        }

        public boolean isFirstAidSpecified() {
            return localFirstAidTracker;
        }

        /**
         * Auto generated getter method
         * @return FirstAid_type0[]
         */
        public FirstAid_type0[] getFirstAid() {
            return localFirstAid;
        }

        /**
         * validate the array for FirstAid
         */
        protected void validateFirstAid(FirstAid_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param FirstAid
         */
        public void setFirstAid(FirstAid_type0[] param) {
            validateFirstAid(param);

            localFirstAidTracker = param != null;

            this.localFirstAid = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param FirstAid_type0
         */
        public void addFirstAid(FirstAid_type0 param) {
            if (localFirstAid == null) {
                localFirstAid = new FirstAid_type0[] {  };
            }

            //update the setting tracker
            localFirstAidTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localFirstAid);
            list.add(param);
            this.localFirstAid = (FirstAid_type0[]) list.toArray(new FirstAid_type0[list.size()]);
        }

        public boolean isLabTestsPerformedMDSpecified() {
            return localLabTestsPerformedMDTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getLabTestsPerformedMD() {
            return localLabTestsPerformedMD;
        }

        /**
         * Auto generated setter method
         * @param param LabTestsPerformedMD
         */
        public void setLabTestsPerformedMD(
            org.apache.axis2.databinding.types.Token param) {
            localLabTestsPerformedMDTracker = param != null;

            this.localLabTestsPerformedMD = param;
        }

        public boolean isLabTestsAttachmentSpecified() {
            return localLabTestsAttachmentTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getLabTestsAttachment() {
            return localLabTestsAttachment;
        }

        /**
         * Auto generated setter method
         * @param param LabTestsAttachment
         */
        public void setLabTestsAttachment(AttachedDocumentsType param) {
            localLabTestsAttachmentTracker = param != null;

            this.localLabTestsAttachment = param;
        }

        public boolean isCircumstancesSpecified() {
            return localCircumstancesTracker;
        }

        /**
         * Auto generated getter method
         * @return Circumstances_type0[]
         */
        public Circumstances_type0[] getCircumstances() {
            return localCircumstances;
        }

        /**
         * validate the array for Circumstances
         */
        protected void validateCircumstances(Circumstances_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Circumstances
         */
        public void setCircumstances(Circumstances_type0[] param) {
            validateCircumstances(param);

            localCircumstancesTracker = param != null;

            this.localCircumstances = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Circumstances_type0
         */
        public void addCircumstances(Circumstances_type0 param) {
            if (localCircumstances == null) {
                localCircumstances = new Circumstances_type0[] {  };
            }

            //update the setting tracker
            localCircumstancesTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localCircumstances);
            list.add(param);
            this.localCircumstances = (Circumstances_type0[]) list.toArray(new Circumstances_type0[list.size()]);
        }

        public boolean isTimeBetwTreatmAndDetectSpecified() {
            return localTimeBetwTreatmAndDetectTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getTimeBetwTreatmAndDetect() {
            return localTimeBetwTreatmAndDetect;
        }

        /**
         * Auto generated setter method
         * @param param TimeBetwTreatmAndDetect
         */
        public void setTimeBetwTreatmAndDetect(java.math.BigDecimal param) {
            localTimeBetwTreatmAndDetectTracker = param != null;

            this.localTimeBetwTreatmAndDetect = param;
        }

        public boolean isUnitOfMeasureTimeSpecified() {
            return localUnitOfMeasureTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureTime() {
            return localUnitOfMeasureTime;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureTime
         */
        public void setUnitOfMeasureTime(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureTimeTracker = param != null;

            this.localUnitOfMeasureTime = param;
        }

        public boolean isCommentsOnCircumstancesSpecified() {
            return localCommentsOnCircumstancesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentsOnCircumstances() {
            return localCommentsOnCircumstances;
        }

        /**
         * Auto generated setter method
         * @param param CommentsOnCircumstances
         */
        public void setCommentsOnCircumstances(java.lang.String param) {
            localCommentsOnCircumstancesTracker = param != null;

            this.localCommentsOnCircumstances = param;
        }

        public boolean isOrganizationCollectingSampleSpecified() {
            return localOrganizationCollectingSampleTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getOrganizationCollectingSample() {
            return localOrganizationCollectingSample;
        }

        /**
         * Auto generated setter method
         * @param param OrganizationCollectingSample
         */
        public void setOrganizationCollectingSample(
            org.apache.axis2.databinding.types.Token param) {
            localOrganizationCollectingSampleTracker = param != null;

            this.localOrganizationCollectingSample = param;
        }

        public boolean isSamplingTimesSpecified() {
            return localSamplingTimesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getSamplingTimes() {
            return localSamplingTimes;
        }

        /**
         * Auto generated setter method
         * @param param SamplingTimes
         */
        public void setSamplingTimes(java.math.BigDecimal param) {
            localSamplingTimesTracker = param != null;

            this.localSamplingTimes = param;
        }

        public boolean isNumberOfSamplesSpecified() {
            return localNumberOfSamplesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getNumberOfSamples() {
            return localNumberOfSamples;
        }

        /**
         * Auto generated setter method
         * @param param NumberOfSamples
         */
        public void setNumberOfSamples(java.math.BigDecimal param) {
            localNumberOfSamplesTracker = param != null;

            this.localNumberOfSamples = param;
        }

        public boolean isQuantityOfSamplesSpecified() {
            return localQuantityOfSamplesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getQuantityOfSamples() {
            return localQuantityOfSamples;
        }

        /**
         * Auto generated setter method
         * @param param QuantityOfSamples
         */
        public void setQuantityOfSamples(java.math.BigDecimal param) {
            localQuantityOfSamplesTracker = param != null;

            this.localQuantityOfSamples = param;
        }

        public boolean isUnitOfMeasureSamplesSpecified() {
            return localUnitOfMeasureSamplesTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureSamples() {
            return localUnitOfMeasureSamples;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureSamples
         */
        public void setUnitOfMeasureSamples(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureSamplesTracker = param != null;

            this.localUnitOfMeasureSamples = param;
        }

        public boolean isReasonForSamplingSpecified() {
            return localReasonForSamplingTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getReasonForSampling() {
            return localReasonForSampling;
        }

        /**
         * Auto generated setter method
         * @param param ReasonForSampling
         */
        public void setReasonForSampling(java.lang.String param) {
            localReasonForSamplingTracker = param != null;

            this.localReasonForSampling = param;
        }

        public boolean isPercentOfOrganicCarbonSpecified() {
            return localPercentOfOrganicCarbonTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getPercentOfOrganicCarbon() {
            return localPercentOfOrganicCarbon;
        }

        /**
         * Auto generated setter method
         * @param param PercentOfOrganicCarbon
         */
        public void setPercentOfOrganicCarbon(java.math.BigDecimal param) {
            localPercentOfOrganicCarbonTracker = param != null;

            this.localPercentOfOrganicCarbon = param;
        }

        public boolean isSoilSeriesTextureSpecified() {
            return localSoilSeriesTextureTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSoilSeriesTexture() {
            return localSoilSeriesTexture;
        }

        /**
         * Auto generated setter method
         * @param param SoilSeriesTexture
         */
        public void setSoilSeriesTexture(
            org.apache.axis2.databinding.types.Token param) {
            localSoilSeriesTextureTracker = param != null;

            this.localSoilSeriesTexture = param;
        }

        public boolean isHydraulicConductivitySpecified() {
            return localHydraulicConductivityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHydraulicConductivity() {
            return localHydraulicConductivity;
        }

        /**
         * Auto generated setter method
         * @param param HydraulicConductivity
         */
        public void setHydraulicConductivity(java.lang.String param) {
            localHydraulicConductivityTracker = param != null;

            this.localHydraulicConductivity = param;
        }

        public boolean isAquiferDescriptionSpecified() {
            return localAquiferDescriptionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAquiferDescription() {
            return localAquiferDescription;
        }

        /**
         * Auto generated setter method
         * @param param AquiferDescription
         */
        public void setAquiferDescription(java.lang.String param) {
            localAquiferDescriptionTracker = param != null;

            this.localAquiferDescription = param;
        }

        public boolean isHydraulicGroupSpecified() {
            return localHydraulicGroupTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getHydraulicGroup() {
            return localHydraulicGroup;
        }

        /**
         * Auto generated setter method
         * @param param HydraulicGroup
         */
        public void setHydraulicGroup(
            org.apache.axis2.databinding.types.Token param) {
            localHydraulicGroupTracker = param != null;

            this.localHydraulicGroup = param;
        }

        public boolean isPhOfWaterSpecified() {
            return localPhOfWaterTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getPhOfWater() {
            return localPhOfWater;
        }

        /**
         * Auto generated setter method
         * @param param PhOfWater
         */
        public void setPhOfWater(java.math.BigDecimal param) {
            localPhOfWaterTracker = param != null;

            this.localPhOfWater = param;
        }

        public boolean isMaxRainFallSpecified() {
            return localMaxRainFallTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getMaxRainFall() {
            return localMaxRainFall;
        }

        /**
         * Auto generated setter method
         * @param param MaxRainFall
         */
        public void setMaxRainFall(java.math.BigDecimal param) {
            localMaxRainFallTracker = param != null;

            this.localMaxRainFall = param;
        }

        public boolean isUnitOfMeasureRainfallSpecified() {
            return localUnitOfMeasureRainfallTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureRainfall() {
            return localUnitOfMeasureRainfall;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureRainfall
         */
        public void setUnitOfMeasureRainfall(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureRainfallTracker = param != null;

            this.localUnitOfMeasureRainfall = param;
        }

        public boolean isAnnualTotalRainSpecified() {
            return localAnnualTotalRainTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAnnualTotalRain() {
            return localAnnualTotalRain;
        }

        /**
         * Auto generated setter method
         * @param param AnnualTotalRain
         */
        public void setAnnualTotalRain(java.math.BigDecimal param) {
            localAnnualTotalRainTracker = param != null;

            this.localAnnualTotalRain = param;
        }

        public boolean isUnitOfMeasureTotalRainSpecified() {
            return localUnitOfMeasureTotalRainTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureTotalRain() {
            return localUnitOfMeasureTotalRain;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureTotalRain
         */
        public void setUnitOfMeasureTotalRain(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureTotalRainTracker = param != null;

            this.localUnitOfMeasureTotalRain = param;
        }

        public boolean isAnnualTotalIrrigationSpecified() {
            return localAnnualTotalIrrigationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAnnualTotalIrrigation() {
            return localAnnualTotalIrrigation;
        }

        /**
         * Auto generated setter method
         * @param param AnnualTotalIrrigation
         */
        public void setAnnualTotalIrrigation(java.math.BigDecimal param) {
            localAnnualTotalIrrigationTracker = param != null;

            this.localAnnualTotalIrrigation = param;
        }

        public boolean isUnitOfMeasureTotalIrrSpecified() {
            return localUnitOfMeasureTotalIrrTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureTotalIrr() {
            return localUnitOfMeasureTotalIrr;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureTotalIrr
         */
        public void setUnitOfMeasureTotalIrr(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureTotalIrrTracker = param != null;

            this.localUnitOfMeasureTotalIrr = param;
        }

        public boolean isWeatherCommentsSpecified() {
            return localWeatherCommentsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getWeatherComments() {
            return localWeatherComments;
        }

        /**
         * Auto generated setter method
         * @param param WeatherComments
         */
        public void setWeatherComments(java.lang.String param) {
            localWeatherCommentsTracker = param != null;

            this.localWeatherComments = param;
        }

        public boolean isYearsOfProductUsageSpecified() {
            return localYearsOfProductUsageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getYearsOfProductUsage() {
            return localYearsOfProductUsage;
        }

        /**
         * Auto generated setter method
         * @param param YearsOfProductUsage
         */
        public void setYearsOfProductUsage(java.lang.String param) {
            localYearsOfProductUsageTracker = param != null;

            this.localYearsOfProductUsage = param;
        }

        public boolean isWellIdUseSpecified() {
            return localWellIdUseTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getWellIdUse() {
            return localWellIdUse;
        }

        /**
         * Auto generated setter method
         * @param param WellIdUse
         */
        public void setWellIdUse(java.lang.String param) {
            localWellIdUseTracker = param != null;

            this.localWellIdUse = param;
        }

        public boolean isDepthToWaterSpecified() {
            return localDepthToWaterTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDepthToWater() {
            return localDepthToWater;
        }

        /**
         * Auto generated setter method
         * @param param DepthToWater
         */
        public void setDepthToWater(java.math.BigDecimal param) {
            localDepthToWaterTracker = param != null;

            this.localDepthToWater = param;
        }

        public boolean isUnitOfMeasureDepthSpecified() {
            return localUnitOfMeasureDepthTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureDepth() {
            return localUnitOfMeasureDepth;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureDepth
         */
        public void setUnitOfMeasureDepth(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureDepthTracker = param != null;

            this.localUnitOfMeasureDepth = param;
        }

        public boolean isScreenedIntervalSpecified() {
            return localScreenedIntervalTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getScreenedInterval() {
            return localScreenedInterval;
        }

        /**
         * Auto generated setter method
         * @param param ScreenedInterval
         */
        public void setScreenedInterval(
            org.apache.axis2.databinding.types.Token param) {
            localScreenedIntervalTracker = param != null;

            this.localScreenedInterval = param;
        }

        public boolean isUnitOfMeasureScreenedSpecified() {
            return localUnitOfMeasureScreenedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureScreened() {
            return localUnitOfMeasureScreened;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureScreened
         */
        public void setUnitOfMeasureScreened(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureScreenedTracker = param != null;

            this.localUnitOfMeasureScreened = param;
        }

        public boolean isPartOfALargerStudyEnvSpecified() {
            return localPartOfALargerStudyEnvTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPartOfALargerStudyEnv() {
            return localPartOfALargerStudyEnv;
        }

        /**
         * Auto generated setter method
         * @param param PartOfALargerStudyEnv
         */
        public void setPartOfALargerStudyEnv(
            org.apache.axis2.databinding.types.Token param) {
            localPartOfALargerStudyEnvTracker = param != null;

            this.localPartOfALargerStudyEnv = param;
        }

        public boolean isIrrigationSpecified() {
            return localIrrigationTracker;
        }

        /**
         * Auto generated getter method
         * @return Irrigation_type0[]
         */
        public Irrigation_type0[] getIrrigation() {
            return localIrrigation;
        }

        /**
         * validate the array for Irrigation
         */
        protected void validateIrrigation(Irrigation_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Irrigation
         */
        public void setIrrigation(Irrigation_type0[] param) {
            validateIrrigation(param);

            localIrrigationTracker = param != null;

            this.localIrrigation = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Irrigation_type0
         */
        public void addIrrigation(Irrigation_type0 param) {
            if (localIrrigation == null) {
                localIrrigation = new Irrigation_type0[] {  };
            }

            //update the setting tracker
            localIrrigationTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localIrrigation);
            list.add(param);
            this.localIrrigation = (Irrigation_type0[]) list.toArray(new Irrigation_type0[list.size()]);
        }

        public boolean isAnalyticalInformationSpecified() {
            return localAnalyticalInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return AnalyticalInformation_type0[]
         */
        public AnalyticalInformation_type0[] getAnalyticalInformation() {
            return localAnalyticalInformation;
        }

        /**
         * validate the array for AnalyticalInformation
         */
        protected void validateAnalyticalInformation(
            AnalyticalInformation_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param AnalyticalInformation
         */
        public void setAnalyticalInformation(
            AnalyticalInformation_type0[] param) {
            validateAnalyticalInformation(param);

            localAnalyticalInformationTracker = param != null;

            this.localAnalyticalInformation = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param AnalyticalInformation_type0
         */
        public void addAnalyticalInformation(AnalyticalInformation_type0 param) {
            if (localAnalyticalInformation == null) {
                localAnalyticalInformation = new AnalyticalInformation_type0[] {  };
            }

            //update the setting tracker
            localAnalyticalInformationTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAnalyticalInformation);
            list.add(param);
            this.localAnalyticalInformation = (AnalyticalInformation_type0[]) list.toArray(new AnalyticalInformation_type0[list.size()]);
        }

        public boolean isSampleCollectingStoringSpecified() {
            return localSampleCollectingStoringTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSampleCollectingStoring() {
            return localSampleCollectingStoring;
        }

        /**
         * Auto generated setter method
         * @param param SampleCollectingStoring
         */
        public void setSampleCollectingStoring(java.lang.String param) {
            localSampleCollectingStoringTracker = param != null;

            this.localSampleCollectingStoring = param;
        }

        public boolean isSampleCollectingAttachmentsSpecified() {
            return localSampleCollectingAttachmentsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getSampleCollectingAttachments() {
            return localSampleCollectingAttachments;
        }

        /**
         * Auto generated setter method
         * @param param SampleCollectingAttachments
         */
        public void setSampleCollectingAttachments(AttachedDocumentsType param) {
            localSampleCollectingAttachmentsTracker = param != null;

            this.localSampleCollectingAttachments = param;
        }

        public boolean isLabTestsPerformedSpecified() {
            return localLabTestsPerformedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getLabTestsPerformed() {
            return localLabTestsPerformed;
        }

        /**
         * Auto generated setter method
         * @param param LabTestsPerformed
         */
        public void setLabTestsPerformed(
            org.apache.axis2.databinding.types.Token param) {
            localLabTestsPerformedTracker = param != null;

            this.localLabTestsPerformed = param;
        }

        public boolean isLabResultsSpecified() {
            return localLabResultsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getLabResults() {
            return localLabResults;
        }

        /**
         * Auto generated setter method
         * @param param LabResults
         */
        public void setLabResults(AttachedDocumentsType param) {
            localLabResultsTracker = param != null;

            this.localLabResults = param;
        }

        public boolean isPollenAnalysisDoneSpecified() {
            return localPollenAnalysisDoneTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPollenAnalysisDone() {
            return localPollenAnalysisDone;
        }

        /**
         * Auto generated setter method
         * @param param PollenAnalysisDone
         */
        public void setPollenAnalysisDone(
            org.apache.axis2.databinding.types.Token param) {
            localPollenAnalysisDoneTracker = param != null;

            this.localPollenAnalysisDone = param;
        }

        public boolean isPollenAnalysisResultSpecified() {
            return localPollenAnalysisResultTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getPollenAnalysisResult() {
            return localPollenAnalysisResult;
        }

        /**
         * Auto generated setter method
         * @param param PollenAnalysisResult
         */
        public void setPollenAnalysisResult(AttachedDocumentsType param) {
            localPollenAnalysisResultTracker = param != null;

            this.localPollenAnalysisResult = param;
        }

        public boolean isCommentOnAnalyticsSpecified() {
            return localCommentOnAnalyticsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentOnAnalytics() {
            return localCommentOnAnalytics;
        }

        /**
         * Auto generated setter method
         * @param param CommentOnAnalytics
         */
        public void setCommentOnAnalytics(java.lang.String param) {
            localCommentOnAnalyticsTracker = param != null;

            this.localCommentOnAnalytics = param;
        }

        public boolean isAreaAmountAffectedSpecified() {
            return localAreaAmountAffectedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAreaAmountAffected() {
            return localAreaAmountAffected;
        }

        /**
         * Auto generated setter method
         * @param param AreaAmountAffected
         */
        public void setAreaAmountAffected(java.math.BigDecimal param) {
            localAreaAmountAffectedTracker = param != null;

            this.localAreaAmountAffected = param;
        }

        public boolean isUnitOfMeasureAffectedSpecified() {
            return localUnitOfMeasureAffectedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureAffected() {
            return localUnitOfMeasureAffected;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureAffected
         */
        public void setUnitOfMeasureAffected(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureAffectedTracker = param != null;

            this.localUnitOfMeasureAffected = param;
        }

        public boolean isAreaAmountTreatedSpecified() {
            return localAreaAmountTreatedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAreaAmountTreated() {
            return localAreaAmountTreated;
        }

        /**
         * Auto generated setter method
         * @param param AreaAmountTreated
         */
        public void setAreaAmountTreated(java.math.BigDecimal param) {
            localAreaAmountTreatedTracker = param != null;

            this.localAreaAmountTreated = param;
        }

        public boolean isUnitOfMeasureTreatedSpecified() {
            return localUnitOfMeasureTreatedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureTreated() {
            return localUnitOfMeasureTreated;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureTreated
         */
        public void setUnitOfMeasureTreated(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureTreatedTracker = param != null;

            this.localUnitOfMeasureTreated = param;
        }

        public boolean isPotentialYieldReductionSpecified() {
            return localPotentialYieldReductionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPotentialYieldReduction() {
            return localPotentialYieldReduction;
        }

        /**
         * Auto generated setter method
         * @param param PotentialYieldReduction
         */
        public void setPotentialYieldReduction(java.lang.String param) {
            localPotentialYieldReductionTracker = param != null;

            this.localPotentialYieldReduction = param;
        }

        public boolean isTotalPotentialFinancialRiskSpecified() {
            return localTotalPotentialFinancialRiskTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getTotalPotentialFinancialRisk() {
            return localTotalPotentialFinancialRisk;
        }

        /**
         * Auto generated setter method
         * @param param TotalPotentialFinancialRisk
         */
        public void setTotalPotentialFinancialRisk(java.math.BigDecimal param) {
            localTotalPotentialFinancialRiskTracker = param != null;

            this.localTotalPotentialFinancialRisk = param;
        }

        public boolean isCurrencyPotentialCostsSpecified() {
            return localCurrencyPotentialCostsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCurrencyPotentialCosts() {
            return localCurrencyPotentialCosts;
        }

        /**
         * Auto generated setter method
         * @param param CurrencyPotentialCosts
         */
        public void setCurrencyPotentialCosts(
            org.apache.axis2.databinding.types.Token param) {
            localCurrencyPotentialCostsTracker = param != null;

            this.localCurrencyPotentialCosts = param;
        }

        public boolean isTotalPotentialFinancialRiskEURSpecified() {
            return localTotalPotentialFinancialRiskEURTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getTotalPotentialFinancialRiskEUR() {
            return localTotalPotentialFinancialRiskEUR;
        }

        /**
         * Auto generated setter method
         * @param param TotalPotentialFinancialRiskEUR
         */
        public void setTotalPotentialFinancialRiskEUR(
            java.math.BigDecimal param) {
            localTotalPotentialFinancialRiskEURTracker = param != null;

            this.localTotalPotentialFinancialRiskEUR = param;
        }

        public boolean isPotentialFinancialRiskSpecified() {
            return localPotentialFinancialRiskTracker;
        }

        /**
         * Auto generated getter method
         * @return PotentialFinancialRisk_type0[]
         */
        public PotentialFinancialRisk_type0[] getPotentialFinancialRisk() {
            return localPotentialFinancialRisk;
        }

        /**
         * validate the array for PotentialFinancialRisk
         */
        protected void validatePotentialFinancialRisk(
            PotentialFinancialRisk_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param PotentialFinancialRisk
         */
        public void setPotentialFinancialRisk(
            PotentialFinancialRisk_type0[] param) {
            validatePotentialFinancialRisk(param);

            localPotentialFinancialRiskTracker = param != null;

            this.localPotentialFinancialRisk = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param PotentialFinancialRisk_type0
         */
        public void addPotentialFinancialRisk(
            PotentialFinancialRisk_type0 param) {
            if (localPotentialFinancialRisk == null) {
                localPotentialFinancialRisk = new PotentialFinancialRisk_type0[] {
                        
                    };
            }

            //update the setting tracker
            localPotentialFinancialRiskTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localPotentialFinancialRisk);
            list.add(param);
            this.localPotentialFinancialRisk = (PotentialFinancialRisk_type0[]) list.toArray(new PotentialFinancialRisk_type0[list.size()]);
        }

        public boolean isCommentsOnFinancialRiskSpecified() {
            return localCommentsOnFinancialRiskTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentsOnFinancialRisk() {
            return localCommentsOnFinancialRisk;
        }

        /**
         * Auto generated setter method
         * @param param CommentsOnFinancialRisk
         */
        public void setCommentsOnFinancialRisk(java.lang.String param) {
            localCommentsOnFinancialRiskTracker = param != null;

            this.localCommentsOnFinancialRisk = param;
        }

        public boolean isSummaryOfInvestigationSpecified() {
            return localSummaryOfInvestigationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSummaryOfInvestigation() {
            return localSummaryOfInvestigation;
        }

        /**
         * Auto generated setter method
         * @param param SummaryOfInvestigation
         */
        public void setSummaryOfInvestigation(java.lang.String param) {
            localSummaryOfInvestigationTracker = param != null;

            this.localSummaryOfInvestigation = param;
        }

        public boolean isSeverityCAIRnewSpecified() {
            return localSeverityCAIRnewTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSeverityCAIRnew() {
            return localSeverityCAIRnew;
        }

        /**
         * Auto generated setter method
         * @param param SeverityCAIRnew
         */
        public void setSeverityCAIRnew(
            org.apache.axis2.databinding.types.Token param) {
            localSeverityCAIRnewTracker = param != null;

            this.localSeverityCAIRnew = param;
        }

        public boolean isAttributionToBCSProductSpecified() {
            return localAttributionToBCSProductTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getAttributionToBCSProduct() {
            return localAttributionToBCSProduct;
        }

        /**
         * Auto generated setter method
         * @param param AttributionToBCSProduct
         */
        public void setAttributionToBCSProduct(
            org.apache.axis2.databinding.types.Token param) {
            localAttributionToBCSProductTracker = param != null;

            this.localAttributionToBCSProduct = param;
        }

        public boolean isComplaintJustifiedSpecified() {
            return localComplaintJustifiedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getComplaintJustified() {
            return localComplaintJustified;
        }

        /**
         * Auto generated setter method
         * @param param ComplaintJustified
         */
        public void setComplaintJustified(
            org.apache.axis2.databinding.types.Token param) {
            localComplaintJustifiedTracker = param != null;

            this.localComplaintJustified = param;
        }

        public boolean isSettlementRequiredSpecified() {
            return localSettlementRequiredTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSettlementRequired() {
            return localSettlementRequired;
        }

        /**
         * Auto generated setter method
         * @param param SettlementRequired
         */
        public void setSettlementRequired(
            org.apache.axis2.databinding.types.Token param) {
            localSettlementRequiredTracker = param != null;

            this.localSettlementRequired = param;
        }

        public boolean isCustomerExpectationsSpecified() {
            return localCustomerExpectationsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCustomerExpectations() {
            return localCustomerExpectations;
        }

        /**
         * Auto generated setter method
         * @param param CustomerExpectations
         */
        public void setCustomerExpectations(java.lang.String param) {
            localCustomerExpectationsTracker = param != null;

            this.localCustomerExpectations = param;
        }

        public boolean isSettlementProposalSpecified() {
            return localSettlementProposalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSettlementProposal() {
            return localSettlementProposal;
        }

        /**
         * Auto generated setter method
         * @param param SettlementProposal
         */
        public void setSettlementProposal(java.lang.String param) {
            localSettlementProposalTracker = param != null;

            this.localSettlementProposal = param;
        }

        public boolean isSettlementAcceptedSpecified() {
            return localSettlementAcceptedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSettlementAccepted() {
            return localSettlementAccepted;
        }

        /**
         * Auto generated setter method
         * @param param SettlementAccepted
         */
        public void setSettlementAccepted(
            org.apache.axis2.databinding.types.Token param) {
            localSettlementAcceptedTracker = param != null;

            this.localSettlementAccepted = param;
        }

        public boolean isSourceOfRecommendationSpecified() {
            return localSourceOfRecommendationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSourceOfRecommendation() {
            return localSourceOfRecommendation;
        }

        /**
         * Auto generated setter method
         * @param param SourceOfRecommendation
         */
        public void setSourceOfRecommendation(java.lang.String param) {
            localSourceOfRecommendationTracker = param != null;

            this.localSourceOfRecommendation = param;
        }

        public boolean isRecommendationSheetSpecified() {
            return localRecommendationSheetTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getRecommendationSheet() {
            return localRecommendationSheet;
        }

        /**
         * Auto generated setter method
         * @param param RecommendationSheet
         */
        public void setRecommendationSheet(AttachedDocumentsType param) {
            localRecommendationSheetTracker = param != null;

            this.localRecommendationSheet = param;
        }

        public boolean isApprovedPaymentSpecified() {
            return localApprovedPaymentTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getApprovedPayment() {
            return localApprovedPayment;
        }

        /**
         * Auto generated setter method
         * @param param ApprovedPayment
         */
        public void setApprovedPayment(java.math.BigDecimal param) {
            localApprovedPaymentTracker = param != null;

            this.localApprovedPayment = param;
        }

        public boolean isCurrencyTypePaymentSpecified() {
            return localCurrencyTypePaymentTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCurrencyTypePayment() {
            return localCurrencyTypePayment;
        }

        /**
         * Auto generated setter method
         * @param param CurrencyTypePayment
         */
        public void setCurrencyTypePayment(
            org.apache.axis2.databinding.types.Token param) {
            localCurrencyTypePaymentTracker = param != null;

            this.localCurrencyTypePayment = param;
        }

        public boolean isApprovalDateSpecified() {
            return localApprovalDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getApprovalDate() {
            return localApprovalDate;
        }

        /**
         * Auto generated setter method
         * @param param ApprovalDate
         */
        public void setApprovalDate(java.util.Date param) {
            localApprovalDateTracker = param != null;

            this.localApprovalDate = param;
        }

        public boolean isSettlementAttachmentsSpecified() {
            return localSettlementAttachmentsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getSettlementAttachments() {
            return localSettlementAttachments;
        }

        /**
         * Auto generated setter method
         * @param param SettlementAttachments
         */
        public void setSettlementAttachments(AttachedDocumentsType param) {
            localSettlementAttachmentsTracker = param != null;

            this.localSettlementAttachments = param;
        }

        public boolean isCorrectiveActionsCommentSpecified() {
            return localCorrectiveActionsCommentTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCorrectiveActionsComment() {
            return localCorrectiveActionsComment;
        }

        /**
         * Auto generated setter method
         * @param param CorrectiveActionsComment
         */
        public void setCorrectiveActionsComment(
            org.apache.axis2.databinding.types.Token param) {
            localCorrectiveActionsCommentTracker = param != null;

            this.localCorrectiveActionsComment = param;
        }

        public boolean isCorrectiveActionsAttachmentsSpecified() {
            return localCorrectiveActionsAttachmentsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType
         */
        public AttachedDocumentsType getCorrectiveActionsAttachments() {
            return localCorrectiveActionsAttachments;
        }

        /**
         * Auto generated setter method
         * @param param CorrectiveActionsAttachments
         */
        public void setCorrectiveActionsAttachments(AttachedDocumentsType param) {
            localCorrectiveActionsAttachmentsTracker = param != null;

            this.localCorrectiveActionsAttachments = param;
        }

        public boolean isReworkDestructionCommentsSpecified() {
            return localReworkDestructionCommentsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getReworkDestructionComments() {
            return localReworkDestructionComments;
        }

        /**
         * Auto generated setter method
         * @param param ReworkDestructionComments
         */
        public void setReworkDestructionComments(java.lang.String param) {
            localReworkDestructionCommentsTracker = param != null;

            this.localReworkDestructionComments = param;
        }

        public boolean isIncidentLocationSpecified() {
            return localIncidentLocationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIncidentLocation() {
            return localIncidentLocation;
        }

        /**
         * Auto generated setter method
         * @param param IncidentLocation
         */
        public void setIncidentLocation(java.lang.String param) {
            localIncidentLocationTracker = param != null;

            this.localIncidentLocation = param;
        }

        public boolean isOriginOfCaseSpecified() {
            return localOriginOfCaseTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getOriginOfCase() {
            return localOriginOfCase;
        }

        /**
         * Auto generated setter method
         * @param param OriginOfCase
         */
        public void setOriginOfCase(
            org.apache.axis2.databinding.types.Token param) {
            localOriginOfCaseTracker = param != null;

            this.localOriginOfCase = param;
        }

        public boolean isDeficiencySpecified() {
            return localDeficiencyTracker;
        }

        /**
         * Auto generated getter method
         * @return Deficiency_type0[]
         */
        public Deficiency_type0[] getDeficiency() {
            return localDeficiency;
        }

        /**
         * validate the array for Deficiency
         */
        protected void validateDeficiency(Deficiency_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Deficiency
         */
        public void setDeficiency(Deficiency_type0[] param) {
            validateDeficiency(param);

            localDeficiencyTracker = param != null;

            this.localDeficiency = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Deficiency_type0
         */
        public void addDeficiency(Deficiency_type0 param) {
            if (localDeficiency == null) {
                localDeficiency = new Deficiency_type0[] {  };
            }

            //update the setting tracker
            localDeficiencyTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localDeficiency);
            list.add(param);
            this.localDeficiency = (Deficiency_type0[]) list.toArray(new Deficiency_type0[list.size()]);
        }

        public boolean isTotalActualCostsSpecified() {
            return localTotalActualCostsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getTotalActualCosts() {
            return localTotalActualCosts;
        }

        /**
         * Auto generated setter method
         * @param param TotalActualCosts
         */
        public void setTotalActualCosts(java.math.BigDecimal param) {
            localTotalActualCostsTracker = param != null;

            this.localTotalActualCosts = param;
        }

        public boolean isCurrencyActualCostsSpecified() {
            return localCurrencyActualCostsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCurrencyActualCosts() {
            return localCurrencyActualCosts;
        }

        /**
         * Auto generated setter method
         * @param param CurrencyActualCosts
         */
        public void setCurrencyActualCosts(
            org.apache.axis2.databinding.types.Token param) {
            localCurrencyActualCostsTracker = param != null;

            this.localCurrencyActualCosts = param;
        }

        public boolean isTotalActualCostsEURSpecified() {
            return localTotalActualCostsEURTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getTotalActualCostsEUR() {
            return localTotalActualCostsEUR;
        }

        /**
         * Auto generated setter method
         * @param param TotalActualCostsEUR
         */
        public void setTotalActualCostsEUR(java.math.BigDecimal param) {
            localTotalActualCostsEURTracker = param != null;

            this.localTotalActualCostsEUR = param;
        }

        public boolean isActualCostsSpecified() {
            return localActualCostsTracker;
        }

        /**
         * Auto generated getter method
         * @return ActualCosts_type0[]
         */
        public ActualCosts_type0[] getActualCosts() {
            return localActualCosts;
        }

        /**
         * validate the array for ActualCosts
         */
        protected void validateActualCosts(ActualCosts_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ActualCosts
         */
        public void setActualCosts(ActualCosts_type0[] param) {
            validateActualCosts(param);

            localActualCostsTracker = param != null;

            this.localActualCosts = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ActualCosts_type0
         */
        public void addActualCosts(ActualCosts_type0 param) {
            if (localActualCosts == null) {
                localActualCosts = new ActualCosts_type0[] {  };
            }

            //update the setting tracker
            localActualCostsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localActualCosts);
            list.add(param);
            this.localActualCosts = (ActualCosts_type0[]) list.toArray(new ActualCosts_type0[list.size()]);
        }

        public boolean isCommentsOnActualCostsSpecified() {
            return localCommentsOnActualCostsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentsOnActualCosts() {
            return localCommentsOnActualCosts;
        }

        /**
         * Auto generated setter method
         * @param param CommentsOnActualCosts
         */
        public void setCommentsOnActualCosts(java.lang.String param) {
            localCommentsOnActualCostsTracker = param != null;

            this.localCommentsOnActualCosts = param;
        }

        public boolean isSummaryOfActionsTakenSpecified() {
            return localSummaryOfActionsTakenTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSummaryOfActionsTaken() {
            return localSummaryOfActionsTaken;
        }

        /**
         * Auto generated setter method
         * @param param SummaryOfActionsTaken
         */
        public void setSummaryOfActionsTaken(java.lang.String param) {
            localSummaryOfActionsTakenTracker = param != null;

            this.localSummaryOfActionsTaken = param;
        }

        public boolean isAuthorityReportingSpecified() {
            return localAuthorityReportingTracker;
        }

        /**
         * Auto generated getter method
         * @return AuthorityReporting_type0[]
         */
        public AuthorityReporting_type0[] getAuthorityReporting() {
            return localAuthorityReporting;
        }

        /**
         * validate the array for AuthorityReporting
         */
        protected void validateAuthorityReporting(
            AuthorityReporting_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param AuthorityReporting
         */
        public void setAuthorityReporting(AuthorityReporting_type0[] param) {
            validateAuthorityReporting(param);

            localAuthorityReportingTracker = param != null;

            this.localAuthorityReporting = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param AuthorityReporting_type0
         */
        public void addAuthorityReporting(AuthorityReporting_type0 param) {
            if (localAuthorityReporting == null) {
                localAuthorityReporting = new AuthorityReporting_type0[] {  };
            }

            //update the setting tracker
            localAuthorityReportingTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAuthorityReporting);
            list.add(param);
            this.localAuthorityReporting = (AuthorityReporting_type0[]) list.toArray(new AuthorityReporting_type0[list.size()]);
        }

        public boolean isAllegePhytotoxNonTargetSpecified() {
            return localAllegePhytotoxNonTargetTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAllegePhytotoxNonTarget() {
            return localAllegePhytotoxNonTarget;
        }

        /**
         * Auto generated setter method
         * @param param AllegePhytotoxNonTarget
         */
        public void setAllegePhytotoxNonTarget(java.lang.String param) {
            localAllegePhytotoxNonTargetTracker = param != null;

            this.localAllegePhytotoxNonTarget = param;
        }

        public boolean isAffectedNonTargetSpecified() {
            return localAffectedNonTargetTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAffectedNonTarget() {
            return localAffectedNonTarget;
        }

        /**
         * Auto generated setter method
         * @param param AffectedNonTarget
         */
        public void setAffectedNonTarget(java.lang.String param) {
            localAffectedNonTargetTracker = param != null;

            this.localAffectedNonTarget = param;
        }

        public boolean isPresentApplicNonTargetSpecified() {
            return localPresentApplicNonTargetTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPresentApplicNonTarget() {
            return localPresentApplicNonTarget;
        }

        /**
         * Auto generated setter method
         * @param param PresentApplicNonTarget
         */
        public void setPresentApplicNonTarget(java.lang.String param) {
            localPresentApplicNonTargetTracker = param != null;

            this.localPresentApplicNonTarget = param;
        }

        public boolean isExplicitLabelWarningNonTSpecified() {
            return localExplicitLabelWarningNonTTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getExplicitLabelWarningNonT() {
            return localExplicitLabelWarningNonT;
        }

        /**
         * Auto generated setter method
         * @param param ExplicitLabelWarningNonT
         */
        public void setExplicitLabelWarningNonT(java.lang.String param) {
            localExplicitLabelWarningNonTTracker = param != null;

            this.localExplicitLabelWarningNonT = param;
        }

        public boolean isAllegePhytotoxTargetCropSpecified() {
            return localAllegePhytotoxTargetCropTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAllegePhytotoxTargetCrop() {
            return localAllegePhytotoxTargetCrop;
        }

        /**
         * Auto generated setter method
         * @param param AllegePhytotoxTargetCrop
         */
        public void setAllegePhytotoxTargetCrop(java.lang.String param) {
            localAllegePhytotoxTargetCropTracker = param != null;

            this.localAllegePhytotoxTargetCrop = param;
        }

        public boolean isPhytotoxLethalTargetCropSpecified() {
            return localPhytotoxLethalTargetCropTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPhytotoxLethalTargetCrop() {
            return localPhytotoxLethalTargetCrop;
        }

        /**
         * Auto generated setter method
         * @param param PhytotoxLethalTargetCrop
         */
        public void setPhytotoxLethalTargetCrop(java.lang.String param) {
            localPhytotoxLethalTargetCropTracker = param != null;

            this.localPhytotoxLethalTargetCrop = param;
        }

        public boolean isPhytotoxNLWarnTargetCrSpecified() {
            return localPhytotoxNLWarnTargetCrTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPhytotoxNLWarnTargetCr() {
            return localPhytotoxNLWarnTargetCr;
        }

        /**
         * Auto generated setter method
         * @param param PhytotoxNLWarnTargetCr
         */
        public void setPhytotoxNLWarnTargetCr(java.lang.String param) {
            localPhytotoxNLWarnTargetCrTracker = param != null;

            this.localPhytotoxNLWarnTargetCr = param;
        }

        public boolean isAllegeDriftSpecified() {
            return localAllegeDriftTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAllegeDrift() {
            return localAllegeDrift;
        }

        /**
         * Auto generated setter method
         * @param param AllegeDrift
         */
        public void setAllegeDrift(java.lang.String param) {
            localAllegeDriftTracker = param != null;

            this.localAllegeDrift = param;
        }

        public boolean isConsistantAnticipatedDriftSpecified() {
            return localConsistantAnticipatedDriftTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getConsistantAnticipatedDrift() {
            return localConsistantAnticipatedDrift;
        }

        /**
         * Auto generated setter method
         * @param param ConsistantAnticipatedDrift
         */
        public void setConsistantAnticipatedDrift(java.lang.String param) {
            localConsistantAnticipatedDriftTracker = param != null;

            this.localConsistantAnticipatedDrift = param;
        }

        public boolean isAcresAffectedDriftSpecified() {
            return localAcresAffectedDriftTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAcresAffectedDrift() {
            return localAcresAffectedDrift;
        }

        /**
         * Auto generated setter method
         * @param param AcresAffectedDrift
         */
        public void setAcresAffectedDrift(java.math.BigDecimal param) {
            localAcresAffectedDriftTracker = param != null;

            this.localAcresAffectedDrift = param;
        }

        public boolean isWhatAffectedSpecified() {
            return localWhatAffectedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getWhatAffected() {
            return localWhatAffected;
        }

        /**
         * Auto generated setter method
         * @param param WhatAffected
         */
        public void setWhatAffected(java.lang.String param) {
            localWhatAffectedTracker = param != null;

            this.localWhatAffected = param;
        }

        public boolean isDistanceAffectedSpecified() {
            return localDistanceAffectedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDistanceAffected() {
            return localDistanceAffected;
        }

        /**
         * Auto generated setter method
         * @param param DistanceAffected
         */
        public void setDistanceAffected(java.lang.String param) {
            localDistanceAffectedTracker = param != null;

            this.localDistanceAffected = param;
        }

        public boolean isPlantSpeciesAffectedSpecified() {
            return localPlantSpeciesAffectedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPlantSpeciesAffected() {
            return localPlantSpeciesAffected;
        }

        /**
         * Auto generated setter method
         * @param param PlantSpeciesAffected
         */
        public void setPlantSpeciesAffected(java.lang.String param) {
            localPlantSpeciesAffectedTracker = param != null;

            this.localPlantSpeciesAffected = param;
        }

        public boolean isToxicEffectPestSpecified() {
            return localToxicEffectPestTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getToxicEffectPest() {
            return localToxicEffectPest;
        }

        /**
         * Auto generated setter method
         * @param param ToxicEffectPest
         */
        public void setToxicEffectPest(java.lang.String param) {
            localToxicEffectPestTracker = param != null;

            this.localToxicEffectPest = param;
        }

        public boolean isSecondaryPestSpecified() {
            return localSecondaryPestTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSecondaryPest() {
            return localSecondaryPest;
        }

        /**
         * Auto generated setter method
         * @param param SecondaryPest
         */
        public void setSecondaryPest(java.lang.String param) {
            localSecondaryPestTracker = param != null;

            this.localSecondaryPest = param;
        }

        public boolean isExposedConcentrateSpecified() {
            return localExposedConcentrateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getExposedConcentrate() {
            return localExposedConcentrate;
        }

        /**
         * Auto generated setter method
         * @param param ExposedConcentrate
         */
        public void setExposedConcentrate(java.lang.String param) {
            localExposedConcentrateTracker = param != null;

            this.localExposedConcentrate = param;
        }

        public boolean isSampleAnalyzedSpecified() {
            return localSampleAnalyzedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSampleAnalyzed() {
            return localSampleAnalyzed;
        }

        /**
         * Auto generated setter method
         * @param param SampleAnalyzed
         */
        public void setSampleAnalyzed(java.lang.String param) {
            localSampleAnalyzedTracker = param != null;

            this.localSampleAnalyzed = param;
        }

        public boolean isCreationDateSpecified() {
            return localCreationDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getCreationDate() {
            return localCreationDate;
        }

        /**
         * Auto generated setter method
         * @param param CreationDate
         */
        public void setCreationDate(java.util.Date param) {
            localCreationDateTracker = param != null;

            this.localCreationDate = param;
        }

        public boolean isCloseBySpecified() {
            return localCloseByTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCloseBy() {
            return localCloseBy;
        }

        /**
         * Auto generated setter method
         * @param param CloseBy
         */
        public void setCloseBy(org.apache.axis2.databinding.types.Token param) {
            localCloseByTracker = param != null;

            this.localCloseBy = param;
        }

        public boolean isCloseOnSpecified() {
            return localCloseOnTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getCloseOn() {
            return localCloseOn;
        }

        /**
         * Auto generated setter method
         * @param param CloseOn
         */
        public void setCloseOn(java.util.Date param) {
            localCloseOnTracker = param != null;

            this.localCloseOn = param;
        }

        public boolean isCancelBySpecified() {
            return localCancelByTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCancelBy() {
            return localCancelBy;
        }

        /**
         * Auto generated setter method
         * @param param CancelBy
         */
        public void setCancelBy(org.apache.axis2.databinding.types.Token param) {
            localCancelByTracker = param != null;

            this.localCancelBy = param;
        }

        public boolean isCancelOnSpecified() {
            return localCancelOnTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getCancelOn() {
            return localCancelOn;
        }

        /**
         * Auto generated setter method
         * @param param CancelOn
         */
        public void setCancelOn(java.util.Date param) {
            localCancelOnTracker = param != null;

            this.localCancelOn = param;
        }

        public boolean isStakeholdersSpecified() {
            return localStakeholdersTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token[]
         */
        public org.apache.axis2.databinding.types.Token[] getStakeholders() {
            return localStakeholders;
        }

        /**
         * validate the array for Stakeholders
         */
        protected void validateStakeholders(
            org.apache.axis2.databinding.types.Token[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Stakeholders
         */
        public void setStakeholders(
            org.apache.axis2.databinding.types.Token[] param) {
            validateStakeholders(param);

            localStakeholdersTracker = param != null;

            this.localStakeholders = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param org.apache.axis2.databinding.types.Token
         */
        public void addStakeholders(
            org.apache.axis2.databinding.types.Token param) {
            if (localStakeholders == null) {
                localStakeholders = new org.apache.axis2.databinding.types.Token[] {
                        
                    };
            }

            //update the setting tracker
            localStakeholdersTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localStakeholders);
            list.add(param);
            this.localStakeholders = (org.apache.axis2.databinding.types.Token[]) list.toArray(new org.apache.axis2.databinding.types.Token[list.size()]);
        }

        public boolean isReporterSpecified() {
            return localReporterTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getReporter() {
            return localReporter;
        }

        /**
         * Auto generated setter method
         * @param param Reporter
         */
        public void setReporter(CaseAddressListType param) {
            localReporterTracker = param != null;

            this.localReporter = param;
        }

        public boolean isGrowerCustomerComplainantSpecified() {
            return localGrowerCustomerComplainantTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getGrowerCustomerComplainant() {
            return localGrowerCustomerComplainant;
        }

        /**
         * Auto generated setter method
         * @param param GrowerCustomerComplainant
         */
        public void setGrowerCustomerComplainant(CaseAddressListType param) {
            localGrowerCustomerComplainantTracker = param != null;

            this.localGrowerCustomerComplainant = param;
        }

        public boolean isDistributorRetailerAgronomistSpecified() {
            return localDistributorRetailerAgronomistTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getDistributorRetailerAgronomist() {
            return localDistributorRetailerAgronomist;
        }

        /**
         * Auto generated setter method
         * @param param DistributorRetailerAgronomist
         */
        public void setDistributorRetailerAgronomist(CaseAddressListType param) {
            localDistributorRetailerAgronomistTracker = param != null;

            this.localDistributorRetailerAgronomist = param;
        }

        public boolean isRegistrantSpecified() {
            return localRegistrantTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getRegistrant() {
            return localRegistrant;
        }

        /**
         * Auto generated setter method
         * @param param Registrant
         */
        public void setRegistrant(CaseAddressListType param) {
            localRegistrantTracker = param != null;

            this.localRegistrant = param;
        }

        public boolean isRegistrantContactSpecified() {
            return localRegistrantContactTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getRegistrantContact() {
            return localRegistrantContact;
        }

        /**
         * Auto generated setter method
         * @param param RegistrantContact
         */
        public void setRegistrantContact(CaseAddressListType param) {
            localRegistrantContactTracker = param != null;

            this.localRegistrantContact = param;
        }

        public boolean isOriginatorSpecified() {
            return localOriginatorTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getOriginator() {
            return localOriginator;
        }

        /**
         * Auto generated setter method
         * @param param Originator
         */
        public void setOriginator(CaseAddressListType param) {
            localOriginatorTracker = param != null;

            this.localOriginator = param;
        }

        public boolean isAdditionalPerson1Specified() {
            return localAdditionalPerson1Tracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getAdditionalPerson1() {
            return localAdditionalPerson1;
        }

        /**
         * Auto generated setter method
         * @param param AdditionalPerson1
         */
        public void setAdditionalPerson1(CaseAddressListType param) {
            localAdditionalPerson1Tracker = param != null;

            this.localAdditionalPerson1 = param;
        }

        public boolean isAdditionalPerson2Specified() {
            return localAdditionalPerson2Tracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getAdditionalPerson2() {
            return localAdditionalPerson2;
        }

        /**
         * Auto generated setter method
         * @param param AdditionalPerson2
         */
        public void setAdditionalPerson2(CaseAddressListType param) {
            localAdditionalPerson2Tracker = param != null;

            this.localAdditionalPerson2 = param;
        }

        public boolean isAdditionalPerson3Specified() {
            return localAdditionalPerson3Tracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getAdditionalPerson3() {
            return localAdditionalPerson3;
        }

        /**
         * Auto generated setter method
         * @param param AdditionalPerson3
         */
        public void setAdditionalPerson3(CaseAddressListType param) {
            localAdditionalPerson3Tracker = param != null;

            this.localAdditionalPerson3 = param;
        }

        public boolean isAdditionalPerson4Specified() {
            return localAdditionalPerson4Tracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getAdditionalPerson4() {
            return localAdditionalPerson4;
        }

        /**
         * Auto generated setter method
         * @param param AdditionalPerson4
         */
        public void setAdditionalPerson4(CaseAddressListType param) {
            localAdditionalPerson4Tracker = param != null;

            this.localAdditionalPerson4 = param;
        }

        public boolean isAdditionalPerson5Specified() {
            return localAdditionalPerson5Tracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getAdditionalPerson5() {
            return localAdditionalPerson5;
        }

        /**
         * Auto generated setter method
         * @param param AdditionalPerson5
         */
        public void setAdditionalPerson5(CaseAddressListType param) {
            localAdditionalPerson5Tracker = param != null;

            this.localAdditionalPerson5 = param;
        }

        public boolean isExternalInvestigationCommentSpecified() {
            return localExternalInvestigationCommentTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getExternalInvestigationComment() {
            return localExternalInvestigationComment;
        }

        /**
         * Auto generated setter method
         * @param param ExternalInvestigationComment
         */
        public void setExternalInvestigationComment(java.lang.String param) {
            localExternalInvestigationCommentTracker = param != null;

            this.localExternalInvestigationComment = param;
        }

        public boolean isPackSize2Specified() {
            return localPackSize2Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPackSize2() {
            return localPackSize2;
        }

        /**
         * Auto generated setter method
         * @param param PackSize2
         */
        public void setPackSize2(java.lang.String param) {
            localPackSize2Tracker = param != null;

            this.localPackSize2 = param;
        }

        public boolean isPackSizeUnit2Specified() {
            return localPackSizeUnit2Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPackSizeUnit2() {
            return localPackSizeUnit2;
        }

        /**
         * Auto generated setter method
         * @param param PackSizeUnit2
         */
        public void setPackSizeUnit2(
            org.apache.axis2.databinding.types.Token param) {
            localPackSizeUnit2Tracker = param != null;

            this.localPackSizeUnit2 = param;
        }

        public boolean isUDF_01Specified() {
            return localUDF_01Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_01() {
            return localUDF_01;
        }

        /**
         * Auto generated setter method
         * @param param UDF_01
         */
        public void setUDF_01(org.apache.axis2.databinding.types.Token param) {
            localUDF_01Tracker = param != null;

            this.localUDF_01 = param;
        }

        public boolean isUDF_02Specified() {
            return localUDF_02Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_02() {
            return localUDF_02;
        }

        /**
         * Auto generated setter method
         * @param param UDF_02
         */
        public void setUDF_02(org.apache.axis2.databinding.types.Token param) {
            localUDF_02Tracker = param != null;

            this.localUDF_02 = param;
        }

        public boolean isUDF_03Specified() {
            return localUDF_03Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_03() {
            return localUDF_03;
        }

        /**
         * Auto generated setter method
         * @param param UDF_03
         */
        public void setUDF_03(org.apache.axis2.databinding.types.Token param) {
            localUDF_03Tracker = param != null;

            this.localUDF_03 = param;
        }

        public boolean isUDF_04Specified() {
            return localUDF_04Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_04() {
            return localUDF_04;
        }

        /**
         * Auto generated setter method
         * @param param UDF_04
         */
        public void setUDF_04(org.apache.axis2.databinding.types.Token param) {
            localUDF_04Tracker = param != null;

            this.localUDF_04 = param;
        }

        public boolean isUDF_05Specified() {
            return localUDF_05Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_05() {
            return localUDF_05;
        }

        /**
         * Auto generated setter method
         * @param param UDF_05
         */
        public void setUDF_05(org.apache.axis2.databinding.types.Token param) {
            localUDF_05Tracker = param != null;

            this.localUDF_05 = param;
        }

        public boolean isUDF_06Specified() {
            return localUDF_06Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_06() {
            return localUDF_06;
        }

        /**
         * Auto generated setter method
         * @param param UDF_06
         */
        public void setUDF_06(org.apache.axis2.databinding.types.Token param) {
            localUDF_06Tracker = param != null;

            this.localUDF_06 = param;
        }

        public boolean isUDF_07Specified() {
            return localUDF_07Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_07() {
            return localUDF_07;
        }

        /**
         * Auto generated setter method
         * @param param UDF_07
         */
        public void setUDF_07(org.apache.axis2.databinding.types.Token param) {
            localUDF_07Tracker = param != null;

            this.localUDF_07 = param;
        }

        public boolean isUDF_08Specified() {
            return localUDF_08Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_08() {
            return localUDF_08;
        }

        /**
         * Auto generated setter method
         * @param param UDF_08
         */
        public void setUDF_08(org.apache.axis2.databinding.types.Token param) {
            localUDF_08Tracker = param != null;

            this.localUDF_08 = param;
        }

        public boolean isUDF_09Specified() {
            return localUDF_09Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_09() {
            return localUDF_09;
        }

        /**
         * Auto generated setter method
         * @param param UDF_09
         */
        public void setUDF_09(org.apache.axis2.databinding.types.Token param) {
            localUDF_09Tracker = param != null;

            this.localUDF_09 = param;
        }

        public boolean isUDF_10Specified() {
            return localUDF_10Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_10() {
            return localUDF_10;
        }

        /**
         * Auto generated setter method
         * @param param UDF_10
         */
        public void setUDF_10(org.apache.axis2.databinding.types.Token param) {
            localUDF_10Tracker = param != null;

            this.localUDF_10 = param;
        }

        public boolean isUDF_11Specified() {
            return localUDF_11Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_11() {
            return localUDF_11;
        }

        /**
         * Auto generated setter method
         * @param param UDF_11
         */
        public void setUDF_11(org.apache.axis2.databinding.types.Token param) {
            localUDF_11Tracker = param != null;

            this.localUDF_11 = param;
        }

        public boolean isUDF_12Specified() {
            return localUDF_12Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_12() {
            return localUDF_12;
        }

        /**
         * Auto generated setter method
         * @param param UDF_12
         */
        public void setUDF_12(org.apache.axis2.databinding.types.Token param) {
            localUDF_12Tracker = param != null;

            this.localUDF_12 = param;
        }

        public boolean isUDF_13Specified() {
            return localUDF_13Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_13() {
            return localUDF_13;
        }

        /**
         * Auto generated setter method
         * @param param UDF_13
         */
        public void setUDF_13(org.apache.axis2.databinding.types.Token param) {
            localUDF_13Tracker = param != null;

            this.localUDF_13 = param;
        }

        public boolean isUDF_14Specified() {
            return localUDF_14Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_14() {
            return localUDF_14;
        }

        /**
         * Auto generated setter method
         * @param param UDF_14
         */
        public void setUDF_14(org.apache.axis2.databinding.types.Token param) {
            localUDF_14Tracker = param != null;

            this.localUDF_14 = param;
        }

        public boolean isUDF_15Specified() {
            return localUDF_15Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_15() {
            return localUDF_15;
        }

        /**
         * Auto generated setter method
         * @param param UDF_15
         */
        public void setUDF_15(org.apache.axis2.databinding.types.Token param) {
            localUDF_15Tracker = param != null;

            this.localUDF_15 = param;
        }

        public boolean isUDF_16Specified() {
            return localUDF_16Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_16() {
            return localUDF_16;
        }

        /**
         * Auto generated setter method
         * @param param UDF_16
         */
        public void setUDF_16(org.apache.axis2.databinding.types.Token param) {
            localUDF_16Tracker = param != null;

            this.localUDF_16 = param;
        }

        public boolean isUDF_17Specified() {
            return localUDF_17Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_17() {
            return localUDF_17;
        }

        /**
         * Auto generated setter method
         * @param param UDF_17
         */
        public void setUDF_17(org.apache.axis2.databinding.types.Token param) {
            localUDF_17Tracker = param != null;

            this.localUDF_17 = param;
        }

        public boolean isUDF_18Specified() {
            return localUDF_18Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_18() {
            return localUDF_18;
        }

        /**
         * Auto generated setter method
         * @param param UDF_18
         */
        public void setUDF_18(org.apache.axis2.databinding.types.Token param) {
            localUDF_18Tracker = param != null;

            this.localUDF_18 = param;
        }

        public boolean isUDF_19Specified() {
            return localUDF_19Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_19() {
            return localUDF_19;
        }

        /**
         * Auto generated setter method
         * @param param UDF_19
         */
        public void setUDF_19(org.apache.axis2.databinding.types.Token param) {
            localUDF_19Tracker = param != null;

            this.localUDF_19 = param;
        }

        public boolean isUDF_20Specified() {
            return localUDF_20Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_20() {
            return localUDF_20;
        }

        /**
         * Auto generated setter method
         * @param param UDF_20
         */
        public void setUDF_20(org.apache.axis2.databinding.types.Token param) {
            localUDF_20Tracker = param != null;

            this.localUDF_20 = param;
        }

        public boolean isUDF_21Specified() {
            return localUDF_21Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_21() {
            return localUDF_21;
        }

        /**
         * Auto generated setter method
         * @param param UDF_21
         */
        public void setUDF_21(org.apache.axis2.databinding.types.Token param) {
            localUDF_21Tracker = param != null;

            this.localUDF_21 = param;
        }

        public boolean isUDF_22Specified() {
            return localUDF_22Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_22() {
            return localUDF_22;
        }

        /**
         * Auto generated setter method
         * @param param UDF_22
         */
        public void setUDF_22(org.apache.axis2.databinding.types.Token param) {
            localUDF_22Tracker = param != null;

            this.localUDF_22 = param;
        }

        public boolean isUDF_23Specified() {
            return localUDF_23Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_23() {
            return localUDF_23;
        }

        /**
         * Auto generated setter method
         * @param param UDF_23
         */
        public void setUDF_23(org.apache.axis2.databinding.types.Token param) {
            localUDF_23Tracker = param != null;

            this.localUDF_23 = param;
        }

        public boolean isUDF_24Specified() {
            return localUDF_24Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_24() {
            return localUDF_24;
        }

        /**
         * Auto generated setter method
         * @param param UDF_24
         */
        public void setUDF_24(org.apache.axis2.databinding.types.Token param) {
            localUDF_24Tracker = param != null;

            this.localUDF_24 = param;
        }

        public boolean isUDF_25Specified() {
            return localUDF_25Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_25() {
            return localUDF_25;
        }

        /**
         * Auto generated setter method
         * @param param UDF_25
         */
        public void setUDF_25(org.apache.axis2.databinding.types.Token param) {
            localUDF_25Tracker = param != null;

            this.localUDF_25 = param;
        }

        public boolean isUDF_26Specified() {
            return localUDF_26Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_26() {
            return localUDF_26;
        }

        /**
         * Auto generated setter method
         * @param param UDF_26
         */
        public void setUDF_26(org.apache.axis2.databinding.types.Token param) {
            localUDF_26Tracker = param != null;

            this.localUDF_26 = param;
        }

        public boolean isUDF_27Specified() {
            return localUDF_27Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_27() {
            return localUDF_27;
        }

        /**
         * Auto generated setter method
         * @param param UDF_27
         */
        public void setUDF_27(org.apache.axis2.databinding.types.Token param) {
            localUDF_27Tracker = param != null;

            this.localUDF_27 = param;
        }

        public boolean isUDF_28Specified() {
            return localUDF_28Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_28() {
            return localUDF_28;
        }

        /**
         * Auto generated setter method
         * @param param UDF_28
         */
        public void setUDF_28(org.apache.axis2.databinding.types.Token param) {
            localUDF_28Tracker = param != null;

            this.localUDF_28 = param;
        }

        public boolean isUDF_29Specified() {
            return localUDF_29Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_29() {
            return localUDF_29;
        }

        /**
         * Auto generated setter method
         * @param param UDF_29
         */
        public void setUDF_29(org.apache.axis2.databinding.types.Token param) {
            localUDF_29Tracker = param != null;

            this.localUDF_29 = param;
        }

        public boolean isUDF_30Specified() {
            return localUDF_30Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_30() {
            return localUDF_30;
        }

        /**
         * Auto generated setter method
         * @param param UDF_30
         */
        public void setUDF_30(org.apache.axis2.databinding.types.Token param) {
            localUDF_30Tracker = param != null;

            this.localUDF_30 = param;
        }

        public boolean isUDF_31Specified() {
            return localUDF_31Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_31() {
            return localUDF_31;
        }

        /**
         * Auto generated setter method
         * @param param UDF_31
         */
        public void setUDF_31(org.apache.axis2.databinding.types.Token param) {
            localUDF_31Tracker = param != null;

            this.localUDF_31 = param;
        }

        public boolean isUDF_32Specified() {
            return localUDF_32Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_32() {
            return localUDF_32;
        }

        /**
         * Auto generated setter method
         * @param param UDF_32
         */
        public void setUDF_32(org.apache.axis2.databinding.types.Token param) {
            localUDF_32Tracker = param != null;

            this.localUDF_32 = param;
        }

        public boolean isUDF_33Specified() {
            return localUDF_33Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_33() {
            return localUDF_33;
        }

        /**
         * Auto generated setter method
         * @param param UDF_33
         */
        public void setUDF_33(org.apache.axis2.databinding.types.Token param) {
            localUDF_33Tracker = param != null;

            this.localUDF_33 = param;
        }

        public boolean isUDF_34Specified() {
            return localUDF_34Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_34() {
            return localUDF_34;
        }

        /**
         * Auto generated setter method
         * @param param UDF_34
         */
        public void setUDF_34(org.apache.axis2.databinding.types.Token param) {
            localUDF_34Tracker = param != null;

            this.localUDF_34 = param;
        }

        public boolean isUDF_35Specified() {
            return localUDF_35Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_35() {
            return localUDF_35;
        }

        /**
         * Auto generated setter method
         * @param param UDF_35
         */
        public void setUDF_35(org.apache.axis2.databinding.types.Token param) {
            localUDF_35Tracker = param != null;

            this.localUDF_35 = param;
        }

        public boolean isUDF_36Specified() {
            return localUDF_36Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_36() {
            return localUDF_36;
        }

        /**
         * Auto generated setter method
         * @param param UDF_36
         */
        public void setUDF_36(org.apache.axis2.databinding.types.Token param) {
            localUDF_36Tracker = param != null;

            this.localUDF_36 = param;
        }

        public boolean isUDF_37Specified() {
            return localUDF_37Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_37() {
            return localUDF_37;
        }

        /**
         * Auto generated setter method
         * @param param UDF_37
         */
        public void setUDF_37(org.apache.axis2.databinding.types.Token param) {
            localUDF_37Tracker = param != null;

            this.localUDF_37 = param;
        }

        public boolean isUDF_38Specified() {
            return localUDF_38Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_38() {
            return localUDF_38;
        }

        /**
         * Auto generated setter method
         * @param param UDF_38
         */
        public void setUDF_38(org.apache.axis2.databinding.types.Token param) {
            localUDF_38Tracker = param != null;

            this.localUDF_38 = param;
        }

        public boolean isUDF_39Specified() {
            return localUDF_39Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_39() {
            return localUDF_39;
        }

        /**
         * Auto generated setter method
         * @param param UDF_39
         */
        public void setUDF_39(org.apache.axis2.databinding.types.Token param) {
            localUDF_39Tracker = param != null;

            this.localUDF_39 = param;
        }

        public boolean isUDF_40Specified() {
            return localUDF_40Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_40() {
            return localUDF_40;
        }

        /**
         * Auto generated setter method
         * @param param UDF_40
         */
        public void setUDF_40(org.apache.axis2.databinding.types.Token param) {
            localUDF_40Tracker = param != null;

            this.localUDF_40 = param;
        }

        public boolean isUDF_41Specified() {
            return localUDF_41Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_41() {
            return localUDF_41;
        }

        /**
         * Auto generated setter method
         * @param param UDF_41
         */
        public void setUDF_41(org.apache.axis2.databinding.types.Token param) {
            localUDF_41Tracker = param != null;

            this.localUDF_41 = param;
        }

        public boolean isUDF_42Specified() {
            return localUDF_42Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_42() {
            return localUDF_42;
        }

        /**
         * Auto generated setter method
         * @param param UDF_42
         */
        public void setUDF_42(org.apache.axis2.databinding.types.Token param) {
            localUDF_42Tracker = param != null;

            this.localUDF_42 = param;
        }

        public boolean isUDF_43Specified() {
            return localUDF_43Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_43() {
            return localUDF_43;
        }

        /**
         * Auto generated setter method
         * @param param UDF_43
         */
        public void setUDF_43(org.apache.axis2.databinding.types.Token param) {
            localUDF_43Tracker = param != null;

            this.localUDF_43 = param;
        }

        public boolean isUDF_44Specified() {
            return localUDF_44Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_44() {
            return localUDF_44;
        }

        /**
         * Auto generated setter method
         * @param param UDF_44
         */
        public void setUDF_44(org.apache.axis2.databinding.types.Token param) {
            localUDF_44Tracker = param != null;

            this.localUDF_44 = param;
        }

        public boolean isUDF_45Specified() {
            return localUDF_45Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_45() {
            return localUDF_45;
        }

        /**
         * Auto generated setter method
         * @param param UDF_45
         */
        public void setUDF_45(org.apache.axis2.databinding.types.Token param) {
            localUDF_45Tracker = param != null;

            this.localUDF_45 = param;
        }

        public boolean isUDF_46Specified() {
            return localUDF_46Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_46() {
            return localUDF_46;
        }

        /**
         * Auto generated setter method
         * @param param UDF_46
         */
        public void setUDF_46(org.apache.axis2.databinding.types.Token param) {
            localUDF_46Tracker = param != null;

            this.localUDF_46 = param;
        }

        public boolean isUDF_47Specified() {
            return localUDF_47Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_47() {
            return localUDF_47;
        }

        /**
         * Auto generated setter method
         * @param param UDF_47
         */
        public void setUDF_47(org.apache.axis2.databinding.types.Token param) {
            localUDF_47Tracker = param != null;

            this.localUDF_47 = param;
        }

        public boolean isUDF_48Specified() {
            return localUDF_48Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_48() {
            return localUDF_48;
        }

        /**
         * Auto generated setter method
         * @param param UDF_48
         */
        public void setUDF_48(org.apache.axis2.databinding.types.Token param) {
            localUDF_48Tracker = param != null;

            this.localUDF_48 = param;
        }

        public boolean isUDF_49Specified() {
            return localUDF_49Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_49() {
            return localUDF_49;
        }

        /**
         * Auto generated setter method
         * @param param UDF_49
         */
        public void setUDF_49(org.apache.axis2.databinding.types.Token param) {
            localUDF_49Tracker = param != null;

            this.localUDF_49 = param;
        }

        public boolean isUDF_50Specified() {
            return localUDF_50Tracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUDF_50() {
            return localUDF_50;
        }

        /**
         * Auto generated setter method
         * @param param UDF_50
         */
        public void setUDF_50(org.apache.axis2.databinding.types.Token param) {
            localUDF_50Tracker = param != null;

            this.localUDF_50 = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":importCaseTypeSequence", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "importCaseTypeSequence", xmlWriter);
                }
            }

            if (localCaseStatusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CaseStatus", xmlWriter);

                if (localCaseStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CaseStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCaseStatus));
                }

                xmlWriter.writeEndElement();
            }

            if (localIDCAIRnewTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IDCAIRnew", xmlWriter);

                if (localIDCAIRnew == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IDCAIRnew cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIDCAIRnew));
                }

                xmlWriter.writeEndElement();
            }

            if (localAssignedToTracker) {
                if (localAssignedTo == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AssignedTo cannot be null!!");
                }

                localAssignedTo.serialize(new javax.xml.namespace.QName("",
                        "AssignedTo"), xmlWriter);
            }

            if (localPersonToContactTracker) {
                if (localPersonToContact == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "PersonToContact cannot be null!!");
                }

                localPersonToContact.serialize(new javax.xml.namespace.QName(
                        "", "PersonToContact"), xmlWriter);
            }

            if (localTitleTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Title", xmlWriter);

                if (localTitle == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Title cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTitle);
                }

                xmlWriter.writeEndElement();
            }

            if (localLeadProblemTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LeadProblem", xmlWriter);

                if (localLeadProblem == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LeadProblem cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLeadProblem));
                }

                xmlWriter.writeEndElement();
            }

            if (localAdditionalProblemTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AdditionalProblem",
                    xmlWriter);

                if (localAdditionalProblem == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AdditionalProblem cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAdditionalProblem));
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeCAIRnewTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeCAIRnew", xmlWriter);

                if (localTypeCAIRnew == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeCAIRnew cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTypeCAIRnew));
                }

                xmlWriter.writeEndElement();
            }

            if (localSubtypeCAIRnewTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SubtypeCAIRnew", xmlWriter);

                if (localSubtypeCAIRnew == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SubtypeCAIRnew cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSubtypeCAIRnew));
                }

                xmlWriter.writeEndElement();
            }

            if (localCountryCaseHappenedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CountryCaseHappened",
                    xmlWriter);

                if (localCountryCaseHappened == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CountryCaseHappened cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCountryCaseHappened));
                }

                xmlWriter.writeEndElement();
            }

            if (localLeadProductTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LeadProduct", xmlWriter);

                if (localLeadProduct == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LeadProduct cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLeadProduct));
                }

                xmlWriter.writeEndElement();
            }

            if (localOriginalProductTracker) {
                namespace = "";
                writeStartElement(null, namespace, "OriginalProduct", xmlWriter);

                if (localOriginalProduct == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OriginalProduct cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOriginalProduct));
                }

                xmlWriter.writeEndElement();
            }

            if (localCountryLeadProductTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CountryLeadProduct",
                    xmlWriter);

                if (localCountryLeadProduct == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CountryLeadProduct cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCountryLeadProduct));
                }

                xmlWriter.writeEndElement();
            }

            if (localBatchLotNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "BatchLotNumber", xmlWriter);

                if (localBatchLotNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BatchLotNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBatchLotNumber));
                }

                xmlWriter.writeEndElement();
            }

            if (localUFITracker) {
                namespace = "";
                writeStartElement(null, namespace, "UFI", xmlWriter);

                if (localUFI == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UFI cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUFI));
                }

                xmlWriter.writeEndElement();
            }

            if (localPackSizeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PackSize", xmlWriter);

                if (localPackSize == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PackSize cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPackSize);
                }

                xmlWriter.writeEndElement();
            }

            if (localPackSizeUnitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PackSizeUnit", xmlWriter);

                if (localPackSizeUnit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PackSizeUnit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPackSizeUnit));
                }

                xmlWriter.writeEndElement();
            }

            if (localDetailedDescriptionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DetailedDescription",
                    xmlWriter);

                if (localDetailedDescription == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DetailedDescription cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDetailedDescription);
                }

                xmlWriter.writeEndElement();
            }

            if (localSeedProblemSubTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SeedProblemSubType",
                    xmlWriter);

                if (localSeedProblemSubType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SeedProblemSubType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSeedProblemSubType));
                }

                xmlWriter.writeEndElement();
            }

            if (localOtherExternalIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "OtherExternalId", xmlWriter);

                if (localOtherExternalId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OtherExternalId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOtherExternalId);
                }

                xmlWriter.writeEndElement();
            }

            if (localDistributorRetailerTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DistributorRetailer",
                    xmlWriter);

                if (localDistributorRetailer == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DistributorRetailer cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDistributorRetailer));
                }

                xmlWriter.writeEndElement();
            }

            if (localTreatedCropSystemTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TreatedCropSystem",
                    xmlWriter);

                if (localTreatedCropSystem == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TreatedCropSystem cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTreatedCropSystem));
                }

                xmlWriter.writeEndElement();
            }

            if (localNonTargetImpactsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NonTargetImpacts", xmlWriter);

                if (localNonTargetImpacts == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NonTargetImpacts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localNonTargetImpacts);
                }

                xmlWriter.writeEndElement();
            }

            if (localSeverityEstimationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SeverityEstimation",
                    xmlWriter);

                if (localSeverityEstimation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SeverityEstimation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSeverityEstimation));
                }

                xmlWriter.writeEndElement();
            }

            if (localAttachmentsTracker) {
                if (localAttachments == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Attachments cannot be null!!");
                }

                localAttachments.serialize(new javax.xml.namespace.QName("",
                        "Attachments"), xmlWriter);
            }

            if (localDateOfOccurrenceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DateOfOccurrence", xmlWriter);

                if (localDateOfOccurrence == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DateOfOccurrence cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDateOfOccurrence));
                }

                xmlWriter.writeEndElement();
            }

            if (localDateOfRecommendationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DateOfRecommendation",
                    xmlWriter);

                if (localDateOfRecommendation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DateOfRecommendation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDateOfRecommendation));
                }

                xmlWriter.writeEndElement();
            }

            if (localReporterNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ReporterName", xmlWriter);

                if (localReporterName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ReporterName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localReporterName));
                }

                xmlWriter.writeEndElement();
            }

            if (localDateFirstReportedToBayerTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DateFirstReportedToBayer",
                    xmlWriter);

                if (localDateFirstReportedToBayer == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DateFirstReportedToBayer cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDateFirstReportedToBayer));
                }

                xmlWriter.writeEndElement();
            }

            if (localCommunicationCommentsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommunicationComments",
                    xmlWriter);

                if (localCommunicationComments == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommunicationComments cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommunicationComments);
                }

                xmlWriter.writeEndElement();
            }

            if (localTeamMembersTracker) {
                if (localTeamMembers != null) {
                    for (int i = 0; i < localTeamMembers.length; i++) {
                        if (localTeamMembers[i] != null) {
                            localTeamMembers[i].serialize(new javax.xml.namespace.QName(
                                    "", "TeamMembers"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "TeamMembers cannot be null!!");
                }
            }

            if (localCAIRNewCountryManagerTracker) {
                if (localCAIRNewCountryManager != null) {
                    namespace = "";

                    for (int i = 0; i < localCAIRNewCountryManager.length;
                            i++) {
                        if (localCAIRNewCountryManager[i] != null) {
                            writeStartElement(null, namespace,
                                "CAIRNewCountryManager", xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localCAIRNewCountryManager[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "CAIRNewCountryManager cannot be null!!");
                }
            }

            if (localProblemTypeFromCRMPCCTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProblemTypeFromCRMPCC",
                    xmlWriter);

                if (localProblemTypeFromCRMPCC == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProblemTypeFromCRMPCC cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProblemTypeFromCRMPCC);
                }

                xmlWriter.writeEndElement();
            }

            if (localOtherIdentifiedNumbersTracker) {
                namespace = "";
                writeStartElement(null, namespace, "OtherIdentifiedNumbers",
                    xmlWriter);

                if (localOtherIdentifiedNumbers == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OtherIdentifiedNumbers cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOtherIdentifiedNumbers);
                }

                xmlWriter.writeEndElement();
            }

            if (localExternalSourceSystemTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ExternalSourceSystem",
                    xmlWriter);

                if (localExternalSourceSystem == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExternalSourceSystem cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localExternalSourceSystem);
                }

                xmlWriter.writeEndElement();
            }

            if (localRelatedIssuesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RelatedIssues", xmlWriter);

                if (localRelatedIssues == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RelatedIssues cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRelatedIssues));
                }

                xmlWriter.writeEndElement();
            }

            if (localRepetitiveCasesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RepetitiveCases", xmlWriter);

                if (localRepetitiveCases == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RepetitiveCases cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRepetitiveCases));
                }

                xmlWriter.writeEndElement();
            }

            if (localCropFamilyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CropFamily", xmlWriter);

                if (localCropFamily == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CropFamily cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCropFamily));
                }

                xmlWriter.writeEndElement();
            }

            if (localCropVarietyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CropVariety", xmlWriter);

                if (localCropVariety == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CropVariety cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCropVariety);
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfPremisesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfPremises", xmlWriter);

                if (localTypeOfPremises == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfPremises cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTypeOfPremises));
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfDamageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfDamage", xmlWriter);

                if (localTypeOfDamage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfDamage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTypeOfDamage);
                }

                xmlWriter.writeEndElement();
            }

            if (localDamageExceeding5000Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "DamageExceeding5000",
                    xmlWriter);

                if (localDamageExceeding5000 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DamageExceeding5000 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDamageExceeding5000));
                }

                xmlWriter.writeEndElement();
            }

            if (localCouldDamageHaveCausedInjTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CouldDamageHaveCausedInj",
                    xmlWriter);

                if (localCouldDamageHaveCausedInj == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CouldDamageHaveCausedInj cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCouldDamageHaveCausedInj));
                }

                xmlWriter.writeEndElement();
            }

            if (localLabelDirectionsFollowedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LabelDirectionsFollowed",
                    xmlWriter);

                if (localLabelDirectionsFollowed == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LabelDirectionsFollowed cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLabelDirectionsFollowed));
                }

                xmlWriter.writeEndElement();
            }

            if (localIntentionalMisuseTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IntentionalMisuse",
                    xmlWriter);

                if (localIntentionalMisuse == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IntentionalMisuse cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIntentionalMisuse));
                }

                xmlWriter.writeEndElement();
            }

            if (localModeOfExposureTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ModeOfExposure", xmlWriter);

                if (localModeOfExposure == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ModeOfExposure cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localModeOfExposure));
                }

                xmlWriter.writeEndElement();
            }

            if (localTaskCausingTheIncidentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TaskCausingTheIncident",
                    xmlWriter);

                if (localTaskCausingTheIncident == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TaskCausingTheIncident cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTaskCausingTheIncident));
                }

                xmlWriter.writeEndElement();
            }

            if (localExposureSiteTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ExposureSite", xmlWriter);

                if (localExposureSite == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExposureSite cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localExposureSite));
                }

                xmlWriter.writeEndElement();
            }

            if (localIntendedUseSiteTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IntendedUseSite", xmlWriter);

                if (localIntendedUseSite == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IntendedUseSite cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIntendedUseSite));
                }

                xmlWriter.writeEndElement();
            }

            if (localGPSCoordinatesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "GPSCoordinates", xmlWriter);

                if (localGPSCoordinates == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "GPSCoordinates cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGPSCoordinates));
                }

                xmlWriter.writeEndElement();
            }

            if (localReporterContactedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ReporterContacted",
                    xmlWriter);

                if (localReporterContacted == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ReporterContacted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localReporterContacted));
                }

                xmlWriter.writeEndElement();
            }

            if (localContactDateReporterTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ContactDateReporter",
                    xmlWriter);

                if (localContactDateReporter == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ContactDateReporter cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localContactDateReporter));
                }

                xmlWriter.writeEndElement();
            }

            if (localSupplierContactedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SupplierContacted",
                    xmlWriter);

                if (localSupplierContacted == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SupplierContacted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSupplierContacted));
                }

                xmlWriter.writeEndElement();
            }

            if (localContactDateSupplierTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ContactDateSupplier",
                    xmlWriter);

                if (localContactDateSupplier == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ContactDateSupplier cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localContactDateSupplier));
                }

                xmlWriter.writeEndElement();
            }

            if (localSupplierAddressTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SupplierAddress", xmlWriter);

                if (localSupplierAddress == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SupplierAddress cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSupplierAddress));
                }

                xmlWriter.writeEndElement();
            }

            if (localInspectedConditionOfCropTracker) {
                namespace = "";
                writeStartElement(null, namespace, "InspectedConditionOfCrop",
                    xmlWriter);

                if (localInspectedConditionOfCrop == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "InspectedConditionOfCrop cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInspectedConditionOfCrop));
                }

                xmlWriter.writeEndElement();
            }

            if (localMagnitudeOfEffectTracker) {
                namespace = "";
                writeStartElement(null, namespace, "MagnitudeOfEffect",
                    xmlWriter);

                if (localMagnitudeOfEffect == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MagnitudeOfEffect cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMagnitudeOfEffect));
                }

                xmlWriter.writeEndElement();
            }

            if (localCommentsOnEffectsEfficacyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentsOnEffectsEfficacy",
                    xmlWriter);

                if (localCommentsOnEffectsEfficacy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentsOnEffectsEfficacy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentsOnEffectsEfficacy);
                }

                xmlWriter.writeEndElement();
            }

            if (localResistanceSuspectedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ResistanceSuspected",
                    xmlWriter);

                if (localResistanceSuspected == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ResistanceSuspected cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localResistanceSuspected));
                }

                xmlWriter.writeEndElement();
            }

            if (localResistanceDescriptionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ResistanceDescription",
                    xmlWriter);

                if (localResistanceDescription == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ResistanceDescription cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localResistanceDescription);
                }

                xmlWriter.writeEndElement();
            }

            if (localIncompatibilitySuspectedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IncompatibilitySuspected",
                    xmlWriter);

                if (localIncompatibilitySuspected == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IncompatibilitySuspected cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIncompatibilitySuspected));
                }

                xmlWriter.writeEndElement();
            }

            if (localIncompatibilityDescriptionTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "IncompatibilityDescription", xmlWriter);

                if (localIncompatibilityDescription == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IncompatibilityDescription cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIncompatibilityDescription);
                }

                xmlWriter.writeEndElement();
            }

            if (localDescriptionOfIncidentSiteTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DescriptionOfIncidentSite",
                    xmlWriter);

                if (localDescriptionOfIncidentSite == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DescriptionOfIncidentSite cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDescriptionOfIncidentSite);
                }

                xmlWriter.writeEndElement();
            }

            if (localDistanceTreatedIncidentSiteTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "DistanceTreatedIncidentSite", xmlWriter);

                if (localDistanceTreatedIncidentSite == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DistanceTreatedIncidentSite cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDistanceTreatedIncidentSite));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureWildLifeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureWildLife",
                    xmlWriter);

                if (localUnitOfMeasureWildLife == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureWildLife cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureWildLife));
                }

                xmlWriter.writeEndElement();
            }

            if (localSymptomsOfWildLifeAnimalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SymptomsOfWildLifeAnimal",
                    xmlWriter);

                if (localSymptomsOfWildLifeAnimal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SymptomsOfWildLifeAnimal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSymptomsOfWildLifeAnimal);
                }

                xmlWriter.writeEndElement();
            }

            if (localMagnitudeOfEffectWlTracker) {
                namespace = "";
                writeStartElement(null, namespace, "MagnitudeOfEffectWl",
                    xmlWriter);

                if (localMagnitudeOfEffectWl == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MagnitudeOfEffectWl cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMagnitudeOfEffectWl);
                }

                xmlWriter.writeEndElement();
            }

            if (localDescriptionOfHabitatTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DescriptionOfHabitat",
                    xmlWriter);

                if (localDescriptionOfHabitat == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DescriptionOfHabitat cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDescriptionOfHabitat);
                }

                xmlWriter.writeEndElement();
            }

            if (localLocationOfDeadBeesFoundTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LocationOfDeadBeesFound",
                    xmlWriter);

                if (localLocationOfDeadBeesFound == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LocationOfDeadBeesFound cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLocationOfDeadBeesFound));
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalNoOfColoniesInApiaryTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TotalNoOfColoniesInApiary",
                    xmlWriter);

                if (localTotalNoOfColoniesInApiary == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TotalNoOfColoniesInApiary cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalNoOfColoniesInApiary));
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberOfAffectedHivesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NumberOfAffectedHives",
                    xmlWriter);

                if (localNumberOfAffectedHives == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NumberOfAffectedHives cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNumberOfAffectedHives));
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberOfDeadBeesFoundTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NumberOfDeadBeesFound",
                    xmlWriter);

                if (localNumberOfDeadBeesFound == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NumberOfDeadBeesFound cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNumberOfDeadBeesFound));
                }

                xmlWriter.writeEndElement();
            }

            if (localHistoryOfBeeKillsInAreaTracker) {
                namespace = "";
                writeStartElement(null, namespace, "HistoryOfBeeKillsInArea",
                    xmlWriter);

                if (localHistoryOfBeeKillsInArea == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "HistoryOfBeeKillsInArea cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHistoryOfBeeKillsInArea));
                }

                xmlWriter.writeEndElement();
            }

            if (localHistoryOfBeeKillsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "HistoryOfBeeKills",
                    xmlWriter);

                if (localHistoryOfBeeKills == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "HistoryOfBeeKills cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localHistoryOfBeeKills);
                }

                xmlWriter.writeEndElement();
            }

            if (localHivesExaminedForDiseasesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "HivesExaminedForDiseases",
                    xmlWriter);

                if (localHivesExaminedForDiseases == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "HivesExaminedForDiseases cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHivesExaminedForDiseases));
                }

                xmlWriter.writeEndElement();
            }

            if (localDiseasesFoundTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DiseasesFound", xmlWriter);

                if (localDiseasesFound == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DiseasesFound cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDiseasesFound));
                }

                xmlWriter.writeEndElement();
            }

            if (localDetailsOfInfectionInfestTracker) {
                if (localDetailsOfInfectionInfest != null) {
                    for (int i = 0; i < localDetailsOfInfectionInfest.length;
                            i++) {
                        if (localDetailsOfInfectionInfest[i] != null) {
                            localDetailsOfInfectionInfest[i].serialize(new javax.xml.namespace.QName(
                                    "", "DetailsOfInfectionInfest"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "DetailsOfInfectionInfest cannot be null!!");
                }
            }

            if (localCaseInvestigationContactsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CaseInvestigationContacts",
                    xmlWriter);

                if (localCaseInvestigationContacts == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CaseInvestigationContacts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCaseInvestigationContacts);
                }

                xmlWriter.writeEndElement();
            }

            if (localExternalInvestigationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ExternalInvestigation",
                    xmlWriter);

                if (localExternalInvestigation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExternalInvestigation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localExternalInvestigation));
                }

                xmlWriter.writeEndElement();
            }

            if (localExternalAttachmentsTracker) {
                if (localExternalAttachments == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExternalAttachments cannot be null!!");
                }

                localExternalAttachments.serialize(new javax.xml.namespace.QName(
                        "", "ExternalAttachments"), xmlWriter);
            }

            if (localInvestigationAttachmentsTracker) {
                if (localInvestigationAttachments == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "InvestigationAttachments cannot be null!!");
                }

                localInvestigationAttachments.serialize(new javax.xml.namespace.QName(
                        "", "InvestigationAttachments"), xmlWriter);
            }

            if (localFollowUpRequiredTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FollowUpRequired", xmlWriter);

                if (localFollowUpRequired == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FollowUpRequired cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFollowUpRequired));
                }

                xmlWriter.writeEndElement();
            }

            if (localSoilTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SoilType", xmlWriter);

                if (localSoilType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SoilType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSoilType));
                }

                xmlWriter.writeEndElement();
            }

            if (localPercentOrganicMatterCarbonTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "PercentOrganicMatterCarbon", xmlWriter);

                if (localPercentOrganicMatterCarbon == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PercentOrganicMatterCarbon cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPercentOrganicMatterCarbon));
                }

                xmlWriter.writeEndElement();
            }

            if (localSoilMoistureWetnessTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SoilMoistureWetness",
                    xmlWriter);

                if (localSoilMoistureWetness == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SoilMoistureWetness cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSoilMoistureWetness));
                }

                xmlWriter.writeEndElement();
            }

            if (localFertilizerRegimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FertilizerRegime", xmlWriter);

                if (localFertilizerRegime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FertilizerRegime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFertilizerRegime);
                }

                xmlWriter.writeEndElement();
            }

            if (localOpenerCoulterTracker) {
                namespace = "";
                writeStartElement(null, namespace, "OpenerCoulter", xmlWriter);

                if (localOpenerCoulter == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OpenerCoulter cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOpenerCoulter);
                }

                xmlWriter.writeEndElement();
            }

            if (localRainfallAfterTreatmentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RainfallAfterTreatment",
                    xmlWriter);

                if (localRainfallAfterTreatment == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RainfallAfterTreatment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRainfallAfterTreatment));
                }

                xmlWriter.writeEndElement();
            }

            if (localFurtherCommentsWeatherTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FurtherCommentsWeather",
                    xmlWriter);

                if (localFurtherCommentsWeather == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FurtherCommentsWeather cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFurtherCommentsWeather);
                }

                xmlWriter.writeEndElement();
            }

            if (localSourceOfWeatherInformationTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "SourceOfWeatherInformation", xmlWriter);

                if (localSourceOfWeatherInformation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SourceOfWeatherInformation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSourceOfWeatherInformation);
                }

                xmlWriter.writeEndElement();
            }

            if (localGeneralWeatherInformationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "GeneralWeatherInformation",
                    xmlWriter);

                if (localGeneralWeatherInformation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "GeneralWeatherInformation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGeneralWeatherInformation);
                }

                xmlWriter.writeEndElement();
            }

            if (localWeatherAttachmentsTracker) {
                if (localWeatherAttachments == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "WeatherAttachments cannot be null!!");
                }

                localWeatherAttachments.serialize(new javax.xml.namespace.QName(
                        "", "WeatherAttachments"), xmlWriter);
            }

            if (localAffectedPersonInformationTracker) {
                if (localAffectedPersonInformation != null) {
                    for (int i = 0; i < localAffectedPersonInformation.length;
                            i++) {
                        if (localAffectedPersonInformation[i] != null) {
                            localAffectedPersonInformation[i].serialize(new javax.xml.namespace.QName(
                                    "", "AffectedPersonInformation"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AffectedPersonInformation cannot be null!!");
                }
            }

            if (localExposuresTracker) {
                if (localExposures != null) {
                    for (int i = 0; i < localExposures.length; i++) {
                        if (localExposures[i] != null) {
                            localExposures[i].serialize(new javax.xml.namespace.QName(
                                    "", "Exposures"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Exposures cannot be null!!");
                }
            }

            if (localExposureDetailsListTracker) {
                if (localExposureDetailsList != null) {
                    for (int i = 0; i < localExposureDetailsList.length; i++) {
                        if (localExposureDetailsList[i] != null) {
                            localExposureDetailsList[i].serialize(new javax.xml.namespace.QName(
                                    "", "ExposureDetailsList"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExposureDetailsList cannot be null!!");
                }
            }

            if (localDomesticAnimalTracker) {
                if (localDomesticAnimal != null) {
                    for (int i = 0; i < localDomesticAnimal.length; i++) {
                        if (localDomesticAnimal[i] != null) {
                            localDomesticAnimal[i].serialize(new javax.xml.namespace.QName(
                                    "", "DomesticAnimal"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "DomesticAnimal cannot be null!!");
                }
            }

            if (localSymptomsOfDomesticAnimalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SymptomsOfDomesticAnimal",
                    xmlWriter);

                if (localSymptomsOfDomesticAnimal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SymptomsOfDomesticAnimal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSymptomsOfDomesticAnimal);
                }

                xmlWriter.writeEndElement();
            }

            if (localOutcomeOfSymptomDATracker) {
                namespace = "";
                writeStartElement(null, namespace, "OutcomeOfSymptomDA",
                    xmlWriter);

                if (localOutcomeOfSymptomDA == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OutcomeOfSymptomDA cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOutcomeOfSymptomDA);
                }

                xmlWriter.writeEndElement();
            }

            if (localTimeUntilOnsetOfSymptomsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TimeUntilOnsetOfSymptoms",
                    xmlWriter);

                if (localTimeUntilOnsetOfSymptoms == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TimeUntilOnsetOfSymptoms cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTimeUntilOnsetOfSymptoms);
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasOnsetSympTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasOnsetSymp",
                    xmlWriter);

                if (localUnitOfMeasOnsetSymp == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasOnsetSymp cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUnitOfMeasOnsetSymp);
                }

                xmlWriter.writeEndElement();
            }

            if (localDurationOfSymptomDATracker) {
                namespace = "";
                writeStartElement(null, namespace, "DurationOfSymptomDA",
                    xmlWriter);

                if (localDurationOfSymptomDA == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DurationOfSymptomDA cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDurationOfSymptomDA);
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitDurationSymptonDATracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitDurationSymptonDA",
                    xmlWriter);

                if (localUnitDurationSymptonDA == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitDurationSymptonDA cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUnitDurationSymptonDA);
                }

                xmlWriter.writeEndElement();
            }

            if (localMedicalTreatmentOfAnimalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "MedicalTreatmentOfAnimal",
                    xmlWriter);

                if (localMedicalTreatmentOfAnimal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MedicalTreatmentOfAnimal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMedicalTreatmentOfAnimal);
                }

                xmlWriter.writeEndElement();
            }

            if (localHospitalizationOfAnimalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "HospitalizationOfAnimal",
                    xmlWriter);

                if (localHospitalizationOfAnimal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "HospitalizationOfAnimal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localHospitalizationOfAnimal);
                }

                xmlWriter.writeEndElement();
            }

            if (localWildLifeDetailsTracker) {
                if (localWildLifeDetails != null) {
                    for (int i = 0; i < localWildLifeDetails.length; i++) {
                        if (localWildLifeDetails[i] != null) {
                            localWildLifeDetails[i].serialize(new javax.xml.namespace.QName(
                                    "", "WildLifeDetails"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "WildLifeDetails cannot be null!!");
                }
            }

            if (localBusinessSegmentsTracker) {
                if (localBusinessSegments != null) {
                    namespace = "";

                    for (int i = 0; i < localBusinessSegments.length; i++) {
                        if (localBusinessSegments[i] != null) {
                            writeStartElement(null, namespace,
                                "BusinessSegments", xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localBusinessSegments[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "BusinessSegments cannot be null!!");
                }
            }

            if (localProductIndicationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductIndication",
                    xmlWriter);

                if (localProductIndication == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductIndication cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductIndication);
                }

                xmlWriter.writeEndElement();
            }

            if (localSpecifiedContentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SpecifiedContent", xmlWriter);

                if (localSpecifiedContent == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SpecifiedContent cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSpecifiedContent);
                }

                xmlWriter.writeEndElement();
            }

            if (localFormulationTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FormulationType", xmlWriter);

                if (localFormulationType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FormulationType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFormulationType));
                }

                xmlWriter.writeEndElement();
            }

            if (localPackSizeAndTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PackSizeAndType", xmlWriter);

                if (localPackSizeAndType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PackSizeAndType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPackSizeAndType);
                }

                xmlWriter.writeEndElement();
            }

            if (localActiveIngredientsTracker) {
                if (localActiveIngredients != null) {
                    namespace = "";

                    for (int i = 0; i < localActiveIngredients.length; i++) {
                        if (localActiveIngredients[i] != null) {
                            writeStartElement(null, namespace,
                                "ActiveIngredients", xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localActiveIngredients[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ActiveIngredients cannot be null!!");
                }
            }

            if (localBayerProductTracker) {
                namespace = "";
                writeStartElement(null, namespace, "BayerProduct", xmlWriter);

                if (localBayerProduct == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BayerProduct cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBayerProduct));
                }

                xmlWriter.writeEndElement();
            }

            if (localSearchstringLeadProdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SearchstringLeadProd",
                    xmlWriter);

                if (localSearchstringLeadProd == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SearchstringLeadProd cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSearchstringLeadProd);
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialNumberPackedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaterialNumberPacked",
                    xmlWriter);

                if (localMaterialNumberPacked == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaterialNumberPacked cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialNumberPacked));
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialNumberUnpackedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaterialNumberUnpacked",
                    xmlWriter);

                if (localMaterialNumberUnpacked == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaterialNumberUnpacked cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialNumberUnpacked));
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialTextPackedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaterialTextPacked",
                    xmlWriter);

                if (localMaterialTextPacked == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaterialTextPacked cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialTextPacked));
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialTextUnpackedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaterialTextUnpacked",
                    xmlWriter);

                if (localMaterialTextUnpacked == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaterialTextUnpacked cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialTextUnpacked));
                }

                xmlWriter.writeEndElement();
            }

            if (localSpecificationNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SpecificationNumber",
                    xmlWriter);

                if (localSpecificationNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SpecificationNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSpecificationNumber));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductRegistrationNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductRegistrationNumber",
                    xmlWriter);

                if (localProductRegistrationNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductRegistrationNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductRegistrationNumber));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductSampleCommentsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductSampleComments",
                    xmlWriter);

                if (localProductSampleComments == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductSampleComments cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductSampleComments));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductSampleTakenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductSampleTaken",
                    xmlWriter);

                if (localProductSampleTaken == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductSampleTaken cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductSampleTaken));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductBrandName2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductBrandName2",
                    xmlWriter);

                if (localProductBrandName2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductBrandName2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductBrandName2));
                }

                xmlWriter.writeEndElement();
            }

            if (localSpecifiedContent2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "SpecifiedContent2",
                    xmlWriter);

                if (localSpecifiedContent2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SpecifiedContent2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSpecifiedContent2);
                }

                xmlWriter.writeEndElement();
            }

            if (localFormulationType2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "FormulationType2", xmlWriter);

                if (localFormulationType2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FormulationType2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFormulationType2));
                }

                xmlWriter.writeEndElement();
            }

            if (localBatchLotNumber2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "BatchLotNumber2", xmlWriter);

                if (localBatchLotNumber2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BatchLotNumber2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBatchLotNumber2);
                }

                xmlWriter.writeEndElement();
            }

            if (localUFI2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UFI2", xmlWriter);

                if (localUFI2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UFI2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUFI2);
                }

                xmlWriter.writeEndElement();
            }

            if (localPackSizeAndType2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "PackSizeAndType2", xmlWriter);

                if (localPackSizeAndType2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PackSizeAndType2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPackSizeAndType2);
                }

                xmlWriter.writeEndElement();
            }

            if (localActiveIngredients2Tracker) {
                if (localActiveIngredients2 != null) {
                    namespace = "";

                    for (int i = 0; i < localActiveIngredients2.length; i++) {
                        if (localActiveIngredients2[i] != null) {
                            writeStartElement(null, namespace,
                                "ActiveIngredients2", xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localActiveIngredients2[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ActiveIngredients2 cannot be null!!");
                }
            }

            if (localBayerProduct2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "BayerProduct2", xmlWriter);

                if (localBayerProduct2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BayerProduct2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBayerProduct2));
                }

                xmlWriter.writeEndElement();
            }

            if (localSearchstringAddProdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SearchstringAddProd",
                    xmlWriter);

                if (localSearchstringAddProd == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SearchstringAddProd cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSearchstringAddProd);
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialNumberPacked2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaterialNumberPacked2",
                    xmlWriter);

                if (localMaterialNumberPacked2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaterialNumberPacked2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialNumberPacked2));
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialNumberUnpacked2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaterialNumberUnpacked2",
                    xmlWriter);

                if (localMaterialNumberUnpacked2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaterialNumberUnpacked2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialNumberUnpacked2));
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialTextPacked2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaterialTextPacked2",
                    xmlWriter);

                if (localMaterialTextPacked2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaterialTextPacked2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialTextPacked2));
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialTextUnpacked2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaterialTextUnpacked2",
                    xmlWriter);

                if (localMaterialTextUnpacked2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaterialTextUnpacked2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialTextUnpacked2));
                }

                xmlWriter.writeEndElement();
            }

            if (localSpecificationNumber2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "SpecificationNumber2",
                    xmlWriter);

                if (localSpecificationNumber2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SpecificationNumber2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSpecificationNumber2));
                }

                xmlWriter.writeEndElement();
            }

            if (localProdRegistrationNumber2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProdRegistrationNumber2",
                    xmlWriter);

                if (localProdRegistrationNumber2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProdRegistrationNumber2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProdRegistrationNumber2));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductSampleComments2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductSampleComments2",
                    xmlWriter);

                if (localProductSampleComments2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductSampleComments2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductSampleComments2));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductSampleTaken2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductSampleTaken2",
                    xmlWriter);

                if (localProductSampleTaken2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductSampleTaken2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductSampleTaken2));
                }

                xmlWriter.writeEndElement();
            }

            if (localFurtherProductsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FurtherProducts", xmlWriter);

                if (localFurtherProducts == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FurtherProducts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFurtherProducts);
                }

                xmlWriter.writeEndElement();
            }

            if (localAttachmentsForProductsTracker) {
                if (localAttachmentsForProducts == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AttachmentsForProducts cannot be null!!");
                }

                localAttachmentsForProducts.serialize(new javax.xml.namespace.QName(
                        "", "AttachmentsForProducts"), xmlWriter);
            }

            if (localFurtherCommentsOnProductsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FurtherCommentsOnProducts",
                    xmlWriter);

                if (localFurtherCommentsOnProducts == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FurtherCommentsOnProducts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFurtherCommentsOnProducts);
                }

                xmlWriter.writeEndElement();
            }

            if (localDepotNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DepotName", xmlWriter);

                if (localDepotName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DepotName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDepotName);
                }

                xmlWriter.writeEndElement();
            }

            if (localPackagingTracker) {
                if (localPackaging != null) {
                    for (int i = 0; i < localPackaging.length; i++) {
                        if (localPackaging[i] != null) {
                            localPackaging[i].serialize(new javax.xml.namespace.QName(
                                    "", "Packaging"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Packaging cannot be null!!");
                }
            }

            if (localCommentOnPackagingTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentOnPackaging",
                    xmlWriter);

                if (localCommentOnPackaging == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentOnPackaging cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentOnPackaging);
                }

                xmlWriter.writeEndElement();
            }

            if (localAttachementsForPackagingTracker) {
                if (localAttachementsForPackaging == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AttachementsForPackaging cannot be null!!");
                }

                localAttachementsForPackaging.serialize(new javax.xml.namespace.QName(
                        "", "AttachementsForPackaging"), xmlWriter);
            }

            if (localFormulationDetailsTracker) {
                if (localFormulationDetails != null) {
                    for (int i = 0; i < localFormulationDetails.length; i++) {
                        if (localFormulationDetails[i] != null) {
                            localFormulationDetails[i].serialize(new javax.xml.namespace.QName(
                                    "", "FormulationDetails"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "FormulationDetails cannot be null!!");
                }
            }

            if (localDeliveryNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DeliveryNumber", xmlWriter);

                if (localDeliveryNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DeliveryNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeliveryNumber));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeliveryItemTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DeliveryItem", xmlWriter);

                if (localDeliveryItem == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DeliveryItem cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeliveryItem));
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerNameSoldToTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CustomerNameSoldTo",
                    xmlWriter);

                if (localCustomerNameSoldTo == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CustomerNameSoldTo cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCustomerNameSoldTo);
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerNameShippedToTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CustomerNameShippedTo",
                    xmlWriter);

                if (localCustomerNameShippedTo == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CustomerNameShippedTo cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCustomerNameShippedTo);
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerSAPcodeSoldToTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CustomerSAPcodeSoldTo",
                    xmlWriter);

                if (localCustomerSAPcodeSoldTo == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CustomerSAPcodeSoldTo cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCustomerSAPcodeSoldTo));
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerSAPCodeShippedToTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CustomerSAPCodeShippedTo",
                    xmlWriter);

                if (localCustomerSAPCodeShippedTo == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CustomerSAPCodeShippedTo cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCustomerSAPCodeShippedTo));
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalQuantityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TotalQuantity", xmlWriter);

                if (localTotalQuantity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TotalQuantity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalQuantity));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasurementQuantityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasurementQuantity",
                    xmlWriter);

                if (localUnitOfMeasurementQuantity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasurementQuantity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasurementQuantity));
                }

                xmlWriter.writeEndElement();
            }

            if (localDamagedQuantityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DamagedQuantity", xmlWriter);

                if (localDamagedQuantity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DamagedQuantity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDamagedQuantity));
                }

                xmlWriter.writeEndElement();
            }

            if (localMarketValueOfAffectedGoodsTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "MarketValueOfAffectedGoods", xmlWriter);

                if (localMarketValueOfAffectedGoods == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MarketValueOfAffectedGoods cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMarketValueOfAffectedGoods));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CurrencyType", xmlWriter);

                if (localCurrencyType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CurrencyType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCurrencyType));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeliveryNumber2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "DeliveryNumber2", xmlWriter);

                if (localDeliveryNumber2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DeliveryNumber2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeliveryNumber2));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeliveryItem2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "DeliveryItem2", xmlWriter);

                if (localDeliveryItem2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DeliveryItem2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeliveryItem2));
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerNameSoldTo2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "CustomerNameSoldTo2",
                    xmlWriter);

                if (localCustomerNameSoldTo2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CustomerNameSoldTo2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCustomerNameSoldTo2);
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerNameShippedTo2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "CustomerNameShippedTo2",
                    xmlWriter);

                if (localCustomerNameShippedTo2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CustomerNameShippedTo2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCustomerNameShippedTo2);
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerSAPCodeSoldTo2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "CustomerSAPCodeSoldTo2",
                    xmlWriter);

                if (localCustomerSAPCodeSoldTo2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CustomerSAPCodeSoldTo2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCustomerSAPCodeSoldTo2));
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerSAPCodeShippedTo2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "CustomerSAPCodeShippedTo2",
                    xmlWriter);

                if (localCustomerSAPCodeShippedTo2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CustomerSAPCodeShippedTo2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCustomerSAPCodeShippedTo2));
                }

                xmlWriter.writeEndElement();
            }

            if (localDistributorRetailer2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "DistributorRetailer2",
                    xmlWriter);

                if (localDistributorRetailer2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DistributorRetailer2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDistributorRetailer2));
                }

                xmlWriter.writeEndElement();
            }

            if (localDepotName2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "DepotName2", xmlWriter);

                if (localDepotName2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DepotName2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDepotName2);
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalQuantity2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "TotalQuantity2", xmlWriter);

                if (localTotalQuantity2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TotalQuantity2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalQuantity2));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasurementQuantity2Tracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "UnitOfMeasurementQuantity2", xmlWriter);

                if (localUnitOfMeasurementQuantity2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasurementQuantity2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasurementQuantity2));
                }

                xmlWriter.writeEndElement();
            }

            if (localDamagedQuantity2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "DamagedQuantity2", xmlWriter);

                if (localDamagedQuantity2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DamagedQuantity2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDamagedQuantity2));
                }

                xmlWriter.writeEndElement();
            }

            if (localMarketValueOfAffectedGoods2Tracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "MarketValueOfAffectedGoods2", xmlWriter);

                if (localMarketValueOfAffectedGoods2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MarketValueOfAffectedGoods2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMarketValueOfAffectedGoods2));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyType2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "CurrencyType2", xmlWriter);

                if (localCurrencyType2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CurrencyType2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCurrencyType2);
                }

                xmlWriter.writeEndElement();
            }

            if (localCommentsOnDeliveryTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentsOnDelivery",
                    xmlWriter);

                if (localCommentsOnDelivery == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentsOnDelivery cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentsOnDelivery);
                }

                xmlWriter.writeEndElement();
            }

            if (localAttachmentsForDeliveryTracker) {
                if (localAttachmentsForDelivery == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AttachmentsForDelivery cannot be null!!");
                }

                localAttachmentsForDelivery.serialize(new javax.xml.namespace.QName(
                        "", "AttachmentsForDelivery"), xmlWriter);
            }

            if (localApplicationsTracker) {
                if (localApplications != null) {
                    for (int i = 0; i < localApplications.length; i++) {
                        if (localApplications[i] != null) {
                            localApplications[i].serialize(new javax.xml.namespace.QName(
                                    "", "Applications"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Applications cannot be null!!");
                }
            }

            if (localPriorAppliedProductsTracker) {
                if (localPriorAppliedProducts != null) {
                    for (int i = 0; i < localPriorAppliedProducts.length;
                            i++) {
                        if (localPriorAppliedProducts[i] != null) {
                            localPriorAppliedProducts[i].serialize(new javax.xml.namespace.QName(
                                    "", "PriorAppliedProducts"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "PriorAppliedProducts cannot be null!!");
                }
            }

            if (localDateOfLastApplicationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DateOfLastApplication",
                    xmlWriter);

                if (localDateOfLastApplication == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DateOfLastApplication cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDateOfLastApplication));
                }

                xmlWriter.writeEndElement();
            }

            if (localCommentOnApplicationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentOnApplication",
                    xmlWriter);

                if (localCommentOnApplication == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentOnApplication cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentOnApplication);
                }

                xmlWriter.writeEndElement();
            }

            if (localUserALicensedApplicatorTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UserALicensedApplicator",
                    xmlWriter);

                if (localUserALicensedApplicator == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UserALicensedApplicator cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUserALicensedApplicator));
                }

                xmlWriter.writeEndElement();
            }

            if (localApplicationRecordAddedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ApplicationRecordAdded",
                    xmlWriter);

                if (localApplicationRecordAdded == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ApplicationRecordAdded cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localApplicationRecordAdded));
                }

                xmlWriter.writeEndElement();
            }

            if (localApplicationRecordTracker) {
                if (localApplicationRecord == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ApplicationRecord cannot be null!!");
                }

                localApplicationRecord.serialize(new javax.xml.namespace.QName(
                        "", "ApplicationRecord"), xmlWriter);
            }

            if (localBufferZoneTracker) {
                namespace = "";
                writeStartElement(null, namespace, "BufferZone", xmlWriter);

                if (localBufferZone == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BufferZone cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBufferZone);
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureBufferTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureBuffer",
                    xmlWriter);

                if (localUnitOfMeasureBuffer == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureBuffer cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureBuffer));
                }

                xmlWriter.writeEndElement();
            }

            if (localNonBCSPrdApplInVicinityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NonBCSPrdApplInVicinity",
                    xmlWriter);

                if (localNonBCSPrdApplInVicinity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NonBCSPrdApplInVicinity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNonBCSPrdApplInVicinity));
                }

                xmlWriter.writeEndElement();
            }

            if (localSeedBrandVarietyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SeedBrandVariety", xmlWriter);

                if (localSeedBrandVariety == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SeedBrandVariety cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSeedBrandVariety);
                }

                xmlWriter.writeEndElement();
            }

            if (localSeedLotTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SeedLot", xmlWriter);

                if (localSeedLot == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SeedLot cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSeedLot);
                }

                xmlWriter.writeEndElement();
            }

            if (localSeedCompanyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SeedCompany", xmlWriter);

                if (localSeedCompany == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SeedCompany cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSeedCompany);
                }

                xmlWriter.writeEndElement();
            }

            if (localFurtherInformationOnSeedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FurtherInformationOnSeed",
                    xmlWriter);

                if (localFurtherInformationOnSeed == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FurtherInformationOnSeed cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFurtherInformationOnSeed);
                }

                xmlWriter.writeEndElement();
            }

            if (localProcessorNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProcessorName", xmlWriter);

                if (localProcessorName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProcessorName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProcessorName);
                }

                xmlWriter.writeEndElement();
            }

            if (localSeedTreatmentFacilityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SeedTreatmentFacility",
                    xmlWriter);

                if (localSeedTreatmentFacility == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SeedTreatmentFacility cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSeedTreatmentFacility);
                }

                xmlWriter.writeEndElement();
            }

            if (localProcessorLocationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProcessorLocation",
                    xmlWriter);

                if (localProcessorLocation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProcessorLocation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProcessorLocation);
                }

                xmlWriter.writeEndElement();
            }

            if (localLoadingTestResultTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LoadingTestResult",
                    xmlWriter);

                if (localLoadingTestResult == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LoadingTestResult cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLoadingTestResult);
                }

                xmlWriter.writeEndElement();
            }

            if (localGerminationTestResultTracker) {
                namespace = "";
                writeStartElement(null, namespace, "GerminationTestResult",
                    xmlWriter);

                if (localGerminationTestResult == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "GerminationTestResult cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGerminationTestResult);
                }

                xmlWriter.writeEndElement();
            }

            if (localVigorTestResultTracker) {
                namespace = "";
                writeStartElement(null, namespace, "VigorTestResult", xmlWriter);

                if (localVigorTestResult == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "VigorTestResult cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localVigorTestResult);
                }

                xmlWriter.writeEndElement();
            }

            if (localSowingDatePlantedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SowingDatePlanted",
                    xmlWriter);

                if (localSowingDatePlanted == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SowingDatePlanted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSowingDatePlanted));
                }

                xmlWriter.writeEndElement();
            }

            if (localSeedRatePlantsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SeedRatePlants", xmlWriter);

                if (localSeedRatePlants == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SeedRatePlants cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSeedRatePlants));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureSeedPlantsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureSeedPlants",
                    xmlWriter);

                if (localUnitOfMeasureSeedPlants == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureSeedPlants cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureSeedPlants));
                }

                xmlWriter.writeEndElement();
            }

            if (localCommentOnSowingTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentOnSowing", xmlWriter);

                if (localCommentOnSowing == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentOnSowing cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentOnSowing);
                }

                xmlWriter.writeEndElement();
            }

            if (localDescriptionOfMachineryUsedTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "DescriptionOfMachineryUsed", xmlWriter);

                if (localDescriptionOfMachineryUsed == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DescriptionOfMachineryUsed cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDescriptionOfMachineryUsed);
                }

                xmlWriter.writeEndElement();
            }

            if (localNozzleTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NozzleType", xmlWriter);

                if (localNozzleType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NozzleType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNozzleType));
                }

                xmlWriter.writeEndElement();
            }

            if (localDropletSizeOfNozzlesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DropletSizeOfNozzles",
                    xmlWriter);

                if (localDropletSizeOfNozzles == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DropletSizeOfNozzles cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDropletSizeOfNozzles);
                }

                xmlWriter.writeEndElement();
            }

            if (localSymptomsTracker) {
                if (localSymptoms != null) {
                    for (int i = 0; i < localSymptoms.length; i++) {
                        if (localSymptoms[i] != null) {
                            localSymptoms[i].serialize(new javax.xml.namespace.QName(
                                    "", "Symptoms"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Symptoms cannot be null!!");
                }
            }

            if (localFirstAidTracker) {
                if (localFirstAid != null) {
                    for (int i = 0; i < localFirstAid.length; i++) {
                        if (localFirstAid[i] != null) {
                            localFirstAid[i].serialize(new javax.xml.namespace.QName(
                                    "", "FirstAid"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "FirstAid cannot be null!!");
                }
            }

            if (localLabTestsPerformedMDTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LabTestsPerformedMD",
                    xmlWriter);

                if (localLabTestsPerformedMD == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LabTestsPerformedMD cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLabTestsPerformedMD));
                }

                xmlWriter.writeEndElement();
            }

            if (localLabTestsAttachmentTracker) {
                if (localLabTestsAttachment == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "LabTestsAttachment cannot be null!!");
                }

                localLabTestsAttachment.serialize(new javax.xml.namespace.QName(
                        "", "LabTestsAttachment"), xmlWriter);
            }

            if (localCircumstancesTracker) {
                if (localCircumstances != null) {
                    for (int i = 0; i < localCircumstances.length; i++) {
                        if (localCircumstances[i] != null) {
                            localCircumstances[i].serialize(new javax.xml.namespace.QName(
                                    "", "Circumstances"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Circumstances cannot be null!!");
                }
            }

            if (localTimeBetwTreatmAndDetectTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TimeBetwTreatmAndDetect",
                    xmlWriter);

                if (localTimeBetwTreatmAndDetect == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TimeBetwTreatmAndDetect cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTimeBetwTreatmAndDetect));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureTime",
                    xmlWriter);

                if (localUnitOfMeasureTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localCommentsOnCircumstancesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentsOnCircumstances",
                    xmlWriter);

                if (localCommentsOnCircumstances == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentsOnCircumstances cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentsOnCircumstances);
                }

                xmlWriter.writeEndElement();
            }

            if (localOrganizationCollectingSampleTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "OrganizationCollectingSample", xmlWriter);

                if (localOrganizationCollectingSample == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OrganizationCollectingSample cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOrganizationCollectingSample));
                }

                xmlWriter.writeEndElement();
            }

            if (localSamplingTimesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SamplingTimes", xmlWriter);

                if (localSamplingTimes == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SamplingTimes cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSamplingTimes));
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberOfSamplesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NumberOfSamples", xmlWriter);

                if (localNumberOfSamples == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NumberOfSamples cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNumberOfSamples));
                }

                xmlWriter.writeEndElement();
            }

            if (localQuantityOfSamplesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "QuantityOfSamples",
                    xmlWriter);

                if (localQuantityOfSamples == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "QuantityOfSamples cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localQuantityOfSamples));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureSamplesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureSamples",
                    xmlWriter);

                if (localUnitOfMeasureSamples == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureSamples cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureSamples));
                }

                xmlWriter.writeEndElement();
            }

            if (localReasonForSamplingTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ReasonForSampling",
                    xmlWriter);

                if (localReasonForSampling == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ReasonForSampling cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localReasonForSampling);
                }

                xmlWriter.writeEndElement();
            }

            if (localPercentOfOrganicCarbonTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PercentOfOrganicCarbon",
                    xmlWriter);

                if (localPercentOfOrganicCarbon == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PercentOfOrganicCarbon cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPercentOfOrganicCarbon));
                }

                xmlWriter.writeEndElement();
            }

            if (localSoilSeriesTextureTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SoilSeriesTexture",
                    xmlWriter);

                if (localSoilSeriesTexture == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SoilSeriesTexture cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSoilSeriesTexture));
                }

                xmlWriter.writeEndElement();
            }

            if (localHydraulicConductivityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "HydraulicConductivity",
                    xmlWriter);

                if (localHydraulicConductivity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "HydraulicConductivity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localHydraulicConductivity);
                }

                xmlWriter.writeEndElement();
            }

            if (localAquiferDescriptionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AquiferDescription",
                    xmlWriter);

                if (localAquiferDescription == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AquiferDescription cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAquiferDescription);
                }

                xmlWriter.writeEndElement();
            }

            if (localHydraulicGroupTracker) {
                namespace = "";
                writeStartElement(null, namespace, "HydraulicGroup", xmlWriter);

                if (localHydraulicGroup == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "HydraulicGroup cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHydraulicGroup));
                }

                xmlWriter.writeEndElement();
            }

            if (localPhOfWaterTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PhOfWater", xmlWriter);

                if (localPhOfWater == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PhOfWater cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPhOfWater));
                }

                xmlWriter.writeEndElement();
            }

            if (localMaxRainFallTracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaxRainFall", xmlWriter);

                if (localMaxRainFall == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaxRainFall cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaxRainFall));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureRainfallTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureRainfall",
                    xmlWriter);

                if (localUnitOfMeasureRainfall == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureRainfall cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureRainfall));
                }

                xmlWriter.writeEndElement();
            }

            if (localAnnualTotalRainTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AnnualTotalRain", xmlWriter);

                if (localAnnualTotalRain == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AnnualTotalRain cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnnualTotalRain));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureTotalRainTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureTotalRain",
                    xmlWriter);

                if (localUnitOfMeasureTotalRain == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureTotalRain cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureTotalRain));
                }

                xmlWriter.writeEndElement();
            }

            if (localAnnualTotalIrrigationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AnnualTotalIrrigation",
                    xmlWriter);

                if (localAnnualTotalIrrigation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AnnualTotalIrrigation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnnualTotalIrrigation));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureTotalIrrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureTotalIrr",
                    xmlWriter);

                if (localUnitOfMeasureTotalIrr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureTotalIrr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureTotalIrr));
                }

                xmlWriter.writeEndElement();
            }

            if (localWeatherCommentsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "WeatherComments", xmlWriter);

                if (localWeatherComments == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "WeatherComments cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localWeatherComments);
                }

                xmlWriter.writeEndElement();
            }

            if (localYearsOfProductUsageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "YearsOfProductUsage",
                    xmlWriter);

                if (localYearsOfProductUsage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "YearsOfProductUsage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localYearsOfProductUsage);
                }

                xmlWriter.writeEndElement();
            }

            if (localWellIdUseTracker) {
                namespace = "";
                writeStartElement(null, namespace, "WellIdUse", xmlWriter);

                if (localWellIdUse == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "WellIdUse cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localWellIdUse);
                }

                xmlWriter.writeEndElement();
            }

            if (localDepthToWaterTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DepthToWater", xmlWriter);

                if (localDepthToWater == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DepthToWater cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDepthToWater));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureDepthTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureDepth",
                    xmlWriter);

                if (localUnitOfMeasureDepth == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureDepth cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureDepth));
                }

                xmlWriter.writeEndElement();
            }

            if (localScreenedIntervalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ScreenedInterval", xmlWriter);

                if (localScreenedInterval == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ScreenedInterval cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localScreenedInterval));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureScreenedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureScreened",
                    xmlWriter);

                if (localUnitOfMeasureScreened == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureScreened cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureScreened));
                }

                xmlWriter.writeEndElement();
            }

            if (localPartOfALargerStudyEnvTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PartOfALargerStudyEnv",
                    xmlWriter);

                if (localPartOfALargerStudyEnv == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PartOfALargerStudyEnv cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPartOfALargerStudyEnv));
                }

                xmlWriter.writeEndElement();
            }

            if (localIrrigationTracker) {
                if (localIrrigation != null) {
                    for (int i = 0; i < localIrrigation.length; i++) {
                        if (localIrrigation[i] != null) {
                            localIrrigation[i].serialize(new javax.xml.namespace.QName(
                                    "", "Irrigation"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Irrigation cannot be null!!");
                }
            }

            if (localAnalyticalInformationTracker) {
                if (localAnalyticalInformation != null) {
                    for (int i = 0; i < localAnalyticalInformation.length;
                            i++) {
                        if (localAnalyticalInformation[i] != null) {
                            localAnalyticalInformation[i].serialize(new javax.xml.namespace.QName(
                                    "", "AnalyticalInformation"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AnalyticalInformation cannot be null!!");
                }
            }

            if (localSampleCollectingStoringTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SampleCollectingStoring",
                    xmlWriter);

                if (localSampleCollectingStoring == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SampleCollectingStoring cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSampleCollectingStoring);
                }

                xmlWriter.writeEndElement();
            }

            if (localSampleCollectingAttachmentsTracker) {
                if (localSampleCollectingAttachments == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "SampleCollectingAttachments cannot be null!!");
                }

                localSampleCollectingAttachments.serialize(new javax.xml.namespace.QName(
                        "", "SampleCollectingAttachments"), xmlWriter);
            }

            if (localLabTestsPerformedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LabTestsPerformed",
                    xmlWriter);

                if (localLabTestsPerformed == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LabTestsPerformed cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLabTestsPerformed));
                }

                xmlWriter.writeEndElement();
            }

            if (localLabResultsTracker) {
                if (localLabResults == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "LabResults cannot be null!!");
                }

                localLabResults.serialize(new javax.xml.namespace.QName("",
                        "LabResults"), xmlWriter);
            }

            if (localPollenAnalysisDoneTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PollenAnalysisDone",
                    xmlWriter);

                if (localPollenAnalysisDone == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PollenAnalysisDone cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPollenAnalysisDone));
                }

                xmlWriter.writeEndElement();
            }

            if (localPollenAnalysisResultTracker) {
                if (localPollenAnalysisResult == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "PollenAnalysisResult cannot be null!!");
                }

                localPollenAnalysisResult.serialize(new javax.xml.namespace.QName(
                        "", "PollenAnalysisResult"), xmlWriter);
            }

            if (localCommentOnAnalyticsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentOnAnalytics",
                    xmlWriter);

                if (localCommentOnAnalytics == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentOnAnalytics cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentOnAnalytics);
                }

                xmlWriter.writeEndElement();
            }

            if (localAreaAmountAffectedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AreaAmountAffected",
                    xmlWriter);

                if (localAreaAmountAffected == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AreaAmountAffected cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAreaAmountAffected));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureAffectedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureAffected",
                    xmlWriter);

                if (localUnitOfMeasureAffected == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureAffected cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureAffected));
                }

                xmlWriter.writeEndElement();
            }

            if (localAreaAmountTreatedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AreaAmountTreated",
                    xmlWriter);

                if (localAreaAmountTreated == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AreaAmountTreated cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAreaAmountTreated));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureTreatedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureTreated",
                    xmlWriter);

                if (localUnitOfMeasureTreated == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureTreated cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureTreated));
                }

                xmlWriter.writeEndElement();
            }

            if (localPotentialYieldReductionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PotentialYieldReduction",
                    xmlWriter);

                if (localPotentialYieldReduction == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PotentialYieldReduction cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPotentialYieldReduction);
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalPotentialFinancialRiskTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "TotalPotentialFinancialRisk", xmlWriter);

                if (localTotalPotentialFinancialRisk == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TotalPotentialFinancialRisk cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalPotentialFinancialRisk));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyPotentialCostsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CurrencyPotentialCosts",
                    xmlWriter);

                if (localCurrencyPotentialCosts == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CurrencyPotentialCosts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCurrencyPotentialCosts));
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalPotentialFinancialRiskEURTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "TotalPotentialFinancialRiskEUR", xmlWriter);

                if (localTotalPotentialFinancialRiskEUR == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TotalPotentialFinancialRiskEUR cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalPotentialFinancialRiskEUR));
                }

                xmlWriter.writeEndElement();
            }

            if (localPotentialFinancialRiskTracker) {
                if (localPotentialFinancialRisk != null) {
                    for (int i = 0; i < localPotentialFinancialRisk.length;
                            i++) {
                        if (localPotentialFinancialRisk[i] != null) {
                            localPotentialFinancialRisk[i].serialize(new javax.xml.namespace.QName(
                                    "", "PotentialFinancialRisk"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "PotentialFinancialRisk cannot be null!!");
                }
            }

            if (localCommentsOnFinancialRiskTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentsOnFinancialRisk",
                    xmlWriter);

                if (localCommentsOnFinancialRisk == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentsOnFinancialRisk cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentsOnFinancialRisk);
                }

                xmlWriter.writeEndElement();
            }

            if (localSummaryOfInvestigationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SummaryOfInvestigation",
                    xmlWriter);

                if (localSummaryOfInvestigation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SummaryOfInvestigation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSummaryOfInvestigation);
                }

                xmlWriter.writeEndElement();
            }

            if (localSeverityCAIRnewTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SeverityCAIRnew", xmlWriter);

                if (localSeverityCAIRnew == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SeverityCAIRnew cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSeverityCAIRnew));
                }

                xmlWriter.writeEndElement();
            }

            if (localAttributionToBCSProductTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AttributionToBCSProduct",
                    xmlWriter);

                if (localAttributionToBCSProduct == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AttributionToBCSProduct cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAttributionToBCSProduct));
                }

                xmlWriter.writeEndElement();
            }

            if (localComplaintJustifiedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ComplaintJustified",
                    xmlWriter);

                if (localComplaintJustified == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ComplaintJustified cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localComplaintJustified));
                }

                xmlWriter.writeEndElement();
            }

            if (localSettlementRequiredTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SettlementRequired",
                    xmlWriter);

                if (localSettlementRequired == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SettlementRequired cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSettlementRequired));
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerExpectationsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CustomerExpectations",
                    xmlWriter);

                if (localCustomerExpectations == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CustomerExpectations cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCustomerExpectations);
                }

                xmlWriter.writeEndElement();
            }

            if (localSettlementProposalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SettlementProposal",
                    xmlWriter);

                if (localSettlementProposal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SettlementProposal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSettlementProposal);
                }

                xmlWriter.writeEndElement();
            }

            if (localSettlementAcceptedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SettlementAccepted",
                    xmlWriter);

                if (localSettlementAccepted == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SettlementAccepted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSettlementAccepted));
                }

                xmlWriter.writeEndElement();
            }

            if (localSourceOfRecommendationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SourceOfRecommendation",
                    xmlWriter);

                if (localSourceOfRecommendation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SourceOfRecommendation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSourceOfRecommendation);
                }

                xmlWriter.writeEndElement();
            }

            if (localRecommendationSheetTracker) {
                if (localRecommendationSheet == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "RecommendationSheet cannot be null!!");
                }

                localRecommendationSheet.serialize(new javax.xml.namespace.QName(
                        "", "RecommendationSheet"), xmlWriter);
            }

            if (localApprovedPaymentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ApprovedPayment", xmlWriter);

                if (localApprovedPayment == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ApprovedPayment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localApprovedPayment));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyTypePaymentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CurrencyTypePayment",
                    xmlWriter);

                if (localCurrencyTypePayment == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CurrencyTypePayment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCurrencyTypePayment));
                }

                xmlWriter.writeEndElement();
            }

            if (localApprovalDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ApprovalDate", xmlWriter);

                if (localApprovalDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ApprovalDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localApprovalDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localSettlementAttachmentsTracker) {
                if (localSettlementAttachments == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "SettlementAttachments cannot be null!!");
                }

                localSettlementAttachments.serialize(new javax.xml.namespace.QName(
                        "", "SettlementAttachments"), xmlWriter);
            }

            if (localCorrectiveActionsCommentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CorrectiveActionsComment",
                    xmlWriter);

                if (localCorrectiveActionsComment == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CorrectiveActionsComment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCorrectiveActionsComment));
                }

                xmlWriter.writeEndElement();
            }

            if (localCorrectiveActionsAttachmentsTracker) {
                if (localCorrectiveActionsAttachments == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "CorrectiveActionsAttachments cannot be null!!");
                }

                localCorrectiveActionsAttachments.serialize(new javax.xml.namespace.QName(
                        "", "CorrectiveActionsAttachments"), xmlWriter);
            }

            if (localReworkDestructionCommentsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ReworkDestructionComments",
                    xmlWriter);

                if (localReworkDestructionComments == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ReworkDestructionComments cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localReworkDestructionComments);
                }

                xmlWriter.writeEndElement();
            }

            if (localIncidentLocationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IncidentLocation", xmlWriter);

                if (localIncidentLocation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IncidentLocation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIncidentLocation);
                }

                xmlWriter.writeEndElement();
            }

            if (localOriginOfCaseTracker) {
                namespace = "";
                writeStartElement(null, namespace, "OriginOfCase", xmlWriter);

                if (localOriginOfCase == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OriginOfCase cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOriginOfCase));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeficiencyTracker) {
                if (localDeficiency != null) {
                    for (int i = 0; i < localDeficiency.length; i++) {
                        if (localDeficiency[i] != null) {
                            localDeficiency[i].serialize(new javax.xml.namespace.QName(
                                    "", "Deficiency"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Deficiency cannot be null!!");
                }
            }

            if (localTotalActualCostsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TotalActualCosts", xmlWriter);

                if (localTotalActualCosts == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TotalActualCosts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalActualCosts));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyActualCostsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CurrencyActualCosts",
                    xmlWriter);

                if (localCurrencyActualCosts == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CurrencyActualCosts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCurrencyActualCosts));
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalActualCostsEURTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TotalActualCostsEUR",
                    xmlWriter);

                if (localTotalActualCostsEUR == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TotalActualCostsEUR cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalActualCostsEUR));
                }

                xmlWriter.writeEndElement();
            }

            if (localActualCostsTracker) {
                if (localActualCosts != null) {
                    for (int i = 0; i < localActualCosts.length; i++) {
                        if (localActualCosts[i] != null) {
                            localActualCosts[i].serialize(new javax.xml.namespace.QName(
                                    "", "ActualCosts"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ActualCosts cannot be null!!");
                }
            }

            if (localCommentsOnActualCostsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentsOnActualCosts",
                    xmlWriter);

                if (localCommentsOnActualCosts == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentsOnActualCosts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentsOnActualCosts);
                }

                xmlWriter.writeEndElement();
            }

            if (localSummaryOfActionsTakenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SummaryOfActionsTaken",
                    xmlWriter);

                if (localSummaryOfActionsTaken == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SummaryOfActionsTaken cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSummaryOfActionsTaken);
                }

                xmlWriter.writeEndElement();
            }

            if (localAuthorityReportingTracker) {
                if (localAuthorityReporting != null) {
                    for (int i = 0; i < localAuthorityReporting.length; i++) {
                        if (localAuthorityReporting[i] != null) {
                            localAuthorityReporting[i].serialize(new javax.xml.namespace.QName(
                                    "", "AuthorityReporting"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AuthorityReporting cannot be null!!");
                }
            }

            if (localAllegePhytotoxNonTargetTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AllegePhytotoxNonTarget",
                    xmlWriter);

                if (localAllegePhytotoxNonTarget == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AllegePhytotoxNonTarget cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAllegePhytotoxNonTarget);
                }

                xmlWriter.writeEndElement();
            }

            if (localAffectedNonTargetTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AffectedNonTarget",
                    xmlWriter);

                if (localAffectedNonTarget == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AffectedNonTarget cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAffectedNonTarget);
                }

                xmlWriter.writeEndElement();
            }

            if (localPresentApplicNonTargetTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PresentApplicNonTarget",
                    xmlWriter);

                if (localPresentApplicNonTarget == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PresentApplicNonTarget cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPresentApplicNonTarget);
                }

                xmlWriter.writeEndElement();
            }

            if (localExplicitLabelWarningNonTTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ExplicitLabelWarningNonT",
                    xmlWriter);

                if (localExplicitLabelWarningNonT == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExplicitLabelWarningNonT cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localExplicitLabelWarningNonT);
                }

                xmlWriter.writeEndElement();
            }

            if (localAllegePhytotoxTargetCropTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AllegePhytotoxTargetCrop",
                    xmlWriter);

                if (localAllegePhytotoxTargetCrop == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AllegePhytotoxTargetCrop cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAllegePhytotoxTargetCrop);
                }

                xmlWriter.writeEndElement();
            }

            if (localPhytotoxLethalTargetCropTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PhytotoxLethalTargetCrop",
                    xmlWriter);

                if (localPhytotoxLethalTargetCrop == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PhytotoxLethalTargetCrop cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPhytotoxLethalTargetCrop);
                }

                xmlWriter.writeEndElement();
            }

            if (localPhytotoxNLWarnTargetCrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PhytotoxNLWarnTargetCr",
                    xmlWriter);

                if (localPhytotoxNLWarnTargetCr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PhytotoxNLWarnTargetCr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPhytotoxNLWarnTargetCr);
                }

                xmlWriter.writeEndElement();
            }

            if (localAllegeDriftTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AllegeDrift", xmlWriter);

                if (localAllegeDrift == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AllegeDrift cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAllegeDrift);
                }

                xmlWriter.writeEndElement();
            }

            if (localConsistantAnticipatedDriftTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "ConsistantAnticipatedDrift", xmlWriter);

                if (localConsistantAnticipatedDrift == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ConsistantAnticipatedDrift cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localConsistantAnticipatedDrift);
                }

                xmlWriter.writeEndElement();
            }

            if (localAcresAffectedDriftTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AcresAffectedDrift",
                    xmlWriter);

                if (localAcresAffectedDrift == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AcresAffectedDrift cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAcresAffectedDrift));
                }

                xmlWriter.writeEndElement();
            }

            if (localWhatAffectedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "WhatAffected", xmlWriter);

                if (localWhatAffected == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "WhatAffected cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localWhatAffected);
                }

                xmlWriter.writeEndElement();
            }

            if (localDistanceAffectedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DistanceAffected", xmlWriter);

                if (localDistanceAffected == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DistanceAffected cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDistanceAffected);
                }

                xmlWriter.writeEndElement();
            }

            if (localPlantSpeciesAffectedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PlantSpeciesAffected",
                    xmlWriter);

                if (localPlantSpeciesAffected == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PlantSpeciesAffected cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPlantSpeciesAffected);
                }

                xmlWriter.writeEndElement();
            }

            if (localToxicEffectPestTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ToxicEffectPest", xmlWriter);

                if (localToxicEffectPest == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ToxicEffectPest cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localToxicEffectPest);
                }

                xmlWriter.writeEndElement();
            }

            if (localSecondaryPestTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SecondaryPest", xmlWriter);

                if (localSecondaryPest == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SecondaryPest cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSecondaryPest);
                }

                xmlWriter.writeEndElement();
            }

            if (localExposedConcentrateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ExposedConcentrate",
                    xmlWriter);

                if (localExposedConcentrate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExposedConcentrate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localExposedConcentrate);
                }

                xmlWriter.writeEndElement();
            }

            if (localSampleAnalyzedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SampleAnalyzed", xmlWriter);

                if (localSampleAnalyzed == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SampleAnalyzed cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSampleAnalyzed);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreationDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CreationDate", xmlWriter);

                if (localCreationDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CreationDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreationDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localCloseByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CloseBy", xmlWriter);

                if (localCloseBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CloseBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCloseBy));
                }

                xmlWriter.writeEndElement();
            }

            if (localCloseOnTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CloseOn", xmlWriter);

                if (localCloseOn == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CloseOn cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCloseOn));
                }

                xmlWriter.writeEndElement();
            }

            if (localCancelByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CancelBy", xmlWriter);

                if (localCancelBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CancelBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCancelBy));
                }

                xmlWriter.writeEndElement();
            }

            if (localCancelOnTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CancelOn", xmlWriter);

                if (localCancelOn == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CancelOn cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCancelOn));
                }

                xmlWriter.writeEndElement();
            }

            if (localStakeholdersTracker) {
                if (localStakeholders != null) {
                    namespace = "";

                    for (int i = 0; i < localStakeholders.length; i++) {
                        if (localStakeholders[i] != null) {
                            writeStartElement(null, namespace, "Stakeholders",
                                xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localStakeholders[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Stakeholders cannot be null!!");
                }
            }

            if (localReporterTracker) {
                if (localReporter == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Reporter cannot be null!!");
                }

                localReporter.serialize(new javax.xml.namespace.QName("",
                        "Reporter"), xmlWriter);
            }

            if (localGrowerCustomerComplainantTracker) {
                if (localGrowerCustomerComplainant == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "GrowerCustomerComplainant cannot be null!!");
                }

                localGrowerCustomerComplainant.serialize(new javax.xml.namespace.QName(
                        "", "GrowerCustomerComplainant"), xmlWriter);
            }

            if (localDistributorRetailerAgronomistTracker) {
                if (localDistributorRetailerAgronomist == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "DistributorRetailerAgronomist cannot be null!!");
                }

                localDistributorRetailerAgronomist.serialize(new javax.xml.namespace.QName(
                        "", "DistributorRetailerAgronomist"), xmlWriter);
            }

            if (localRegistrantTracker) {
                if (localRegistrant == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Registrant cannot be null!!");
                }

                localRegistrant.serialize(new javax.xml.namespace.QName("",
                        "Registrant"), xmlWriter);
            }

            if (localRegistrantContactTracker) {
                if (localRegistrantContact == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "RegistrantContact cannot be null!!");
                }

                localRegistrantContact.serialize(new javax.xml.namespace.QName(
                        "", "RegistrantContact"), xmlWriter);
            }

            if (localOriginatorTracker) {
                if (localOriginator == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Originator cannot be null!!");
                }

                localOriginator.serialize(new javax.xml.namespace.QName("",
                        "Originator"), xmlWriter);
            }

            if (localAdditionalPerson1Tracker) {
                if (localAdditionalPerson1 == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AdditionalPerson1 cannot be null!!");
                }

                localAdditionalPerson1.serialize(new javax.xml.namespace.QName(
                        "", "AdditionalPerson1"), xmlWriter);
            }

            if (localAdditionalPerson2Tracker) {
                if (localAdditionalPerson2 == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AdditionalPerson2 cannot be null!!");
                }

                localAdditionalPerson2.serialize(new javax.xml.namespace.QName(
                        "", "AdditionalPerson2"), xmlWriter);
            }

            if (localAdditionalPerson3Tracker) {
                if (localAdditionalPerson3 == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AdditionalPerson3 cannot be null!!");
                }

                localAdditionalPerson3.serialize(new javax.xml.namespace.QName(
                        "", "AdditionalPerson3"), xmlWriter);
            }

            if (localAdditionalPerson4Tracker) {
                if (localAdditionalPerson4 == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AdditionalPerson4 cannot be null!!");
                }

                localAdditionalPerson4.serialize(new javax.xml.namespace.QName(
                        "", "AdditionalPerson4"), xmlWriter);
            }

            if (localAdditionalPerson5Tracker) {
                if (localAdditionalPerson5 == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AdditionalPerson5 cannot be null!!");
                }

                localAdditionalPerson5.serialize(new javax.xml.namespace.QName(
                        "", "AdditionalPerson5"), xmlWriter);
            }

            if (localExternalInvestigationCommentTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "ExternalInvestigationComment", xmlWriter);

                if (localExternalInvestigationComment == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExternalInvestigationComment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localExternalInvestigationComment);
                }

                xmlWriter.writeEndElement();
            }

            if (localPackSize2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "PackSize2", xmlWriter);

                if (localPackSize2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PackSize2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPackSize2);
                }

                xmlWriter.writeEndElement();
            }

            if (localPackSizeUnit2Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "PackSizeUnit2", xmlWriter);

                if (localPackSizeUnit2 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PackSizeUnit2 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPackSizeUnit2));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_01Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_01", xmlWriter);

                if (localUDF_01 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_01 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_01));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_02Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_02", xmlWriter);

                if (localUDF_02 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_02 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_02));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_03Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_03", xmlWriter);

                if (localUDF_03 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_03 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_03));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_04Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_04", xmlWriter);

                if (localUDF_04 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_04 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_04));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_05Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_05", xmlWriter);

                if (localUDF_05 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_05 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_05));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_06Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_06", xmlWriter);

                if (localUDF_06 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_06 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_06));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_07Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_07", xmlWriter);

                if (localUDF_07 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_07 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_07));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_08Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_08", xmlWriter);

                if (localUDF_08 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_08 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_08));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_09Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_09", xmlWriter);

                if (localUDF_09 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_09 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_09));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_10Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_10", xmlWriter);

                if (localUDF_10 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_10 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_10));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_11Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_11", xmlWriter);

                if (localUDF_11 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_11 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_11));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_12Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_12", xmlWriter);

                if (localUDF_12 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_12 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_12));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_13Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_13", xmlWriter);

                if (localUDF_13 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_13 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_13));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_14Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_14", xmlWriter);

                if (localUDF_14 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_14 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_14));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_15Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_15", xmlWriter);

                if (localUDF_15 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_15 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_15));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_16Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_16", xmlWriter);

                if (localUDF_16 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_16 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_16));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_17Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_17", xmlWriter);

                if (localUDF_17 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_17 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_17));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_18Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_18", xmlWriter);

                if (localUDF_18 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_18 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_18));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_19Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_19", xmlWriter);

                if (localUDF_19 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_19 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_19));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_20Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_20", xmlWriter);

                if (localUDF_20 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_20 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_20));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_21Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_21", xmlWriter);

                if (localUDF_21 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_21 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_21));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_22Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_22", xmlWriter);

                if (localUDF_22 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_22 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_22));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_23Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_23", xmlWriter);

                if (localUDF_23 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_23 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_23));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_24Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_24", xmlWriter);

                if (localUDF_24 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_24 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_24));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_25Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_25", xmlWriter);

                if (localUDF_25 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_25 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_25));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_26Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_26", xmlWriter);

                if (localUDF_26 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_26 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_26));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_27Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_27", xmlWriter);

                if (localUDF_27 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_27 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_27));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_28Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_28", xmlWriter);

                if (localUDF_28 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_28 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_28));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_29Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_29", xmlWriter);

                if (localUDF_29 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_29 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_29));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_30Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_30", xmlWriter);

                if (localUDF_30 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_30 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_30));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_31Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_31", xmlWriter);

                if (localUDF_31 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_31 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_31));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_32Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_32", xmlWriter);

                if (localUDF_32 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_32 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_32));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_33Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_33", xmlWriter);

                if (localUDF_33 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_33 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_33));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_34Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_34", xmlWriter);

                if (localUDF_34 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_34 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_34));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_35Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_35", xmlWriter);

                if (localUDF_35 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_35 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_35));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_36Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_36", xmlWriter);

                if (localUDF_36 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_36 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_36));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_37Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_37", xmlWriter);

                if (localUDF_37 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_37 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_37));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_38Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_38", xmlWriter);

                if (localUDF_38 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_38 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_38));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_39Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_39", xmlWriter);

                if (localUDF_39 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_39 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_39));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_40Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_40", xmlWriter);

                if (localUDF_40 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_40 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_40));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_41Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_41", xmlWriter);

                if (localUDF_41 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_41 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_41));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_42Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_42", xmlWriter);

                if (localUDF_42 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_42 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_42));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_43Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_43", xmlWriter);

                if (localUDF_43 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_43 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_43));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_44Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_44", xmlWriter);

                if (localUDF_44 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_44 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_44));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_45Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_45", xmlWriter);

                if (localUDF_45 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_45 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_45));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_46Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_46", xmlWriter);

                if (localUDF_46 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_46 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_46));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_47Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_47", xmlWriter);

                if (localUDF_47 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_47 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_47));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_48Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_48", xmlWriter);

                if (localUDF_48 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_48 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_48));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_49Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_49", xmlWriter);

                if (localUDF_49 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_49 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_49));
                }

                xmlWriter.writeEndElement();
            }

            if (localUDF_50Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "UDF_50", xmlWriter);

                if (localUDF_50 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UDF_50 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUDF_50));
                }

                xmlWriter.writeEndElement();
            }
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ImportCaseTypeSequence parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ImportCaseTypeSequence object = new ImportCaseTypeSequence();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    java.util.ArrayList list31 = new java.util.ArrayList();

                    java.util.ArrayList list32 = new java.util.ArrayList();

                    java.util.ArrayList list77 = new java.util.ArrayList();

                    java.util.ArrayList list93 = new java.util.ArrayList();

                    java.util.ArrayList list94 = new java.util.ArrayList();

                    java.util.ArrayList list95 = new java.util.ArrayList();

                    java.util.ArrayList list96 = new java.util.ArrayList();

                    java.util.ArrayList list105 = new java.util.ArrayList();

                    java.util.ArrayList list106 = new java.util.ArrayList();

                    java.util.ArrayList list111 = new java.util.ArrayList();

                    java.util.ArrayList list128 = new java.util.ArrayList();

                    java.util.ArrayList list143 = new java.util.ArrayList();

                    java.util.ArrayList list146 = new java.util.ArrayList();

                    java.util.ArrayList list173 = new java.util.ArrayList();

                    java.util.ArrayList list174 = new java.util.ArrayList();

                    java.util.ArrayList list200 = new java.util.ArrayList();

                    java.util.ArrayList list201 = new java.util.ArrayList();

                    java.util.ArrayList list204 = new java.util.ArrayList();

                    java.util.ArrayList list234 = new java.util.ArrayList();

                    java.util.ArrayList list235 = new java.util.ArrayList();

                    java.util.ArrayList list251 = new java.util.ArrayList();

                    java.util.ArrayList list272 = new java.util.ArrayList();

                    java.util.ArrayList list276 = new java.util.ArrayList();

                    java.util.ArrayList list279 = new java.util.ArrayList();

                    java.util.ArrayList list302 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CaseStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CaseStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCaseStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "IDCAIRnew").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IDCAIRnew" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIDCAIRnew(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "AssignedTo").equals(
                                reader.getName())) {
                        object.setAssignedTo(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PersonToContact").equals(
                                reader.getName())) {
                        object.setPersonToContact(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Title").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Title" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "LeadProblem").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "LeadProblem" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLeadProblem(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AdditionalProblem").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AdditionalProblem" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAdditionalProblem(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TypeCAIRnew").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TypeCAIRnew" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTypeCAIRnew(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SubtypeCAIRnew").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SubtypeCAIRnew" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSubtypeCAIRnew(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CountryCaseHappened").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CountryCaseHappened" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCountryCaseHappened(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "LeadProduct").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "LeadProduct" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLeadProduct(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "OriginalProduct").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "OriginalProduct" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOriginalProduct(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CountryLeadProduct").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CountryLeadProduct" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCountryLeadProduct(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BatchLotNumber").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BatchLotNumber" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBatchLotNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UFI").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UFI" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUFI(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PackSize").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PackSize" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPackSize(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PackSizeUnit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PackSizeUnit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPackSizeUnit(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DetailedDescription").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DetailedDescription" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDetailedDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SeedProblemSubType").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SeedProblemSubType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeedProblemSubType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "OtherExternalId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "OtherExternalId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOtherExternalId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DistributorRetailer").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DistributorRetailer" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDistributorRetailer(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "TreatedCropSystem").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TreatedCropSystem" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTreatedCropSystem(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "NonTargetImpacts").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "NonTargetImpacts" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNonTargetImpacts(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SeverityEstimation").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SeverityEstimation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeverityEstimation(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Attachments").equals(
                                reader.getName())) {
                        object.setAttachments(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DateOfOccurrence").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DateOfOccurrence" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDateOfOccurrence(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DateOfRecommendation").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DateOfRecommendation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDateOfRecommendation(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ReporterName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ReporterName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setReporterName(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DateFirstReportedToBayer").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DateFirstReportedToBayer" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDateFirstReportedToBayer(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CommunicationComments").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommunicationComments" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommunicationComments(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TeamMembers").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list31.add(CaseAddressListType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone31 = false;

                        while (!loopDone31) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone31 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "TeamMembers").equals(
                                            reader.getName())) {
                                    list31.add(CaseAddressListType.Factory.parse(
                                            reader));
                                } else {
                                    loopDone31 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setTeamMembers((CaseAddressListType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                CaseAddressListType.class, list31));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CAIRNewCountryManager").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list32.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone32 = false;

                        while (!loopDone32) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone32 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "CAIRNewCountryManager").equals(
                                            reader.getName())) {
                                    list32.add(reader.getElementText());
                                } else {
                                    loopDone32 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setCAIRNewCountryManager((org.apache.axis2.databinding.types.Token[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                org.apache.axis2.databinding.types.Token.class,
                                list32));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProblemTypeFromCRMPCC").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProblemTypeFromCRMPCC" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProblemTypeFromCRMPCC(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "OtherIdentifiedNumbers").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "OtherIdentifiedNumbers" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOtherIdentifiedNumbers(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ExternalSourceSystem").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ExternalSourceSystem" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setExternalSourceSystem(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "RelatedIssues").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "RelatedIssues" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRelatedIssues(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "RepetitiveCases").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "RepetitiveCases" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRepetitiveCases(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CropFamily").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CropFamily" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCropFamily(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CropVariety").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CropVariety" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCropVariety(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TypeOfPremises").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TypeOfPremises" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTypeOfPremises(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TypeOfDamage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TypeOfDamage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTypeOfDamage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DamageExceeding5000").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DamageExceeding5000" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDamageExceeding5000(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CouldDamageHaveCausedInj").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CouldDamageHaveCausedInj" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCouldDamageHaveCausedInj(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "LabelDirectionsFollowed").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "LabelDirectionsFollowed" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLabelDirectionsFollowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "IntentionalMisuse").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IntentionalMisuse" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIntentionalMisuse(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ModeOfExposure").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ModeOfExposure" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setModeOfExposure(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "TaskCausingTheIncident").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TaskCausingTheIncident" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTaskCausingTheIncident(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ExposureSite").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ExposureSite" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setExposureSite(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "IntendedUseSite").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IntendedUseSite" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIntendedUseSite(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "GPSCoordinates").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "GPSCoordinates" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGPSCoordinates(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ReporterContacted").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ReporterContacted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setReporterContacted(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ContactDateReporter").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ContactDateReporter" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContactDateReporter(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SupplierContacted").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SupplierContacted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSupplierContacted(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ContactDateSupplier").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ContactDateSupplier" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContactDateSupplier(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SupplierAddress").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SupplierAddress" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSupplierAddress(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "InspectedConditionOfCrop").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "InspectedConditionOfCrop" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInspectedConditionOfCrop(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MagnitudeOfEffect").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MagnitudeOfEffect" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMagnitudeOfEffect(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CommentsOnEffectsEfficacy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentsOnEffectsEfficacy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentsOnEffectsEfficacy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ResistanceSuspected").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ResistanceSuspected" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setResistanceSuspected(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ResistanceDescription").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ResistanceDescription" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setResistanceDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "IncompatibilitySuspected").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IncompatibilitySuspected" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIncompatibilitySuspected(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "IncompatibilityDescription").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IncompatibilityDescription" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIncompatibilityDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DescriptionOfIncidentSite").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DescriptionOfIncidentSite" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDescriptionOfIncidentSite(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DistanceTreatedIncidentSite").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "DistanceTreatedIncidentSite" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDistanceTreatedIncidentSite(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureWildLife").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureWildLife" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureWildLife(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SymptomsOfWildLifeAnimal").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SymptomsOfWildLifeAnimal" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSymptomsOfWildLifeAnimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MagnitudeOfEffectWl").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MagnitudeOfEffectWl" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMagnitudeOfEffectWl(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DescriptionOfHabitat").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DescriptionOfHabitat" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDescriptionOfHabitat(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "LocationOfDeadBeesFound").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "LocationOfDeadBeesFound" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLocationOfDeadBeesFound(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "TotalNoOfColoniesInApiary").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TotalNoOfColoniesInApiary" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalNoOfColoniesInApiary(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "NumberOfAffectedHives").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "NumberOfAffectedHives" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNumberOfAffectedHives(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "NumberOfDeadBeesFound").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "NumberOfDeadBeesFound" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNumberOfDeadBeesFound(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "HistoryOfBeeKillsInArea").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "HistoryOfBeeKillsInArea" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHistoryOfBeeKillsInArea(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "HistoryOfBeeKills").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "HistoryOfBeeKills" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHistoryOfBeeKills(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "HivesExaminedForDiseases").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "HivesExaminedForDiseases" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHivesExaminedForDiseases(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DiseasesFound").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DiseasesFound" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDiseasesFound(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DetailsOfInfectionInfest").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list77.add(DetailsOfInfectionInfest_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone77 = false;

                        while (!loopDone77) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone77 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "DetailsOfInfectionInfest").equals(
                                            reader.getName())) {
                                    list77.add(DetailsOfInfectionInfest_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone77 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setDetailsOfInfectionInfest((DetailsOfInfectionInfest_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                DetailsOfInfectionInfest_type0.class, list77));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CaseInvestigationContacts").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CaseInvestigationContacts" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCaseInvestigationContacts(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ExternalInvestigation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ExternalInvestigation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setExternalInvestigation(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ExternalAttachments").equals(reader.getName())) {
                        object.setExternalAttachments(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "InvestigationAttachments").equals(
                                reader.getName())) {
                        object.setInvestigationAttachments(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "FollowUpRequired").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FollowUpRequired" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFollowUpRequired(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SoilType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SoilType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSoilType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PercentOrganicMatterCarbon").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PercentOrganicMatterCarbon" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPercentOrganicMatterCarbon(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SoilMoistureWetness").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SoilMoistureWetness" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSoilMoistureWetness(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "FertilizerRegime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FertilizerRegime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFertilizerRegime(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "OpenerCoulter").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "OpenerCoulter" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOpenerCoulter(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "RainfallAfterTreatment").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "RainfallAfterTreatment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRainfallAfterTreatment(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "FurtherCommentsWeather").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FurtherCommentsWeather" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFurtherCommentsWeather(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SourceOfWeatherInformation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SourceOfWeatherInformation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSourceOfWeatherInformation(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "GeneralWeatherInformation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "GeneralWeatherInformation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGeneralWeatherInformation(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "WeatherAttachments").equals(reader.getName())) {
                        object.setWeatherAttachments(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AffectedPersonInformation").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list93.add(AffectedPersonInformation_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone93 = false;

                        while (!loopDone93) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone93 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "AffectedPersonInformation").equals(
                                            reader.getName())) {
                                    list93.add(AffectedPersonInformation_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone93 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setAffectedPersonInformation((AffectedPersonInformation_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                AffectedPersonInformation_type0.class, list93));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Exposures").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list94.add(Exposures_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone94 = false;

                        while (!loopDone94) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone94 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "Exposures").equals(
                                            reader.getName())) {
                                    list94.add(Exposures_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone94 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setExposures((Exposures_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Exposures_type0.class, list94));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ExposureDetailsList").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list95.add(ExposureDetailsList_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone95 = false;

                        while (!loopDone95) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone95 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "ExposureDetailsList").equals(
                                            reader.getName())) {
                                    list95.add(ExposureDetailsList_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone95 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setExposureDetailsList((ExposureDetailsList_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ExposureDetailsList_type0.class, list95));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DomesticAnimal").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list96.add(DomesticAnimal_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone96 = false;

                        while (!loopDone96) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone96 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "DomesticAnimal").equals(
                                            reader.getName())) {
                                    list96.add(DomesticAnimal_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone96 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setDomesticAnimal((DomesticAnimal_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                DomesticAnimal_type0.class, list96));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SymptomsOfDomesticAnimal").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SymptomsOfDomesticAnimal" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSymptomsOfDomesticAnimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "OutcomeOfSymptomDA").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "OutcomeOfSymptomDA" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOutcomeOfSymptomDA(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "TimeUntilOnsetOfSymptoms").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TimeUntilOnsetOfSymptoms" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTimeUntilOnsetOfSymptoms(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasOnsetSymp").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasOnsetSymp" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasOnsetSymp(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DurationOfSymptomDA").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DurationOfSymptomDA" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDurationOfSymptomDA(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitDurationSymptonDA").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitDurationSymptonDA" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitDurationSymptonDA(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MedicalTreatmentOfAnimal").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MedicalTreatmentOfAnimal" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMedicalTreatmentOfAnimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "HospitalizationOfAnimal").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "HospitalizationOfAnimal" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHospitalizationOfAnimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "WildLifeDetails").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list105.add(WildLifeDetails_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone105 = false;

                        while (!loopDone105) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone105 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "WildLifeDetails").equals(
                                            reader.getName())) {
                                    list105.add(WildLifeDetails_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone105 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setWildLifeDetails((WildLifeDetails_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                WildLifeDetails_type0.class, list105));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BusinessSegments").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list106.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone106 = false;

                        while (!loopDone106) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone106 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "BusinessSegments").equals(
                                            reader.getName())) {
                                    list106.add(reader.getElementText());
                                } else {
                                    loopDone106 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setBusinessSegments((org.apache.axis2.databinding.types.Token[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                org.apache.axis2.databinding.types.Token.class,
                                list106));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProductIndication").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProductIndication" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductIndication(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SpecifiedContent").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SpecifiedContent" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSpecifiedContent(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "FormulationType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FormulationType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFormulationType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PackSizeAndType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PackSizeAndType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPackSizeAndType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ActiveIngredients").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list111.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone111 = false;

                        while (!loopDone111) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone111 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "ActiveIngredients").equals(
                                            reader.getName())) {
                                    list111.add(reader.getElementText());
                                } else {
                                    loopDone111 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setActiveIngredients((org.apache.axis2.databinding.types.Token[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                org.apache.axis2.databinding.types.Token.class,
                                list111));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BayerProduct").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BayerProduct" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBayerProduct(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SearchstringLeadProd").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SearchstringLeadProd" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSearchstringLeadProd(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MaterialNumberPacked").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MaterialNumberPacked" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialNumberPacked(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MaterialNumberUnpacked").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MaterialNumberUnpacked" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialNumberUnpacked(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MaterialTextPacked").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MaterialTextPacked" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialTextPacked(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MaterialTextUnpacked").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MaterialTextUnpacked" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialTextUnpacked(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SpecificationNumber").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SpecificationNumber" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSpecificationNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProductRegistrationNumber").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProductRegistrationNumber" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductRegistrationNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProductSampleComments").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProductSampleComments" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductSampleComments(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProductSampleTaken").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProductSampleTaken" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductSampleTaken(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProductBrandName2").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProductBrandName2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductBrandName2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SpecifiedContent2").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SpecifiedContent2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSpecifiedContent2(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "FormulationType2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FormulationType2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFormulationType2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BatchLotNumber2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BatchLotNumber2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBatchLotNumber2(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UFI2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UFI2" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUFI2(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PackSizeAndType2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PackSizeAndType2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPackSizeAndType2(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ActiveIngredients2").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list128.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone128 = false;

                        while (!loopDone128) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone128 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "ActiveIngredients2").equals(
                                            reader.getName())) {
                                    list128.add(reader.getElementText());
                                } else {
                                    loopDone128 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setActiveIngredients2((org.apache.axis2.databinding.types.Token[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                org.apache.axis2.databinding.types.Token.class,
                                list128));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BayerProduct2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BayerProduct2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBayerProduct2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SearchstringAddProd").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SearchstringAddProd" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSearchstringAddProd(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MaterialNumberPacked2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MaterialNumberPacked2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialNumberPacked2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MaterialNumberUnpacked2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MaterialNumberUnpacked2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialNumberUnpacked2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MaterialTextPacked2").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MaterialTextPacked2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialTextPacked2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MaterialTextUnpacked2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MaterialTextUnpacked2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialTextUnpacked2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SpecificationNumber2").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SpecificationNumber2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSpecificationNumber2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProdRegistrationNumber2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProdRegistrationNumber2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProdRegistrationNumber2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProductSampleComments2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProductSampleComments2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductSampleComments2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProductSampleTaken2").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProductSampleTaken2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductSampleTaken2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "FurtherProducts").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FurtherProducts" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFurtherProducts(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AttachmentsForProducts").equals(
                                reader.getName())) {
                        object.setAttachmentsForProducts(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "FurtherCommentsOnProducts").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FurtherCommentsOnProducts" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFurtherCommentsOnProducts(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DepotName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DepotName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDepotName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Packaging").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list143.add(Packaging_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone143 = false;

                        while (!loopDone143) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone143 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "Packaging").equals(
                                            reader.getName())) {
                                    list143.add(Packaging_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone143 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setPackaging((Packaging_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Packaging_type0.class, list143));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CommentOnPackaging").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentOnPackaging" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentOnPackaging(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AttachementsForPackaging").equals(
                                reader.getName())) {
                        object.setAttachementsForPackaging(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "FormulationDetails").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list146.add(FormulationDetails_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone146 = false;

                        while (!loopDone146) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone146 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "FormulationDetails").equals(
                                            reader.getName())) {
                                    list146.add(FormulationDetails_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone146 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setFormulationDetails((FormulationDetails_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                FormulationDetails_type0.class, list146));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DeliveryNumber").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DeliveryNumber" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeliveryNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DeliveryItem").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DeliveryItem" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeliveryItem(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CustomerNameSoldTo").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CustomerNameSoldTo" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerNameSoldTo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CustomerNameShippedTo").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CustomerNameShippedTo" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerNameShippedTo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CustomerSAPcodeSoldTo").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CustomerSAPcodeSoldTo" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerSAPcodeSoldTo(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CustomerSAPCodeShippedTo").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CustomerSAPCodeShippedTo" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerSAPCodeShippedTo(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TotalQuantity").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TotalQuantity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalQuantity(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasurementQuantity").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasurementQuantity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasurementQuantity(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DamagedQuantity").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DamagedQuantity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDamagedQuantity(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MarketValueOfAffectedGoods").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MarketValueOfAffectedGoods" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMarketValueOfAffectedGoods(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CurrencyType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CurrencyType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCurrencyType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DeliveryNumber2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DeliveryNumber2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeliveryNumber2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DeliveryItem2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DeliveryItem2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeliveryItem2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CustomerNameSoldTo2").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CustomerNameSoldTo2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerNameSoldTo2(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CustomerNameShippedTo2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CustomerNameShippedTo2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerNameShippedTo2(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CustomerSAPCodeSoldTo2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CustomerSAPCodeSoldTo2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerSAPCodeSoldTo2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CustomerSAPCodeShippedTo2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CustomerSAPCodeShippedTo2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerSAPCodeShippedTo2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DistributorRetailer2").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DistributorRetailer2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDistributorRetailer2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DepotName2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DepotName2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDepotName2(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TotalQuantity2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TotalQuantity2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalQuantity2(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasurementQuantity2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasurementQuantity2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasurementQuantity2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DamagedQuantity2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DamagedQuantity2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDamagedQuantity2(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "MarketValueOfAffectedGoods2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "MarketValueOfAffectedGoods2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMarketValueOfAffectedGoods2(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CurrencyType2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CurrencyType2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCurrencyType2(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CommentsOnDelivery").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentsOnDelivery" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentsOnDelivery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AttachmentsForDelivery").equals(
                                reader.getName())) {
                        object.setAttachmentsForDelivery(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Applications").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list173.add(Applications_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone173 = false;

                        while (!loopDone173) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone173 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "Applications").equals(
                                            reader.getName())) {
                                    list173.add(Applications_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone173 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setApplications((Applications_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Applications_type0.class, list173));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PriorAppliedProducts").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list174.add(PriorAppliedProducts_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone174 = false;

                        while (!loopDone174) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone174 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "PriorAppliedProducts").equals(
                                            reader.getName())) {
                                    list174.add(PriorAppliedProducts_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone174 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setPriorAppliedProducts((PriorAppliedProducts_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                PriorAppliedProducts_type0.class, list174));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DateOfLastApplication").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DateOfLastApplication" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDateOfLastApplication(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CommentOnApplication").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentOnApplication" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentOnApplication(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UserALicensedApplicator").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UserALicensedApplicator" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUserALicensedApplicator(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ApplicationRecordAdded").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ApplicationRecordAdded" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setApplicationRecordAdded(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ApplicationRecord").equals(reader.getName())) {
                        object.setApplicationRecord(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BufferZone").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BufferZone" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBufferZone(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureBuffer").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureBuffer" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureBuffer(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "NonBCSPrdApplInVicinity").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "NonBCSPrdApplInVicinity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNonBCSPrdApplInVicinity(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SeedBrandVariety").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SeedBrandVariety" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeedBrandVariety(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SeedLot").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SeedLot" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeedLot(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SeedCompany").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SeedCompany" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeedCompany(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "FurtherInformationOnSeed").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FurtherInformationOnSeed" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFurtherInformationOnSeed(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ProcessorName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProcessorName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProcessorName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SeedTreatmentFacility").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SeedTreatmentFacility" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeedTreatmentFacility(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ProcessorLocation").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ProcessorLocation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProcessorLocation(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "LoadingTestResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "LoadingTestResult" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLoadingTestResult(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "GerminationTestResult").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "GerminationTestResult" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGerminationTestResult(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "VigorTestResult").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "VigorTestResult" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setVigorTestResult(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SowingDatePlanted").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SowingDatePlanted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSowingDatePlanted(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SeedRatePlants").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SeedRatePlants" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeedRatePlants(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureSeedPlants").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureSeedPlants" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureSeedPlants(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CommentOnSowing").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentOnSowing" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentOnSowing(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DescriptionOfMachineryUsed").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DescriptionOfMachineryUsed" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDescriptionOfMachineryUsed(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "NozzleType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "NozzleType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNozzleType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DropletSizeOfNozzles").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DropletSizeOfNozzles" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDropletSizeOfNozzles(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Symptoms").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list200.add(Symptoms_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone200 = false;

                        while (!loopDone200) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone200 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "Symptoms").equals(
                                            reader.getName())) {
                                    list200.add(Symptoms_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone200 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setSymptoms((Symptoms_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Symptoms_type0.class, list200));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "FirstAid").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list201.add(FirstAid_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone201 = false;

                        while (!loopDone201) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone201 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "FirstAid").equals(
                                            reader.getName())) {
                                    list201.add(FirstAid_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone201 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setFirstAid((FirstAid_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                FirstAid_type0.class, list201));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "LabTestsPerformedMD").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "LabTestsPerformedMD" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLabTestsPerformedMD(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "LabTestsAttachment").equals(reader.getName())) {
                        object.setLabTestsAttachment(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Circumstances").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list204.add(Circumstances_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone204 = false;

                        while (!loopDone204) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone204 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "Circumstances").equals(
                                            reader.getName())) {
                                    list204.add(Circumstances_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone204 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setCircumstances((Circumstances_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Circumstances_type0.class, list204));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "TimeBetwTreatmAndDetect").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TimeBetwTreatmAndDetect" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTimeBetwTreatmAndDetect(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureTime").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CommentsOnCircumstances").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentsOnCircumstances" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentsOnCircumstances(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "OrganizationCollectingSample").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "OrganizationCollectingSample" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOrganizationCollectingSample(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SamplingTimes").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SamplingTimes" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSamplingTimes(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "NumberOfSamples").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "NumberOfSamples" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNumberOfSamples(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "QuantityOfSamples").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "QuantityOfSamples" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setQuantityOfSamples(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureSamples").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureSamples" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureSamples(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ReasonForSampling").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ReasonForSampling" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setReasonForSampling(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PercentOfOrganicCarbon").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PercentOfOrganicCarbon" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPercentOfOrganicCarbon(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SoilSeriesTexture").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SoilSeriesTexture" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSoilSeriesTexture(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "HydraulicConductivity").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "HydraulicConductivity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHydraulicConductivity(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AquiferDescription").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AquiferDescription" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAquiferDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "HydraulicGroup").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "HydraulicGroup" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHydraulicGroup(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PhOfWater").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PhOfWater" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPhOfWater(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "MaxRainFall").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MaxRainFall" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaxRainFall(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureRainfall").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureRainfall" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureRainfall(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "AnnualTotalRain").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AnnualTotalRain" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAnnualTotalRain(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureTotalRain").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureTotalRain" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureTotalRain(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AnnualTotalIrrigation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AnnualTotalIrrigation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAnnualTotalIrrigation(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureTotalIrr").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureTotalIrr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureTotalIrr(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "WeatherComments").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "WeatherComments" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWeatherComments(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "YearsOfProductUsage").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "YearsOfProductUsage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setYearsOfProductUsage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "WellIdUse").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "WellIdUse" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWellIdUse(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DepthToWater").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DepthToWater" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDepthToWater(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureDepth").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureDepth" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureDepth(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ScreenedInterval").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ScreenedInterval" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setScreenedInterval(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureScreened").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureScreened" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureScreened(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PartOfALargerStudyEnv").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PartOfALargerStudyEnv" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPartOfALargerStudyEnv(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Irrigation").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list234.add(Irrigation_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone234 = false;

                        while (!loopDone234) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone234 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "Irrigation").equals(
                                            reader.getName())) {
                                    list234.add(Irrigation_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone234 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setIrrigation((Irrigation_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Irrigation_type0.class, list234));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AnalyticalInformation").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list235.add(AnalyticalInformation_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone235 = false;

                        while (!loopDone235) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone235 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "AnalyticalInformation").equals(
                                            reader.getName())) {
                                    list235.add(AnalyticalInformation_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone235 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setAnalyticalInformation((AnalyticalInformation_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                AnalyticalInformation_type0.class, list235));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SampleCollectingStoring").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SampleCollectingStoring" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSampleCollectingStoring(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SampleCollectingAttachments").equals(
                                reader.getName())) {
                        object.setSampleCollectingAttachments(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "LabTestsPerformed").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "LabTestsPerformed" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLabTestsPerformed(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "LabResults").equals(
                                reader.getName())) {
                        object.setLabResults(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PollenAnalysisDone").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PollenAnalysisDone" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPollenAnalysisDone(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PollenAnalysisResult").equals(reader.getName())) {
                        object.setPollenAnalysisResult(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CommentOnAnalytics").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentOnAnalytics" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentOnAnalytics(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AreaAmountAffected").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AreaAmountAffected" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAreaAmountAffected(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureAffected").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureAffected" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureAffected(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AreaAmountTreated").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AreaAmountTreated" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAreaAmountTreated(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "UnitOfMeasureTreated").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UnitOfMeasureTreated" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitOfMeasureTreated(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PotentialYieldReduction").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PotentialYieldReduction" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPotentialYieldReduction(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "TotalPotentialFinancialRisk").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "TotalPotentialFinancialRisk" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalPotentialFinancialRisk(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CurrencyPotentialCosts").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CurrencyPotentialCosts" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCurrencyPotentialCosts(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "TotalPotentialFinancialRiskEUR").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "TotalPotentialFinancialRiskEUR" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalPotentialFinancialRiskEUR(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PotentialFinancialRisk").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list251.add(PotentialFinancialRisk_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone251 = false;

                        while (!loopDone251) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone251 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "PotentialFinancialRisk").equals(
                                            reader.getName())) {
                                    list251.add(PotentialFinancialRisk_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone251 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setPotentialFinancialRisk((PotentialFinancialRisk_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                PotentialFinancialRisk_type0.class, list251));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CommentsOnFinancialRisk").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentsOnFinancialRisk" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentsOnFinancialRisk(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SummaryOfInvestigation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SummaryOfInvestigation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSummaryOfInvestigation(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SeverityCAIRnew").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SeverityCAIRnew" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeverityCAIRnew(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AttributionToBCSProduct").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AttributionToBCSProduct" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAttributionToBCSProduct(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ComplaintJustified").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ComplaintJustified" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setComplaintJustified(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SettlementRequired").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SettlementRequired" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSettlementRequired(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CustomerExpectations").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CustomerExpectations" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerExpectations(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SettlementProposal").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SettlementProposal" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSettlementProposal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SettlementAccepted").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SettlementAccepted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSettlementAccepted(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SourceOfRecommendation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SourceOfRecommendation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSourceOfRecommendation(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "RecommendationSheet").equals(reader.getName())) {
                        object.setRecommendationSheet(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ApprovedPayment").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ApprovedPayment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setApprovedPayment(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CurrencyTypePayment").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CurrencyTypePayment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCurrencyTypePayment(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ApprovalDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ApprovalDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setApprovalDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SettlementAttachments").equals(
                                reader.getName())) {
                        object.setSettlementAttachments(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CorrectiveActionsComment").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CorrectiveActionsComment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCorrectiveActionsComment(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CorrectiveActionsAttachments").equals(
                                reader.getName())) {
                        object.setCorrectiveActionsAttachments(AttachedDocumentsType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ReworkDestructionComments").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ReworkDestructionComments" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setReworkDestructionComments(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "IncidentLocation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IncidentLocation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIncidentLocation(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "OriginOfCase").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "OriginOfCase" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOriginOfCase(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Deficiency").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list272.add(Deficiency_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone272 = false;

                        while (!loopDone272) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone272 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "Deficiency").equals(
                                            reader.getName())) {
                                    list272.add(Deficiency_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone272 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setDeficiency((Deficiency_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Deficiency_type0.class, list272));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TotalActualCosts").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TotalActualCosts" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalActualCosts(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CurrencyActualCosts").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CurrencyActualCosts" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCurrencyActualCosts(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "TotalActualCostsEUR").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TotalActualCostsEUR" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalActualCostsEUR(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ActualCosts").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list276.add(ActualCosts_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone276 = false;

                        while (!loopDone276) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone276 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "ActualCosts").equals(
                                            reader.getName())) {
                                    list276.add(ActualCosts_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone276 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setActualCosts((ActualCosts_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ActualCosts_type0.class, list276));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "CommentsOnActualCosts").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentsOnActualCosts" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentsOnActualCosts(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SummaryOfActionsTaken").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SummaryOfActionsTaken" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSummaryOfActionsTaken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AuthorityReporting").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list279.add(AuthorityReporting_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone279 = false;

                        while (!loopDone279) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone279 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "AuthorityReporting").equals(
                                            reader.getName())) {
                                    list279.add(AuthorityReporting_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone279 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setAuthorityReporting((AuthorityReporting_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                AuthorityReporting_type0.class, list279));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AllegePhytotoxNonTarget").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AllegePhytotoxNonTarget" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAllegePhytotoxNonTarget(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AffectedNonTarget").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AffectedNonTarget" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAffectedNonTarget(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PresentApplicNonTarget").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PresentApplicNonTarget" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPresentApplicNonTarget(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ExplicitLabelWarningNonT").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ExplicitLabelWarningNonT" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setExplicitLabelWarningNonT(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AllegePhytotoxTargetCrop").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AllegePhytotoxTargetCrop" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAllegePhytotoxTargetCrop(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PhytotoxLethalTargetCrop").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PhytotoxLethalTargetCrop" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPhytotoxLethalTargetCrop(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PhytotoxNLWarnTargetCr").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PhytotoxNLWarnTargetCr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPhytotoxNLWarnTargetCr(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "AllegeDrift").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AllegeDrift" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAllegeDrift(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ConsistantAnticipatedDrift").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ConsistantAnticipatedDrift" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setConsistantAnticipatedDrift(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AcresAffectedDrift").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AcresAffectedDrift" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAcresAffectedDrift(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "WhatAffected").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "WhatAffected" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWhatAffected(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DistanceAffected").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "DistanceAffected" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDistanceAffected(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PlantSpeciesAffected").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PlantSpeciesAffected" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPlantSpeciesAffected(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ToxicEffectPest").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ToxicEffectPest" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setToxicEffectPest(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SecondaryPest").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SecondaryPest" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSecondaryPest(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ExposedConcentrate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ExposedConcentrate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setExposedConcentrate(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SampleAnalyzed").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SampleAnalyzed" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSampleAnalyzed(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CreationDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CreationDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreationDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CloseBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CloseBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCloseBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CloseOn").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CloseOn" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCloseOn(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CancelBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CancelBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCancelBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CancelOn").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CancelOn" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCancelOn(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Stakeholders").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list302.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone302 = false;

                        while (!loopDone302) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone302 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "Stakeholders").equals(
                                            reader.getName())) {
                                    list302.add(reader.getElementText());
                                } else {
                                    loopDone302 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setStakeholders((org.apache.axis2.databinding.types.Token[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                org.apache.axis2.databinding.types.Token.class,
                                list302));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Reporter").equals(
                                reader.getName())) {
                        object.setReporter(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "GrowerCustomerComplainant").equals(
                                reader.getName())) {
                        object.setGrowerCustomerComplainant(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DistributorRetailerAgronomist").equals(
                                reader.getName())) {
                        object.setDistributorRetailerAgronomist(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Registrant").equals(
                                reader.getName())) {
                        object.setRegistrant(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "RegistrantContact").equals(reader.getName())) {
                        object.setRegistrantContact(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Originator").equals(
                                reader.getName())) {
                        object.setOriginator(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AdditionalPerson1").equals(reader.getName())) {
                        object.setAdditionalPerson1(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AdditionalPerson2").equals(reader.getName())) {
                        object.setAdditionalPerson2(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AdditionalPerson3").equals(reader.getName())) {
                        object.setAdditionalPerson3(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AdditionalPerson4").equals(reader.getName())) {
                        object.setAdditionalPerson4(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AdditionalPerson5").equals(reader.getName())) {
                        object.setAdditionalPerson5(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ExternalInvestigationComment").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "ExternalInvestigationComment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setExternalInvestigationComment(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PackSize2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PackSize2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPackSize2(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PackSizeUnit2").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PackSizeUnit2" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPackSizeUnit2(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_01").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_01" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_01(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_02").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_02" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_02(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_03").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_03" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_03(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_04").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_04" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_04(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_05").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_05" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_05(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_06").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_06" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_06(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_07").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_07" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_07(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_08").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_08" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_08(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_09").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_09" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_09(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_10").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_10" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_10(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_11").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_11" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_11(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_12").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_12" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_12(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_13").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_13" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_13(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_14").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_14" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_14(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_15").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_15" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_15(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_16").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_16" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_16(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_17").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_17" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_17(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_18").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_18" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_18(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_19").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_19" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_19(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_20").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_20" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_20(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_21").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_21" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_21(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_22").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_22" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_22(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_23").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_23" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_23(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_24").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_24" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_24(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_25").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_25" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_25(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_26").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_26" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_26(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_27").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_27" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_27(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_28").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_28" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_28(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_29").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_29" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_29(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_30").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_30" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_30(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_31").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_31" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_31(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_32").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_32" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_32(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_33").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_33" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_33(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_34").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_34" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_34(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_35").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_35" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_35(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_36").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_36" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_36(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_37").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_37" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_37(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_38").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_38" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_38(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_39").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_39" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_39(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_40").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_40" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_40(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_41").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_41" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_41(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_42").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_42" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_42(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_43").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_43" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_43(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_44").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_44" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_44(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_45").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_45" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_45(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_46").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_46" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_46(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_47").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_47" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_47(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_48").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_48" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_48(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_49").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_49" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_49(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "UDF_50").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UDF_50" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUDF_50(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ImportIssueTypeSequence implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = importIssueTypeSequence
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for RecordType
         */
        protected org.apache.axis2.databinding.types.Token localRecordType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRecordTypeTracker = false;

        /**
         * field for IssueId
         */
        protected org.apache.axis2.databinding.types.Token localIssueId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIssueIdTracker = false;

        /**
         * field for AssignedTo
         */
        protected CaseAddressListType localAssignedTo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAssignedToTracker = false;

        /**
         * field for TeamMembers
         * This was an Array!
         */
        protected CaseAddressListType[] localTeamMembers;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTeamMembersTracker = false;

        /**
         * field for Title
         */
        protected java.lang.String localTitle;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTitleTracker = false;

        /**
         * field for IssueSeverityEstimation
         */
        protected org.apache.axis2.databinding.types.Token localIssueSeverityEstimation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIssueSeverityEstimationTracker = false;

        /**
         * field for IssueType
         */
        protected org.apache.axis2.databinding.types.Token localIssueType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIssueTypeTracker = false;

        /**
         * field for IssueSubType
         */
        protected org.apache.axis2.databinding.types.Token localIssueSubType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIssueSubTypeTracker = false;

        /**
         * field for IssueDetailedDecription
         */
        protected org.apache.axis2.databinding.types.Token localIssueDetailedDecription;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIssueDetailedDecriptionTracker = false;

        /**
         * field for RelatedCase
         */
        protected org.apache.axis2.databinding.types.Token localRelatedCase;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRelatedCaseTracker = false;

        /**
         * field for FilterSettingsWaterCockpit
         */
        protected org.apache.axis2.databinding.types.Token localFilterSettingsWaterCockpit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFilterSettingsWaterCockpitTracker = false;

        public boolean isRecordTypeSpecified() {
            return localRecordTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getRecordType() {
            return localRecordType;
        }

        /**
         * Auto generated setter method
         * @param param RecordType
         */
        public void setRecordType(
            org.apache.axis2.databinding.types.Token param) {
            localRecordTypeTracker = param != null;

            this.localRecordType = param;
        }

        public boolean isIssueIdSpecified() {
            return localIssueIdTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIssueId() {
            return localIssueId;
        }

        /**
         * Auto generated setter method
         * @param param IssueId
         */
        public void setIssueId(org.apache.axis2.databinding.types.Token param) {
            localIssueIdTracker = param != null;

            this.localIssueId = param;
        }

        public boolean isAssignedToSpecified() {
            return localAssignedToTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getAssignedTo() {
            return localAssignedTo;
        }

        /**
         * Auto generated setter method
         * @param param AssignedTo
         */
        public void setAssignedTo(CaseAddressListType param) {
            localAssignedToTracker = param != null;

            this.localAssignedTo = param;
        }

        public boolean isTeamMembersSpecified() {
            return localTeamMembersTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType[]
         */
        public CaseAddressListType[] getTeamMembers() {
            return localTeamMembers;
        }

        /**
         * validate the array for TeamMembers
         */
        protected void validateTeamMembers(CaseAddressListType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param TeamMembers
         */
        public void setTeamMembers(CaseAddressListType[] param) {
            validateTeamMembers(param);

            localTeamMembersTracker = param != null;

            this.localTeamMembers = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param CaseAddressListType
         */
        public void addTeamMembers(CaseAddressListType param) {
            if (localTeamMembers == null) {
                localTeamMembers = new CaseAddressListType[] {  };
            }

            //update the setting tracker
            localTeamMembersTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localTeamMembers);
            list.add(param);
            this.localTeamMembers = (CaseAddressListType[]) list.toArray(new CaseAddressListType[list.size()]);
        }

        public boolean isTitleSpecified() {
            return localTitleTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTitle() {
            return localTitle;
        }

        /**
         * Auto generated setter method
         * @param param Title
         */
        public void setTitle(java.lang.String param) {
            localTitleTracker = param != null;

            this.localTitle = param;
        }

        public boolean isIssueSeverityEstimationSpecified() {
            return localIssueSeverityEstimationTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIssueSeverityEstimation() {
            return localIssueSeverityEstimation;
        }

        /**
         * Auto generated setter method
         * @param param IssueSeverityEstimation
         */
        public void setIssueSeverityEstimation(
            org.apache.axis2.databinding.types.Token param) {
            localIssueSeverityEstimationTracker = param != null;

            this.localIssueSeverityEstimation = param;
        }

        public boolean isIssueTypeSpecified() {
            return localIssueTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIssueType() {
            return localIssueType;
        }

        /**
         * Auto generated setter method
         * @param param IssueType
         */
        public void setIssueType(org.apache.axis2.databinding.types.Token param) {
            localIssueTypeTracker = param != null;

            this.localIssueType = param;
        }

        public boolean isIssueSubTypeSpecified() {
            return localIssueSubTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIssueSubType() {
            return localIssueSubType;
        }

        /**
         * Auto generated setter method
         * @param param IssueSubType
         */
        public void setIssueSubType(
            org.apache.axis2.databinding.types.Token param) {
            localIssueSubTypeTracker = param != null;

            this.localIssueSubType = param;
        }

        public boolean isIssueDetailedDecriptionSpecified() {
            return localIssueDetailedDecriptionTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIssueDetailedDecription() {
            return localIssueDetailedDecription;
        }

        /**
         * Auto generated setter method
         * @param param IssueDetailedDecription
         */
        public void setIssueDetailedDecription(
            org.apache.axis2.databinding.types.Token param) {
            localIssueDetailedDecriptionTracker = param != null;

            this.localIssueDetailedDecription = param;
        }

        public boolean isRelatedCaseSpecified() {
            return localRelatedCaseTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getRelatedCase() {
            return localRelatedCase;
        }

        /**
         * Auto generated setter method
         * @param param RelatedCase
         */
        public void setRelatedCase(
            org.apache.axis2.databinding.types.Token param) {
            localRelatedCaseTracker = param != null;

            this.localRelatedCase = param;
        }

        public boolean isFilterSettingsWaterCockpitSpecified() {
            return localFilterSettingsWaterCockpitTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getFilterSettingsWaterCockpit() {
            return localFilterSettingsWaterCockpit;
        }

        /**
         * Auto generated setter method
         * @param param FilterSettingsWaterCockpit
         */
        public void setFilterSettingsWaterCockpit(
            org.apache.axis2.databinding.types.Token param) {
            localFilterSettingsWaterCockpitTracker = param != null;

            this.localFilterSettingsWaterCockpit = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":importIssueTypeSequence", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "importIssueTypeSequence", xmlWriter);
                }
            }

            if (localRecordTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "recordType", xmlWriter);

                if (localRecordType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "recordType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRecordType));
                }

                xmlWriter.writeEndElement();
            }

            if (localIssueIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "issueId", xmlWriter);

                if (localIssueId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "issueId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIssueId));
                }

                xmlWriter.writeEndElement();
            }

            if (localAssignedToTracker) {
                if (localAssignedTo == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AssignedTo cannot be null!!");
                }

                localAssignedTo.serialize(new javax.xml.namespace.QName("",
                        "AssignedTo"), xmlWriter);
            }

            if (localTeamMembersTracker) {
                if (localTeamMembers != null) {
                    for (int i = 0; i < localTeamMembers.length; i++) {
                        if (localTeamMembers[i] != null) {
                            localTeamMembers[i].serialize(new javax.xml.namespace.QName(
                                    "", "TeamMembers"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "TeamMembers cannot be null!!");
                }
            }

            if (localTitleTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Title", xmlWriter);

                if (localTitle == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Title cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTitle);
                }

                xmlWriter.writeEndElement();
            }

            if (localIssueSeverityEstimationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IssueSeverityEstimation",
                    xmlWriter);

                if (localIssueSeverityEstimation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IssueSeverityEstimation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIssueSeverityEstimation));
                }

                xmlWriter.writeEndElement();
            }

            if (localIssueTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IssueType", xmlWriter);

                if (localIssueType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IssueType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIssueType));
                }

                xmlWriter.writeEndElement();
            }

            if (localIssueSubTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IssueSubType", xmlWriter);

                if (localIssueSubType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IssueSubType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIssueSubType));
                }

                xmlWriter.writeEndElement();
            }

            if (localIssueDetailedDecriptionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IssueDetailedDecription",
                    xmlWriter);

                if (localIssueDetailedDecription == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IssueDetailedDecription cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIssueDetailedDecription));
                }

                xmlWriter.writeEndElement();
            }

            if (localRelatedCaseTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RelatedCase", xmlWriter);

                if (localRelatedCase == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RelatedCase cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRelatedCase));
                }

                xmlWriter.writeEndElement();
            }

            if (localFilterSettingsWaterCockpitTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "FilterSettingsWaterCockpit", xmlWriter);

                if (localFilterSettingsWaterCockpit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FilterSettingsWaterCockpit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFilterSettingsWaterCockpit));
                }

                xmlWriter.writeEndElement();
            }
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ImportIssueTypeSequence parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ImportIssueTypeSequence object = new ImportIssueTypeSequence();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    java.util.ArrayList list4 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "recordType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "recordType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRecordType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "issueId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "issueId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIssueId(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "AssignedTo").equals(
                                reader.getName())) {
                        object.setAssignedTo(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TeamMembers").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list4.add(CaseAddressListType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone4 = false;

                        while (!loopDone4) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone4 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "TeamMembers").equals(
                                            reader.getName())) {
                                    list4.add(CaseAddressListType.Factory.parse(
                                            reader));
                                } else {
                                    loopDone4 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setTeamMembers((CaseAddressListType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                CaseAddressListType.class, list4));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Title").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Title" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "IssueSeverityEstimation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IssueSeverityEstimation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIssueSeverityEstimation(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "IssueType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IssueType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIssueType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "IssueSubType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IssueSubType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIssueSubType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "IssueDetailedDecription").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "IssueDetailedDecription" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIssueDetailedDecription(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "RelatedCase").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "RelatedCase" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRelatedCase(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "FilterSettingsWaterCockpit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FilterSettingsWaterCockpit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFilterSettingsWaterCockpit(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AuthorityReporting_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = AuthorityReporting_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for Authority
         */
        protected org.apache.axis2.databinding.types.Token localAuthority;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAuthorityTracker = false;

        /**
         * field for AuthorityClassification
         */
        protected org.apache.axis2.databinding.types.Token localAuthorityClassification;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAuthorityClassificationTracker = false;

        /**
         * field for ReportSubmitted
         */
        protected org.apache.axis2.databinding.types.Token localReportSubmitted;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReportSubmittedTracker = false;

        /**
         * field for AuthorityUpdateNeeded
         */
        protected org.apache.axis2.databinding.types.Token localAuthorityUpdateNeeded;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAuthorityUpdateNeededTracker = false;

        /**
         * field for SubmissionNumber
         */
        protected java.lang.String localSubmissionNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubmissionNumberTracker = false;

        /**
         * field for RegistrationNumber
         */
        protected java.lang.String localRegistrationNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistrationNumberTracker = false;

        /**
         * field for RegistrantsReferenceNumber
         */
        protected java.lang.String localRegistrantsReferenceNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistrantsReferenceNumberTracker = false;

        /**
         * field for RegistrantsRegistrNumber
         */
        protected java.lang.String localRegistrantsRegistrNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistrantsRegistrNumberTracker = false;

        /**
         * field for RegistrantsName
         */
        protected org.apache.axis2.databinding.types.Token localRegistrantsName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistrantsNameTracker = false;

        /**
         * field for RegistrantsContactPerson
         */
        protected org.apache.axis2.databinding.types.Token localRegistrantsContactPerson;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistrantsContactPersonTracker = false;

        /**
         * field for RegistrantsContactPhone
         */
        protected org.apache.axis2.databinding.types.Token localRegistrantsContactPhone;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistrantsContactPhoneTracker = false;

        /**
         * field for RegistrationUnknown
         */
        protected org.apache.axis2.databinding.types.Token localRegistrationUnknown;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistrationUnknownTracker = false;

        /**
         * field for Frequency
         */
        protected org.apache.axis2.databinding.types.Token localFrequency;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFrequencyTracker = false;

        /**
         * field for PartOfALargerStudy
         */
        protected org.apache.axis2.databinding.types.Token localPartOfALargerStudy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPartOfALargerStudyTracker = false;

        public boolean isAuthoritySpecified() {
            return localAuthorityTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getAuthority() {
            return localAuthority;
        }

        /**
         * Auto generated setter method
         * @param param Authority
         */
        public void setAuthority(org.apache.axis2.databinding.types.Token param) {
            localAuthorityTracker = param != null;

            this.localAuthority = param;
        }

        public boolean isAuthorityClassificationSpecified() {
            return localAuthorityClassificationTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getAuthorityClassification() {
            return localAuthorityClassification;
        }

        /**
         * Auto generated setter method
         * @param param AuthorityClassification
         */
        public void setAuthorityClassification(
            org.apache.axis2.databinding.types.Token param) {
            localAuthorityClassificationTracker = param != null;

            this.localAuthorityClassification = param;
        }

        public boolean isReportSubmittedSpecified() {
            return localReportSubmittedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getReportSubmitted() {
            return localReportSubmitted;
        }

        /**
         * Auto generated setter method
         * @param param ReportSubmitted
         */
        public void setReportSubmitted(
            org.apache.axis2.databinding.types.Token param) {
            localReportSubmittedTracker = param != null;

            this.localReportSubmitted = param;
        }

        public boolean isAuthorityUpdateNeededSpecified() {
            return localAuthorityUpdateNeededTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getAuthorityUpdateNeeded() {
            return localAuthorityUpdateNeeded;
        }

        /**
         * Auto generated setter method
         * @param param AuthorityUpdateNeeded
         */
        public void setAuthorityUpdateNeeded(
            org.apache.axis2.databinding.types.Token param) {
            localAuthorityUpdateNeededTracker = param != null;

            this.localAuthorityUpdateNeeded = param;
        }

        public boolean isSubmissionNumberSpecified() {
            return localSubmissionNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSubmissionNumber() {
            return localSubmissionNumber;
        }

        /**
         * Auto generated setter method
         * @param param SubmissionNumber
         */
        public void setSubmissionNumber(java.lang.String param) {
            localSubmissionNumberTracker = param != null;

            this.localSubmissionNumber = param;
        }

        public boolean isRegistrationNumberSpecified() {
            return localRegistrationNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRegistrationNumber() {
            return localRegistrationNumber;
        }

        /**
         * Auto generated setter method
         * @param param RegistrationNumber
         */
        public void setRegistrationNumber(java.lang.String param) {
            localRegistrationNumberTracker = param != null;

            this.localRegistrationNumber = param;
        }

        public boolean isRegistrantsReferenceNumberSpecified() {
            return localRegistrantsReferenceNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRegistrantsReferenceNumber() {
            return localRegistrantsReferenceNumber;
        }

        /**
         * Auto generated setter method
         * @param param RegistrantsReferenceNumber
         */
        public void setRegistrantsReferenceNumber(java.lang.String param) {
            localRegistrantsReferenceNumberTracker = param != null;

            this.localRegistrantsReferenceNumber = param;
        }

        public boolean isRegistrantsRegistrNumberSpecified() {
            return localRegistrantsRegistrNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRegistrantsRegistrNumber() {
            return localRegistrantsRegistrNumber;
        }

        /**
         * Auto generated setter method
         * @param param RegistrantsRegistrNumber
         */
        public void setRegistrantsRegistrNumber(java.lang.String param) {
            localRegistrantsRegistrNumberTracker = param != null;

            this.localRegistrantsRegistrNumber = param;
        }

        public boolean isRegistrantsNameSpecified() {
            return localRegistrantsNameTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getRegistrantsName() {
            return localRegistrantsName;
        }

        /**
         * Auto generated setter method
         * @param param RegistrantsName
         */
        public void setRegistrantsName(
            org.apache.axis2.databinding.types.Token param) {
            localRegistrantsNameTracker = param != null;

            this.localRegistrantsName = param;
        }

        public boolean isRegistrantsContactPersonSpecified() {
            return localRegistrantsContactPersonTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getRegistrantsContactPerson() {
            return localRegistrantsContactPerson;
        }

        /**
         * Auto generated setter method
         * @param param RegistrantsContactPerson
         */
        public void setRegistrantsContactPerson(
            org.apache.axis2.databinding.types.Token param) {
            localRegistrantsContactPersonTracker = param != null;

            this.localRegistrantsContactPerson = param;
        }

        public boolean isRegistrantsContactPhoneSpecified() {
            return localRegistrantsContactPhoneTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getRegistrantsContactPhone() {
            return localRegistrantsContactPhone;
        }

        /**
         * Auto generated setter method
         * @param param RegistrantsContactPhone
         */
        public void setRegistrantsContactPhone(
            org.apache.axis2.databinding.types.Token param) {
            localRegistrantsContactPhoneTracker = param != null;

            this.localRegistrantsContactPhone = param;
        }

        public boolean isRegistrationUnknownSpecified() {
            return localRegistrationUnknownTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getRegistrationUnknown() {
            return localRegistrationUnknown;
        }

        /**
         * Auto generated setter method
         * @param param RegistrationUnknown
         */
        public void setRegistrationUnknown(
            org.apache.axis2.databinding.types.Token param) {
            localRegistrationUnknownTracker = param != null;

            this.localRegistrationUnknown = param;
        }

        public boolean isFrequencySpecified() {
            return localFrequencyTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getFrequency() {
            return localFrequency;
        }

        /**
         * Auto generated setter method
         * @param param Frequency
         */
        public void setFrequency(org.apache.axis2.databinding.types.Token param) {
            localFrequencyTracker = param != null;

            this.localFrequency = param;
        }

        public boolean isPartOfALargerStudySpecified() {
            return localPartOfALargerStudyTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPartOfALargerStudy() {
            return localPartOfALargerStudy;
        }

        /**
         * Auto generated setter method
         * @param param PartOfALargerStudy
         */
        public void setPartOfALargerStudy(
            org.apache.axis2.databinding.types.Token param) {
            localPartOfALargerStudyTracker = param != null;

            this.localPartOfALargerStudy = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":AuthorityReporting_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "AuthorityReporting_type0", xmlWriter);
                }
            }

            if (localAuthorityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Authority", xmlWriter);

                if (localAuthority == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Authority cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAuthority));
                }

                xmlWriter.writeEndElement();
            }

            if (localAuthorityClassificationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AuthorityClassification",
                    xmlWriter);

                if (localAuthorityClassification == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AuthorityClassification cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAuthorityClassification));
                }

                xmlWriter.writeEndElement();
            }

            if (localReportSubmittedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ReportSubmitted", xmlWriter);

                if (localReportSubmitted == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ReportSubmitted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localReportSubmitted));
                }

                xmlWriter.writeEndElement();
            }

            if (localAuthorityUpdateNeededTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AuthorityUpdateNeeded",
                    xmlWriter);

                if (localAuthorityUpdateNeeded == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AuthorityUpdateNeeded cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAuthorityUpdateNeeded));
                }

                xmlWriter.writeEndElement();
            }

            if (localSubmissionNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SubmissionNumber", xmlWriter);

                if (localSubmissionNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SubmissionNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSubmissionNumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localRegistrationNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RegistrationNumber",
                    xmlWriter);

                if (localRegistrationNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RegistrationNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRegistrationNumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localRegistrantsReferenceNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "RegistrantsReferenceNumber", xmlWriter);

                if (localRegistrantsReferenceNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RegistrantsReferenceNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRegistrantsReferenceNumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localRegistrantsRegistrNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RegistrantsRegistrNumber",
                    xmlWriter);

                if (localRegistrantsRegistrNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RegistrantsRegistrNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRegistrantsRegistrNumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localRegistrantsNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RegistrantsName", xmlWriter);

                if (localRegistrantsName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RegistrantsName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRegistrantsName));
                }

                xmlWriter.writeEndElement();
            }

            if (localRegistrantsContactPersonTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RegistrantsContactPerson",
                    xmlWriter);

                if (localRegistrantsContactPerson == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RegistrantsContactPerson cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRegistrantsContactPerson));
                }

                xmlWriter.writeEndElement();
            }

            if (localRegistrantsContactPhoneTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RegistrantsContactPhone",
                    xmlWriter);

                if (localRegistrantsContactPhone == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RegistrantsContactPhone cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRegistrantsContactPhone));
                }

                xmlWriter.writeEndElement();
            }

            if (localRegistrationUnknownTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RegistrationUnknown",
                    xmlWriter);

                if (localRegistrationUnknown == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RegistrationUnknown cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRegistrationUnknown));
                }

                xmlWriter.writeEndElement();
            }

            if (localFrequencyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Frequency", xmlWriter);

                if (localFrequency == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Frequency cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFrequency));
                }

                xmlWriter.writeEndElement();
            }

            if (localPartOfALargerStudyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PartOfALargerStudy",
                    xmlWriter);

                if (localPartOfALargerStudy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PartOfALargerStudy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPartOfALargerStudy));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AuthorityReporting_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AuthorityReporting_type0 object = new AuthorityReporting_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"AuthorityReporting_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AuthorityReporting_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "Authority").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "Authority" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAuthority(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "AuthorityClassification").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "AuthorityClassification" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAuthorityClassification(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ReportSubmitted").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ReportSubmitted" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setReportSubmitted(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "AuthorityUpdateNeeded").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "AuthorityUpdateNeeded" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAuthorityUpdateNeeded(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SubmissionNumber").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "SubmissionNumber" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSubmissionNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "RegistrationNumber").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "RegistrationNumber" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setRegistrationNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "RegistrantsReferenceNumber").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "RegistrantsReferenceNumber" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setRegistrantsReferenceNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "RegistrantsRegistrNumber").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "RegistrantsRegistrNumber" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setRegistrantsRegistrNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "RegistrantsName").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "RegistrantsName" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setRegistrantsName(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "RegistrantsContactPerson").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "RegistrantsContactPerson" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setRegistrantsContactPerson(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "RegistrantsContactPhone").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "RegistrantsContactPhone" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setRegistrantsContactPhone(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "RegistrationUnknown").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "RegistrationUnknown" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setRegistrationUnknown(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "Frequency").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "Frequency" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setFrequency(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "PartOfALargerStudy").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "PartOfALargerStudy" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setPartOfALargerStudy(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Deficiency_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Deficiency_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for ReasonForTheDamage
         */
        protected org.apache.axis2.databinding.types.Token localReasonForTheDamage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReasonForTheDamageTracker = false;

        /**
         * field for DetailsOfTheDamage
         */
        protected java.lang.String localDetailsOfTheDamage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDetailsOfTheDamageTracker = false;

        public boolean isReasonForTheDamageSpecified() {
            return localReasonForTheDamageTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getReasonForTheDamage() {
            return localReasonForTheDamage;
        }

        /**
         * Auto generated setter method
         * @param param ReasonForTheDamage
         */
        public void setReasonForTheDamage(
            org.apache.axis2.databinding.types.Token param) {
            localReasonForTheDamageTracker = param != null;

            this.localReasonForTheDamage = param;
        }

        public boolean isDetailsOfTheDamageSpecified() {
            return localDetailsOfTheDamageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDetailsOfTheDamage() {
            return localDetailsOfTheDamage;
        }

        /**
         * Auto generated setter method
         * @param param DetailsOfTheDamage
         */
        public void setDetailsOfTheDamage(java.lang.String param) {
            localDetailsOfTheDamageTracker = param != null;

            this.localDetailsOfTheDamage = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Deficiency_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Deficiency_type0", xmlWriter);
                }
            }

            if (localReasonForTheDamageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ReasonForTheDamage",
                    xmlWriter);

                if (localReasonForTheDamage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ReasonForTheDamage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localReasonForTheDamage));
                }

                xmlWriter.writeEndElement();
            }

            if (localDetailsOfTheDamageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DetailsOfTheDamage",
                    xmlWriter);

                if (localDetailsOfTheDamage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DetailsOfTheDamage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDetailsOfTheDamage);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Deficiency_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Deficiency_type0 object = new Deficiency_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Deficiency_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Deficiency_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ReasonForTheDamage").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ReasonForTheDamage" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setReasonForTheDamage(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "DetailsOfTheDamage").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "DetailsOfTheDamage" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDetailsOfTheDamage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DetailsOfInfectionInfest_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DetailsOfInfectionInfest_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for TypeInfection
         */
        protected org.apache.axis2.databinding.types.Token localTypeInfection;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeInfectionTracker = false;

        /**
         * field for DegreeOfInfection
         */
        protected org.apache.axis2.databinding.types.Token localDegreeOfInfection;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDegreeOfInfectionTracker = false;

        /**
         * field for CommentOnInfection
         */
        protected java.lang.String localCommentOnInfection;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentOnInfectionTracker = false;

        public boolean isTypeInfectionSpecified() {
            return localTypeInfectionTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTypeInfection() {
            return localTypeInfection;
        }

        /**
         * Auto generated setter method
         * @param param TypeInfection
         */
        public void setTypeInfection(
            org.apache.axis2.databinding.types.Token param) {
            localTypeInfectionTracker = param != null;

            this.localTypeInfection = param;
        }

        public boolean isDegreeOfInfectionSpecified() {
            return localDegreeOfInfectionTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDegreeOfInfection() {
            return localDegreeOfInfection;
        }

        /**
         * Auto generated setter method
         * @param param DegreeOfInfection
         */
        public void setDegreeOfInfection(
            org.apache.axis2.databinding.types.Token param) {
            localDegreeOfInfectionTracker = param != null;

            this.localDegreeOfInfection = param;
        }

        public boolean isCommentOnInfectionSpecified() {
            return localCommentOnInfectionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCommentOnInfection() {
            return localCommentOnInfection;
        }

        /**
         * Auto generated setter method
         * @param param CommentOnInfection
         */
        public void setCommentOnInfection(java.lang.String param) {
            localCommentOnInfectionTracker = param != null;

            this.localCommentOnInfection = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DetailsOfInfectionInfest_type0",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DetailsOfInfectionInfest_type0", xmlWriter);
                }
            }

            if (localTypeInfectionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeInfection", xmlWriter);

                if (localTypeInfection == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeInfection cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTypeInfection));
                }

                xmlWriter.writeEndElement();
            }

            if (localDegreeOfInfectionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DegreeOfInfection",
                    xmlWriter);

                if (localDegreeOfInfection == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DegreeOfInfection cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDegreeOfInfection));
                }

                xmlWriter.writeEndElement();
            }

            if (localCommentOnInfectionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentOnInfection",
                    xmlWriter);

                if (localCommentOnInfection == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentOnInfection cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCommentOnInfection);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DetailsOfInfectionInfest_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DetailsOfInfectionInfest_type0 object = new DetailsOfInfectionInfest_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DetailsOfInfectionInfest_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DetailsOfInfectionInfest_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TypeInfection").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "TypeInfection" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTypeInfection(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "DegreeOfInfection").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "DegreeOfInfection" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDegreeOfInfection(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "CommentOnInfection").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "CommentOnInfection" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setCommentOnInfection(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class PriorAppliedProducts_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = PriorAppliedProducts_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for ProductName
         */
        protected org.apache.axis2.databinding.types.Token localProductName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductNameTracker = false;

        /**
         * field for SpecifiedContentPrior
         */
        protected java.lang.String localSpecifiedContentPrior;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSpecifiedContentPriorTracker = false;

        /**
         * field for UnitSpecifiedContentPrior
         */
        protected java.lang.String localUnitSpecifiedContentPrior;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitSpecifiedContentPriorTracker = false;

        /**
         * field for FormulationTypePrior
         */
        protected java.lang.String localFormulationTypePrior;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFormulationTypePriorTracker = false;

        /**
         * field for ProductRate
         */
        protected java.lang.String localProductRate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductRateTracker = false;

        public boolean isProductNameSpecified() {
            return localProductNameTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProductName() {
            return localProductName;
        }

        /**
         * Auto generated setter method
         * @param param ProductName
         */
        public void setProductName(
            org.apache.axis2.databinding.types.Token param) {
            localProductNameTracker = param != null;

            this.localProductName = param;
        }

        public boolean isSpecifiedContentPriorSpecified() {
            return localSpecifiedContentPriorTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSpecifiedContentPrior() {
            return localSpecifiedContentPrior;
        }

        /**
         * Auto generated setter method
         * @param param SpecifiedContentPrior
         */
        public void setSpecifiedContentPrior(java.lang.String param) {
            localSpecifiedContentPriorTracker = param != null;

            this.localSpecifiedContentPrior = param;
        }

        public boolean isUnitSpecifiedContentPriorSpecified() {
            return localUnitSpecifiedContentPriorTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUnitSpecifiedContentPrior() {
            return localUnitSpecifiedContentPrior;
        }

        /**
         * Auto generated setter method
         * @param param UnitSpecifiedContentPrior
         */
        public void setUnitSpecifiedContentPrior(java.lang.String param) {
            localUnitSpecifiedContentPriorTracker = param != null;

            this.localUnitSpecifiedContentPrior = param;
        }

        public boolean isFormulationTypePriorSpecified() {
            return localFormulationTypePriorTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFormulationTypePrior() {
            return localFormulationTypePrior;
        }

        /**
         * Auto generated setter method
         * @param param FormulationTypePrior
         */
        public void setFormulationTypePrior(java.lang.String param) {
            localFormulationTypePriorTracker = param != null;

            this.localFormulationTypePrior = param;
        }

        public boolean isProductRateSpecified() {
            return localProductRateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductRate() {
            return localProductRate;
        }

        /**
         * Auto generated setter method
         * @param param ProductRate
         */
        public void setProductRate(java.lang.String param) {
            localProductRateTracker = param != null;

            this.localProductRate = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":PriorAppliedProducts_type0",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "PriorAppliedProducts_type0", xmlWriter);
                }
            }

            if (localProductNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductName", xmlWriter);

                if (localProductName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductName));
                }

                xmlWriter.writeEndElement();
            }

            if (localSpecifiedContentPriorTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SpecifiedContentPrior",
                    xmlWriter);

                if (localSpecifiedContentPrior == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SpecifiedContentPrior cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSpecifiedContentPrior);
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitSpecifiedContentPriorTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitSpecifiedContentPrior",
                    xmlWriter);

                if (localUnitSpecifiedContentPrior == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitSpecifiedContentPrior cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUnitSpecifiedContentPrior);
                }

                xmlWriter.writeEndElement();
            }

            if (localFormulationTypePriorTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FormulationTypePrior",
                    xmlWriter);

                if (localFormulationTypePrior == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FormulationTypePrior cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFormulationTypePrior);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductRateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductRate", xmlWriter);

                if (localProductRate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductRate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductRate);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static PriorAppliedProducts_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                PriorAppliedProducts_type0 object = new PriorAppliedProducts_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"PriorAppliedProducts_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (PriorAppliedProducts_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ProductName").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ProductName" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setProductName(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SpecifiedContentPrior").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "SpecifiedContentPrior" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSpecifiedContentPrior(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitSpecifiedContentPrior").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitSpecifiedContentPrior" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitSpecifiedContentPrior(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "FormulationTypePrior").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "FormulationTypePrior" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setFormulationTypePrior(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ProductRate").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ProductRate" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setProductRate(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateAndUpdateIssueRecordRequest implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.sparta.org/ImportService/",
                "createAndUpdateIssueRecordRequest", "");

        /**
         * field for CreateAndUpdateIssueRecordRequest
         */
        protected ImportIssueType localCreateAndUpdateIssueRecordRequest;

        /**
         * Auto generated getter method
         * @return ImportIssueType
         */
        public ImportIssueType getCreateAndUpdateIssueRecordRequest() {
            return localCreateAndUpdateIssueRecordRequest;
        }

        /**
         * Auto generated setter method
         * @param param CreateAndUpdateIssueRecordRequest
         */
        public void setCreateAndUpdateIssueRecordRequest(ImportIssueType param) {
            this.localCreateAndUpdateIssueRecordRequest = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localCreateAndUpdateIssueRecordRequest == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "createAndUpdateIssueRecordRequest cannot be null!");
            }

            localCreateAndUpdateIssueRecordRequest.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.sparta.org/ImportService/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateAndUpdateIssueRecordRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateAndUpdateIssueRecordRequest object = new CreateAndUpdateIssueRecordRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://www.sparta.org/ImportService/",
                                        "createAndUpdateIssueRecordRequest").equals(
                                        reader.getName())) {
                                object.setCreateAndUpdateIssueRecordRequest(ImportIssueType.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AttachedDocumentsType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = attachedDocumentsType
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for AttachedDocumentsTypeSequence
         * This was an Array!
         */
        protected AttachedDocumentsTypeSequence[] localAttachedDocumentsTypeSequence;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttachedDocumentsTypeSequenceTracker = false;

        public boolean isAttachedDocumentsTypeSequenceSpecified() {
            return localAttachedDocumentsTypeSequenceTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsTypeSequence[]
         */
        public AttachedDocumentsTypeSequence[] getAttachedDocumentsTypeSequence() {
            return localAttachedDocumentsTypeSequence;
        }

        /**
         * validate the array for AttachedDocumentsTypeSequence
         */
        protected void validateAttachedDocumentsTypeSequence(
            AttachedDocumentsTypeSequence[] param) {
        }

        /**
         * Auto generated setter method
         * @param param AttachedDocumentsTypeSequence
         */
        public void setAttachedDocumentsTypeSequence(
            AttachedDocumentsTypeSequence[] param) {
            validateAttachedDocumentsTypeSequence(param);

            localAttachedDocumentsTypeSequenceTracker = param != null;

            this.localAttachedDocumentsTypeSequence = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param AttachedDocumentsTypeSequence
         */
        public void addAttachedDocumentsTypeSequence(
            AttachedDocumentsTypeSequence param) {
            if (localAttachedDocumentsTypeSequence == null) {
                localAttachedDocumentsTypeSequence = new AttachedDocumentsTypeSequence[] {
                        
                    };
            }

            //update the setting tracker
            localAttachedDocumentsTypeSequenceTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAttachedDocumentsTypeSequence);
            list.add(param);
            this.localAttachedDocumentsTypeSequence = (AttachedDocumentsTypeSequence[]) list.toArray(new AttachedDocumentsTypeSequence[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":attachedDocumentsType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "attachedDocumentsType", xmlWriter);
                }
            }

            if (localAttachedDocumentsTypeSequenceTracker) {
                if (localAttachedDocumentsTypeSequence != null) {
                    for (int i = 0;
                            i < localAttachedDocumentsTypeSequence.length;
                            i++) {
                        if (localAttachedDocumentsTypeSequence[i] != null) {
                            localAttachedDocumentsTypeSequence[i].serialize(null,
                                xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "attachedDocumentsTypeSequence cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AttachedDocumentsType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AttachedDocumentsType object = new AttachedDocumentsType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"attachedDocumentsType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AttachedDocumentsType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    try {
                        if (reader.isStartElement()) {
                            // Process the array and step past its final element's end.
                            list1.add(AttachedDocumentsTypeSequence.Factory.parse(
                                    reader));

                            //loop until we find a start element that is not part of this array
                            boolean loopDone1 = false;

                            while (!loopDone1) {
                                // Step to next element event.
                                while (!reader.isStartElement() &&
                                        !reader.isEndElement())
                                    reader.next();

                                if (reader.isEndElement()) {
                                    //two continuous end elements means we are exiting the xml structure
                                    loopDone1 = true;
                                } else {
                                    list1.add(AttachedDocumentsTypeSequence.Factory.parse(
                                            reader));
                                }
                            }

                            // call the converter utility  to convert and set the array
                            object.setAttachedDocumentsTypeSequence((AttachedDocumentsTypeSequence[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                    AttachedDocumentsTypeSequence.class, list1));
                        } // End of if for expected property start element

                        else {
                        }
                    } catch (java.lang.Exception e) {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AffectedPersonInformation_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = AffectedPersonInformation_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for IdentifierName
         */
        protected org.apache.axis2.databinding.types.Token localIdentifierName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdentifierNameTracker = false;

        /**
         * field for Sex
         */
        protected org.apache.axis2.databinding.types.Token localSex;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSexTracker = false;

        /**
         * field for AgeYears
         */
        protected java.math.BigInteger localAgeYears;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAgeYearsTracker = false;

        /**
         * field for Pregnant
         */
        protected org.apache.axis2.databinding.types.Token localPregnant;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPregnantTracker = false;

        /**
         * field for BodyWeight
         */
        protected java.math.BigDecimal localBodyWeight;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBodyWeightTracker = false;

        /**
         * field for UnitsOfMeasureBodyWeight
         */
        protected org.apache.axis2.databinding.types.Token localUnitsOfMeasureBodyWeight;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitsOfMeasureBodyWeightTracker = false;

        /**
         * field for AffectedBodySystem
         */
        protected org.apache.axis2.databinding.types.Token localAffectedBodySystem;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAffectedBodySystemTracker = false;

        /**
         * field for PPEUsed
         */
        protected org.apache.axis2.databinding.types.Token localPPEUsed;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPPEUsedTracker = false;

        /**
         * field for UseOfAlcoholDrugsChemicals
         */
        protected org.apache.axis2.databinding.types.Token localUseOfAlcoholDrugsChemicals;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUseOfAlcoholDrugsChemicalsTracker = false;

        /**
         * field for Characteristics
         */
        protected org.apache.axis2.databinding.types.Token localCharacteristics;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCharacteristicsTracker = false;

        public boolean isIdentifierNameSpecified() {
            return localIdentifierNameTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIdentifierName() {
            return localIdentifierName;
        }

        /**
         * Auto generated setter method
         * @param param IdentifierName
         */
        public void setIdentifierName(
            org.apache.axis2.databinding.types.Token param) {
            localIdentifierNameTracker = param != null;

            this.localIdentifierName = param;
        }

        public boolean isSexSpecified() {
            return localSexTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSex() {
            return localSex;
        }

        /**
         * Auto generated setter method
         * @param param Sex
         */
        public void setSex(org.apache.axis2.databinding.types.Token param) {
            localSexTracker = param != null;

            this.localSex = param;
        }

        public boolean isAgeYearsSpecified() {
            return localAgeYearsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getAgeYears() {
            return localAgeYears;
        }

        /**
         * Auto generated setter method
         * @param param AgeYears
         */
        public void setAgeYears(java.math.BigInteger param) {
            localAgeYearsTracker = param != null;

            this.localAgeYears = param;
        }

        public boolean isPregnantSpecified() {
            return localPregnantTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPregnant() {
            return localPregnant;
        }

        /**
         * Auto generated setter method
         * @param param Pregnant
         */
        public void setPregnant(org.apache.axis2.databinding.types.Token param) {
            localPregnantTracker = param != null;

            this.localPregnant = param;
        }

        public boolean isBodyWeightSpecified() {
            return localBodyWeightTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getBodyWeight() {
            return localBodyWeight;
        }

        /**
         * Auto generated setter method
         * @param param BodyWeight
         */
        public void setBodyWeight(java.math.BigDecimal param) {
            localBodyWeightTracker = param != null;

            this.localBodyWeight = param;
        }

        public boolean isUnitsOfMeasureBodyWeightSpecified() {
            return localUnitsOfMeasureBodyWeightTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitsOfMeasureBodyWeight() {
            return localUnitsOfMeasureBodyWeight;
        }

        /**
         * Auto generated setter method
         * @param param UnitsOfMeasureBodyWeight
         */
        public void setUnitsOfMeasureBodyWeight(
            org.apache.axis2.databinding.types.Token param) {
            localUnitsOfMeasureBodyWeightTracker = param != null;

            this.localUnitsOfMeasureBodyWeight = param;
        }

        public boolean isAffectedBodySystemSpecified() {
            return localAffectedBodySystemTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getAffectedBodySystem() {
            return localAffectedBodySystem;
        }

        /**
         * Auto generated setter method
         * @param param AffectedBodySystem
         */
        public void setAffectedBodySystem(
            org.apache.axis2.databinding.types.Token param) {
            localAffectedBodySystemTracker = param != null;

            this.localAffectedBodySystem = param;
        }

        public boolean isPPEUsedSpecified() {
            return localPPEUsedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPPEUsed() {
            return localPPEUsed;
        }

        /**
         * Auto generated setter method
         * @param param PPEUsed
         */
        public void setPPEUsed(org.apache.axis2.databinding.types.Token param) {
            localPPEUsedTracker = param != null;

            this.localPPEUsed = param;
        }

        public boolean isUseOfAlcoholDrugsChemicalsSpecified() {
            return localUseOfAlcoholDrugsChemicalsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUseOfAlcoholDrugsChemicals() {
            return localUseOfAlcoholDrugsChemicals;
        }

        /**
         * Auto generated setter method
         * @param param UseOfAlcoholDrugsChemicals
         */
        public void setUseOfAlcoholDrugsChemicals(
            org.apache.axis2.databinding.types.Token param) {
            localUseOfAlcoholDrugsChemicalsTracker = param != null;

            this.localUseOfAlcoholDrugsChemicals = param;
        }

        public boolean isCharacteristicsSpecified() {
            return localCharacteristicsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCharacteristics() {
            return localCharacteristics;
        }

        /**
         * Auto generated setter method
         * @param param Characteristics
         */
        public void setCharacteristics(
            org.apache.axis2.databinding.types.Token param) {
            localCharacteristicsTracker = param != null;

            this.localCharacteristics = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":AffectedPersonInformation_type0",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "AffectedPersonInformation_type0", xmlWriter);
                }
            }

            if (localIdentifierNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IdentifierName", xmlWriter);

                if (localIdentifierName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IdentifierName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIdentifierName));
                }

                xmlWriter.writeEndElement();
            }

            if (localSexTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Sex", xmlWriter);

                if (localSex == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Sex cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSex));
                }

                xmlWriter.writeEndElement();
            }

            if (localAgeYearsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AgeYears", xmlWriter);

                if (localAgeYears == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AgeYears cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAgeYears));
                }

                xmlWriter.writeEndElement();
            }

            if (localPregnantTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Pregnant", xmlWriter);

                if (localPregnant == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Pregnant cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPregnant));
                }

                xmlWriter.writeEndElement();
            }

            if (localBodyWeightTracker) {
                namespace = "";
                writeStartElement(null, namespace, "BodyWeight", xmlWriter);

                if (localBodyWeight == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BodyWeight cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBodyWeight));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitsOfMeasureBodyWeightTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitsOfMeasureBodyWeight",
                    xmlWriter);

                if (localUnitsOfMeasureBodyWeight == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitsOfMeasureBodyWeight cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitsOfMeasureBodyWeight));
                }

                xmlWriter.writeEndElement();
            }

            if (localAffectedBodySystemTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AffectedBodySystem",
                    xmlWriter);

                if (localAffectedBodySystem == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AffectedBodySystem cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAffectedBodySystem));
                }

                xmlWriter.writeEndElement();
            }

            if (localPPEUsedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PPEUsed", xmlWriter);

                if (localPPEUsed == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PPEUsed cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPPEUsed));
                }

                xmlWriter.writeEndElement();
            }

            if (localUseOfAlcoholDrugsChemicalsTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "UseOfAlcoholDrugsChemicals", xmlWriter);

                if (localUseOfAlcoholDrugsChemicals == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UseOfAlcoholDrugsChemicals cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUseOfAlcoholDrugsChemicals));
                }

                xmlWriter.writeEndElement();
            }

            if (localCharacteristicsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Characteristics", xmlWriter);

                if (localCharacteristics == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Characteristics cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCharacteristics));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AffectedPersonInformation_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AffectedPersonInformation_type0 object = new AffectedPersonInformation_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"AffectedPersonInformation_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AffectedPersonInformation_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "IdentifierName").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "IdentifierName" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setIdentifierName(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "Sex").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "Sex" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSex(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "AgeYears").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "AgeYears" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAgeYears(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "Pregnant").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "Pregnant" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setPregnant(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "BodyWeight").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "BodyWeight" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setBodyWeight(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitsOfMeasureBodyWeight").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitsOfMeasureBodyWeight" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitsOfMeasureBodyWeight(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "AffectedBodySystem").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "AffectedBodySystem" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAffectedBodySystem(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "PPEUsed").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "PPEUsed" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setPPEUsed(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UseOfAlcoholDrugsChemicals").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UseOfAlcoholDrugsChemicals" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUseOfAlcoholDrugsChemicals(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "Characteristics").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "Characteristics" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setCharacteristics(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Exposures_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Exposures_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for DateOfExposure
         */
        protected java.util.Date localDateOfExposure;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDateOfExposureTracker = false;

        /**
         * field for DurationOfExposureDA
         */
        protected java.math.BigDecimal localDurationOfExposureDA;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDurationOfExposureDATracker = false;

        /**
         * field for UnitsExposureDurationDA
         */
        protected org.apache.axis2.databinding.types.Token localUnitsExposureDurationDA;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitsExposureDurationDATracker = false;

        /**
         * field for RootWayOfExposure
         */
        protected org.apache.axis2.databinding.types.Token localRootWayOfExposure;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRootWayOfExposureTracker = false;

        /**
         * field for ExposureDetails
         */
        protected java.lang.String localExposureDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExposureDetailsTracker = false;

        public boolean isDateOfExposureSpecified() {
            return localDateOfExposureTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getDateOfExposure() {
            return localDateOfExposure;
        }

        /**
         * Auto generated setter method
         * @param param DateOfExposure
         */
        public void setDateOfExposure(java.util.Date param) {
            localDateOfExposureTracker = param != null;

            this.localDateOfExposure = param;
        }

        public boolean isDurationOfExposureDASpecified() {
            return localDurationOfExposureDATracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDurationOfExposureDA() {
            return localDurationOfExposureDA;
        }

        /**
         * Auto generated setter method
         * @param param DurationOfExposureDA
         */
        public void setDurationOfExposureDA(java.math.BigDecimal param) {
            localDurationOfExposureDATracker = param != null;

            this.localDurationOfExposureDA = param;
        }

        public boolean isUnitsExposureDurationDASpecified() {
            return localUnitsExposureDurationDATracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitsExposureDurationDA() {
            return localUnitsExposureDurationDA;
        }

        /**
         * Auto generated setter method
         * @param param UnitsExposureDurationDA
         */
        public void setUnitsExposureDurationDA(
            org.apache.axis2.databinding.types.Token param) {
            localUnitsExposureDurationDATracker = param != null;

            this.localUnitsExposureDurationDA = param;
        }

        public boolean isRootWayOfExposureSpecified() {
            return localRootWayOfExposureTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getRootWayOfExposure() {
            return localRootWayOfExposure;
        }

        /**
         * Auto generated setter method
         * @param param RootWayOfExposure
         */
        public void setRootWayOfExposure(
            org.apache.axis2.databinding.types.Token param) {
            localRootWayOfExposureTracker = param != null;

            this.localRootWayOfExposure = param;
        }

        public boolean isExposureDetailsSpecified() {
            return localExposureDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getExposureDetails() {
            return localExposureDetails;
        }

        /**
         * Auto generated setter method
         * @param param ExposureDetails
         */
        public void setExposureDetails(java.lang.String param) {
            localExposureDetailsTracker = param != null;

            this.localExposureDetails = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Exposures_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Exposures_type0", xmlWriter);
                }
            }

            if (localDateOfExposureTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DateOfExposure", xmlWriter);

                if (localDateOfExposure == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DateOfExposure cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDateOfExposure));
                }

                xmlWriter.writeEndElement();
            }

            if (localDurationOfExposureDATracker) {
                namespace = "";
                writeStartElement(null, namespace, "DurationOfExposureDA",
                    xmlWriter);

                if (localDurationOfExposureDA == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DurationOfExposureDA cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDurationOfExposureDA));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitsExposureDurationDATracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitsExposureDurationDA",
                    xmlWriter);

                if (localUnitsExposureDurationDA == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitsExposureDurationDA cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitsExposureDurationDA));
                }

                xmlWriter.writeEndElement();
            }

            if (localRootWayOfExposureTracker) {
                namespace = "";
                writeStartElement(null, namespace, "RootWayOfExposure",
                    xmlWriter);

                if (localRootWayOfExposure == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "RootWayOfExposure cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRootWayOfExposure));
                }

                xmlWriter.writeEndElement();
            }

            if (localExposureDetailsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ExposureDetails", xmlWriter);

                if (localExposureDetails == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExposureDetails cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localExposureDetails);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Exposures_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Exposures_type0 object = new Exposures_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Exposures_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Exposures_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "DateOfExposure").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "DateOfExposure" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDateOfExposure(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "DurationOfExposureDA").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "DurationOfExposureDA" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDurationOfExposureDA(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitsExposureDurationDA").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitsExposureDurationDA" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitsExposureDurationDA(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "RootWayOfExposure").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "RootWayOfExposure" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setRootWayOfExposure(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ExposureDetails").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ExposureDetails" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setExposureDetails(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ImportIssue implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://cairnew.bcs.cnb/",
                "importIssue", "");

        /**
         * field for ImportIssue
         */
        protected ImportIssueType localImportIssue;

        /**
         * Auto generated getter method
         * @return ImportIssueType
         */
        public ImportIssueType getImportIssue() {
            return localImportIssue;
        }

        /**
         * Auto generated setter method
         * @param param ImportIssue
         */
        public void setImportIssue(ImportIssueType param) {
            this.localImportIssue = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localImportIssue == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "importIssue cannot be null!");
            }

            localImportIssue.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ImportIssue parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ImportIssue object = new ImportIssue();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://cairnew.bcs.cnb/", "importIssue").equals(
                                        reader.getName())) {
                                object.setImportIssue(ImportIssueType.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateAndUpdateIssueRecordResponseType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = createAndUpdateIssueRecordResponseType
           Namespace URI = http://www.sparta.org/ImportService/
           Namespace Prefix =
         */

        /**
         * field for ResponseStatus
         */
        protected java.math.BigInteger localResponseStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResponseStatusTracker = false;

        /**
         * field for ErrMessages
         * This was an Array!
         */
        protected java.lang.String[] localErrMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErrMessagesTracker = false;

        /**
         * field for ProcessingType
         */
        protected java.lang.String localProcessingType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProcessingTypeTracker = false;

        /**
         * field for IssueCreatedID
         */
        protected java.lang.String localIssueCreatedID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIssueCreatedIDTracker = false;

        /**
         * field for OptionalInfo
         * This was an Array!
         */
        protected java.lang.String[] localOptionalInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOptionalInfoTracker = false;

        public boolean isResponseStatusSpecified() {
            return localResponseStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getResponseStatus() {
            return localResponseStatus;
        }

        /**
         * Auto generated setter method
         * @param param ResponseStatus
         */
        public void setResponseStatus(java.math.BigInteger param) {
            localResponseStatusTracker = param != null;

            this.localResponseStatus = param;
        }

        public boolean isErrMessagesSpecified() {
            return localErrMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String[]
         */
        public java.lang.String[] getErrMessages() {
            return localErrMessages;
        }

        /**
         * validate the array for ErrMessages
         */
        protected void validateErrMessages(java.lang.String[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ErrMessages
         */
        public void setErrMessages(java.lang.String[] param) {
            validateErrMessages(param);

            localErrMessagesTracker = param != null;

            this.localErrMessages = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param java.lang.String
         */
        public void addErrMessages(java.lang.String param) {
            if (localErrMessages == null) {
                localErrMessages = new java.lang.String[] {  };
            }

            //update the setting tracker
            localErrMessagesTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localErrMessages);
            list.add(param);
            this.localErrMessages = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);
        }

        public boolean isProcessingTypeSpecified() {
            return localProcessingTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProcessingType() {
            return localProcessingType;
        }

        /**
         * Auto generated setter method
         * @param param ProcessingType
         */
        public void setProcessingType(java.lang.String param) {
            localProcessingTypeTracker = param != null;

            this.localProcessingType = param;
        }

        public boolean isIssueCreatedIDSpecified() {
            return localIssueCreatedIDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIssueCreatedID() {
            return localIssueCreatedID;
        }

        /**
         * Auto generated setter method
         * @param param IssueCreatedID
         */
        public void setIssueCreatedID(java.lang.String param) {
            localIssueCreatedIDTracker = param != null;

            this.localIssueCreatedID = param;
        }

        public boolean isOptionalInfoSpecified() {
            return localOptionalInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String[]
         */
        public java.lang.String[] getOptionalInfo() {
            return localOptionalInfo;
        }

        /**
         * validate the array for OptionalInfo
         */
        protected void validateOptionalInfo(java.lang.String[] param) {
        }

        /**
         * Auto generated setter method
         * @param param OptionalInfo
         */
        public void setOptionalInfo(java.lang.String[] param) {
            validateOptionalInfo(param);

            localOptionalInfoTracker = param != null;

            this.localOptionalInfo = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param java.lang.String
         */
        public void addOptionalInfo(java.lang.String param) {
            if (localOptionalInfo == null) {
                localOptionalInfo = new java.lang.String[] {  };
            }

            //update the setting tracker
            localOptionalInfoTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localOptionalInfo);
            list.add(param);
            this.localOptionalInfo = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.sparta.org/ImportService/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":createAndUpdateIssueRecordResponseType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "createAndUpdateIssueRecordResponseType", xmlWriter);
                }
            }

            if (localResponseStatusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "responseStatus", xmlWriter);

                if (localResponseStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "responseStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localResponseStatus));
                }

                xmlWriter.writeEndElement();
            }

            if (localErrMessagesTracker) {
                if (localErrMessages != null) {
                    namespace = "";

                    for (int i = 0; i < localErrMessages.length; i++) {
                        if (localErrMessages[i] != null) {
                            writeStartElement(null, namespace, "errMessages",
                                xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localErrMessages[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "errMessages cannot be null!!");
                }
            }

            if (localProcessingTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "processingType", xmlWriter);

                if (localProcessingType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "processingType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProcessingType);
                }

                xmlWriter.writeEndElement();
            }

            if (localIssueCreatedIDTracker) {
                namespace = "";
                writeStartElement(null, namespace, "issueCreatedID", xmlWriter);

                if (localIssueCreatedID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "issueCreatedID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIssueCreatedID);
                }

                xmlWriter.writeEndElement();
            }

            if (localOptionalInfoTracker) {
                if (localOptionalInfo != null) {
                    namespace = "";

                    for (int i = 0; i < localOptionalInfo.length; i++) {
                        if (localOptionalInfo[i] != null) {
                            writeStartElement(null, namespace, "optionalInfo",
                                xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localOptionalInfo[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "optionalInfo cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.sparta.org/ImportService/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateAndUpdateIssueRecordResponseType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateAndUpdateIssueRecordResponseType object = new CreateAndUpdateIssueRecordResponseType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"createAndUpdateIssueRecordResponseType".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CreateAndUpdateIssueRecordResponseType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    java.util.ArrayList list5 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "responseStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "responseStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setResponseStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "errMessages").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list2.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone2 = false;

                        while (!loopDone2) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone2 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "errMessages").equals(
                                            reader.getName())) {
                                    list2.add(reader.getElementText());
                                } else {
                                    loopDone2 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setErrMessages((java.lang.String[]) list2.toArray(
                                new java.lang.String[list2.size()]));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "processingType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "processingType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProcessingType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "issueCreatedID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "issueCreatedID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIssueCreatedID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "optionalInfo").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list5.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone5 = false;

                        while (!loopDone5) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone5 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "optionalInfo").equals(
                                            reader.getName())) {
                                    list5.add(reader.getElementText());
                                } else {
                                    loopDone5 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setOptionalInfo((java.lang.String[]) list5.toArray(
                                new java.lang.String[list5.size()]));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateAndUpdateCaseRecordResponseType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = createAndUpdateCaseRecordResponseType
           Namespace URI = http://www.sparta.org/ImportService/
           Namespace Prefix =
         */

        /**
         * field for ResponseStatus
         */
        protected java.math.BigInteger localResponseStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResponseStatusTracker = false;

        /**
         * field for ErrMessages
         * This was an Array!
         */
        protected java.lang.String[] localErrMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErrMessagesTracker = false;

        /**
         * field for ProcessingType
         */
        protected java.lang.String localProcessingType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProcessingTypeTracker = false;

        /**
         * field for CaseCreatedID
         */
        protected java.lang.String localCaseCreatedID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCaseCreatedIDTracker = false;

        /**
         * field for OptionalInfo
         * This was an Array!
         */
        protected java.lang.String[] localOptionalInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOptionalInfoTracker = false;

        public boolean isResponseStatusSpecified() {
            return localResponseStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getResponseStatus() {
            return localResponseStatus;
        }

        /**
         * Auto generated setter method
         * @param param ResponseStatus
         */
        public void setResponseStatus(java.math.BigInteger param) {
            localResponseStatusTracker = param != null;

            this.localResponseStatus = param;
        }

        public boolean isErrMessagesSpecified() {
            return localErrMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String[]
         */
        public java.lang.String[] getErrMessages() {
            return localErrMessages;
        }

        /**
         * validate the array for ErrMessages
         */
        protected void validateErrMessages(java.lang.String[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ErrMessages
         */
        public void setErrMessages(java.lang.String[] param) {
            validateErrMessages(param);

            localErrMessagesTracker = param != null;

            this.localErrMessages = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param java.lang.String
         */
        public void addErrMessages(java.lang.String param) {
            if (localErrMessages == null) {
                localErrMessages = new java.lang.String[] {  };
            }

            //update the setting tracker
            localErrMessagesTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localErrMessages);
            list.add(param);
            this.localErrMessages = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);
        }

        public boolean isProcessingTypeSpecified() {
            return localProcessingTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProcessingType() {
            return localProcessingType;
        }

        /**
         * Auto generated setter method
         * @param param ProcessingType
         */
        public void setProcessingType(java.lang.String param) {
            localProcessingTypeTracker = param != null;

            this.localProcessingType = param;
        }

        public boolean isCaseCreatedIDSpecified() {
            return localCaseCreatedIDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCaseCreatedID() {
            return localCaseCreatedID;
        }

        /**
         * Auto generated setter method
         * @param param CaseCreatedID
         */
        public void setCaseCreatedID(java.lang.String param) {
            localCaseCreatedIDTracker = param != null;

            this.localCaseCreatedID = param;
        }

        public boolean isOptionalInfoSpecified() {
            return localOptionalInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String[]
         */
        public java.lang.String[] getOptionalInfo() {
            return localOptionalInfo;
        }

        /**
         * validate the array for OptionalInfo
         */
        protected void validateOptionalInfo(java.lang.String[] param) {
        }

        /**
         * Auto generated setter method
         * @param param OptionalInfo
         */
        public void setOptionalInfo(java.lang.String[] param) {
            validateOptionalInfo(param);

            localOptionalInfoTracker = param != null;

            this.localOptionalInfo = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param java.lang.String
         */
        public void addOptionalInfo(java.lang.String param) {
            if (localOptionalInfo == null) {
                localOptionalInfo = new java.lang.String[] {  };
            }

            //update the setting tracker
            localOptionalInfoTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localOptionalInfo);
            list.add(param);
            this.localOptionalInfo = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.sparta.org/ImportService/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":createAndUpdateCaseRecordResponseType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "createAndUpdateCaseRecordResponseType", xmlWriter);
                }
            }

            if (localResponseStatusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "responseStatus", xmlWriter);

                if (localResponseStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "responseStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localResponseStatus));
                }

                xmlWriter.writeEndElement();
            }

            if (localErrMessagesTracker) {
                if (localErrMessages != null) {
                    namespace = "";

                    for (int i = 0; i < localErrMessages.length; i++) {
                        if (localErrMessages[i] != null) {
                            writeStartElement(null, namespace, "errMessages",
                                xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localErrMessages[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "errMessages cannot be null!!");
                }
            }

            if (localProcessingTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "processingType", xmlWriter);

                if (localProcessingType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "processingType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProcessingType);
                }

                xmlWriter.writeEndElement();
            }

            if (localCaseCreatedIDTracker) {
                namespace = "";
                writeStartElement(null, namespace, "caseCreatedID", xmlWriter);

                if (localCaseCreatedID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "caseCreatedID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCaseCreatedID);
                }

                xmlWriter.writeEndElement();
            }

            if (localOptionalInfoTracker) {
                if (localOptionalInfo != null) {
                    namespace = "";

                    for (int i = 0; i < localOptionalInfo.length; i++) {
                        if (localOptionalInfo[i] != null) {
                            writeStartElement(null, namespace, "optionalInfo",
                                xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localOptionalInfo[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "optionalInfo cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.sparta.org/ImportService/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateAndUpdateCaseRecordResponseType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateAndUpdateCaseRecordResponseType object = new CreateAndUpdateCaseRecordResponseType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"createAndUpdateCaseRecordResponseType".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CreateAndUpdateCaseRecordResponseType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    java.util.ArrayList list5 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "responseStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "responseStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setResponseStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "errMessages").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list2.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone2 = false;

                        while (!loopDone2) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone2 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "errMessages").equals(
                                            reader.getName())) {
                                    list2.add(reader.getElementText());
                                } else {
                                    loopDone2 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setErrMessages((java.lang.String[]) list2.toArray(
                                new java.lang.String[list2.size()]));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "processingType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "processingType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProcessingType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "caseCreatedID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "caseCreatedID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCaseCreatedID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "optionalInfo").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list5.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone5 = false;

                        while (!loopDone5) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone5 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "optionalInfo").equals(
                                            reader.getName())) {
                                    list5.add(reader.getElementText());
                                } else {
                                    loopDone5 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setOptionalInfo((java.lang.String[]) list5.toArray(
                                new java.lang.String[list5.size()]));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class PotentialFinancialRisk_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = PotentialFinancialRisk_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for AmountFinancialRisk
         */
        protected long localAmountFinancialRisk;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAmountFinancialRiskTracker = false;

        /**
         * field for CurrencyTypeFinancialRisk
         */
        protected org.apache.axis2.databinding.types.Token localCurrencyTypeFinancialRisk;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCurrencyTypeFinancialRiskTracker = false;

        /**
         * field for TypeOfPotentialFinanRisk
         */
        protected org.apache.axis2.databinding.types.Token localTypeOfPotentialFinanRisk;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfPotentialFinanRiskTracker = false;

        /**
         * field for PotentialFinanRiskDetails
         */
        protected java.lang.String localPotentialFinanRiskDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPotentialFinanRiskDetailsTracker = false;

        public boolean isAmountFinancialRiskSpecified() {
            return localAmountFinancialRiskTracker;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getAmountFinancialRisk() {
            return localAmountFinancialRisk;
        }

        /**
         * Auto generated setter method
         * @param param AmountFinancialRisk
         */
        public void setAmountFinancialRisk(long param) {
            // setting primitive attribute tracker to true
            localAmountFinancialRiskTracker = param != java.lang.Long.MIN_VALUE;

            this.localAmountFinancialRisk = param;
        }

        public boolean isCurrencyTypeFinancialRiskSpecified() {
            return localCurrencyTypeFinancialRiskTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCurrencyTypeFinancialRisk() {
            return localCurrencyTypeFinancialRisk;
        }

        /**
         * Auto generated setter method
         * @param param CurrencyTypeFinancialRisk
         */
        public void setCurrencyTypeFinancialRisk(
            org.apache.axis2.databinding.types.Token param) {
            localCurrencyTypeFinancialRiskTracker = param != null;

            this.localCurrencyTypeFinancialRisk = param;
        }

        public boolean isTypeOfPotentialFinanRiskSpecified() {
            return localTypeOfPotentialFinanRiskTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTypeOfPotentialFinanRisk() {
            return localTypeOfPotentialFinanRisk;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfPotentialFinanRisk
         */
        public void setTypeOfPotentialFinanRisk(
            org.apache.axis2.databinding.types.Token param) {
            localTypeOfPotentialFinanRiskTracker = param != null;

            this.localTypeOfPotentialFinanRisk = param;
        }

        public boolean isPotentialFinanRiskDetailsSpecified() {
            return localPotentialFinanRiskDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPotentialFinanRiskDetails() {
            return localPotentialFinanRiskDetails;
        }

        /**
         * Auto generated setter method
         * @param param PotentialFinanRiskDetails
         */
        public void setPotentialFinanRiskDetails(java.lang.String param) {
            localPotentialFinanRiskDetailsTracker = param != null;

            this.localPotentialFinanRiskDetails = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":PotentialFinancialRisk_type0",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "PotentialFinancialRisk_type0", xmlWriter);
                }
            }

            if (localAmountFinancialRiskTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AmountFinancialRisk",
                    xmlWriter);

                if (localAmountFinancialRisk == java.lang.Long.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AmountFinancialRisk cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAmountFinancialRisk));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyTypeFinancialRiskTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CurrencyTypeFinancialRisk",
                    xmlWriter);

                if (localCurrencyTypeFinancialRisk == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CurrencyTypeFinancialRisk cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCurrencyTypeFinancialRisk));
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfPotentialFinanRiskTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfPotentialFinanRisk",
                    xmlWriter);

                if (localTypeOfPotentialFinanRisk == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfPotentialFinanRisk cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTypeOfPotentialFinanRisk));
                }

                xmlWriter.writeEndElement();
            }

            if (localPotentialFinanRiskDetailsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PotentialFinanRiskDetails",
                    xmlWriter);

                if (localPotentialFinanRiskDetails == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PotentialFinanRiskDetails cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPotentialFinanRiskDetails);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static PotentialFinancialRisk_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                PotentialFinancialRisk_type0 object = new PotentialFinancialRisk_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"PotentialFinancialRisk_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (PotentialFinancialRisk_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "AmountFinancialRisk").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "AmountFinancialRisk" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAmountFinancialRisk(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "CurrencyTypeFinancialRisk").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "CurrencyTypeFinancialRisk" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setCurrencyTypeFinancialRisk(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TypeOfPotentialFinanRisk").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "TypeOfPotentialFinanRisk" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTypeOfPotentialFinanRisk(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "PotentialFinanRiskDetails").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "PotentialFinanRiskDetails" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setPotentialFinanRiskDetails(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EmailTypeSequence implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = emailTypeSequence
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for CaseId
         */
        protected org.apache.axis2.databinding.types.Token localCaseId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCaseIdTracker = false;

        /**
         * field for CreationDate
         */
        protected java.util.Calendar localCreationDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreationDateTracker = false;

        /**
         * field for FromPerson
         */
        protected CaseAddressListType localFromPerson;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromPersonTracker = false;

        /**
         * field for ToPersons
         * This was an Array!
         */
        protected CaseAddressListType[] localToPersons;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToPersonsTracker = false;

        /**
         * field for CCPersons
         * This was an Array!
         */
        protected CaseAddressListType[] localCCPersons;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCCPersonsTracker = false;

        /**
         * field for Title
         */
        protected org.apache.axis2.databinding.types.Token localTitle;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTitleTracker = false;

        /**
         * field for Body
         */
        protected org.apache.axis2.databinding.types.Token localBody;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBodyTracker = false;

        /**
         * field for AttachedDocuments
         * This was an Array!
         */
        protected AttachedDocumentsType[] localAttachedDocuments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttachedDocumentsTracker = false;

        public boolean isCaseIdSpecified() {
            return localCaseIdTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCaseId() {
            return localCaseId;
        }

        /**
         * Auto generated setter method
         * @param param CaseId
         */
        public void setCaseId(org.apache.axis2.databinding.types.Token param) {
            localCaseIdTracker = param != null;

            this.localCaseId = param;
        }

        public boolean isCreationDateSpecified() {
            return localCreationDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getCreationDate() {
            return localCreationDate;
        }

        /**
         * Auto generated setter method
         * @param param CreationDate
         */
        public void setCreationDate(java.util.Calendar param) {
            localCreationDateTracker = param != null;

            this.localCreationDate = param;
        }

        public boolean isFromPersonSpecified() {
            return localFromPersonTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType
         */
        public CaseAddressListType getFromPerson() {
            return localFromPerson;
        }

        /**
         * Auto generated setter method
         * @param param FromPerson
         */
        public void setFromPerson(CaseAddressListType param) {
            localFromPersonTracker = param != null;

            this.localFromPerson = param;
        }

        public boolean isToPersonsSpecified() {
            return localToPersonsTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType[]
         */
        public CaseAddressListType[] getToPersons() {
            return localToPersons;
        }

        /**
         * validate the array for ToPersons
         */
        protected void validateToPersons(CaseAddressListType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ToPersons
         */
        public void setToPersons(CaseAddressListType[] param) {
            validateToPersons(param);

            localToPersonsTracker = param != null;

            this.localToPersons = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param CaseAddressListType
         */
        public void addToPersons(CaseAddressListType param) {
            if (localToPersons == null) {
                localToPersons = new CaseAddressListType[] {  };
            }

            //update the setting tracker
            localToPersonsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localToPersons);
            list.add(param);
            this.localToPersons = (CaseAddressListType[]) list.toArray(new CaseAddressListType[list.size()]);
        }

        public boolean isCCPersonsSpecified() {
            return localCCPersonsTracker;
        }

        /**
         * Auto generated getter method
         * @return CaseAddressListType[]
         */
        public CaseAddressListType[] getCCPersons() {
            return localCCPersons;
        }

        /**
         * validate the array for CCPersons
         */
        protected void validateCCPersons(CaseAddressListType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param CCPersons
         */
        public void setCCPersons(CaseAddressListType[] param) {
            validateCCPersons(param);

            localCCPersonsTracker = param != null;

            this.localCCPersons = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param CaseAddressListType
         */
        public void addCCPersons(CaseAddressListType param) {
            if (localCCPersons == null) {
                localCCPersons = new CaseAddressListType[] {  };
            }

            //update the setting tracker
            localCCPersonsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localCCPersons);
            list.add(param);
            this.localCCPersons = (CaseAddressListType[]) list.toArray(new CaseAddressListType[list.size()]);
        }

        public boolean isTitleSpecified() {
            return localTitleTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTitle() {
            return localTitle;
        }

        /**
         * Auto generated setter method
         * @param param Title
         */
        public void setTitle(org.apache.axis2.databinding.types.Token param) {
            localTitleTracker = param != null;

            this.localTitle = param;
        }

        public boolean isBodySpecified() {
            return localBodyTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getBody() {
            return localBody;
        }

        /**
         * Auto generated setter method
         * @param param Body
         */
        public void setBody(org.apache.axis2.databinding.types.Token param) {
            localBodyTracker = param != null;

            this.localBody = param;
        }

        public boolean isAttachedDocumentsSpecified() {
            return localAttachedDocumentsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachedDocumentsType[]
         */
        public AttachedDocumentsType[] getAttachedDocuments() {
            return localAttachedDocuments;
        }

        /**
         * validate the array for AttachedDocuments
         */
        protected void validateAttachedDocuments(AttachedDocumentsType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param AttachedDocuments
         */
        public void setAttachedDocuments(AttachedDocumentsType[] param) {
            validateAttachedDocuments(param);

            localAttachedDocumentsTracker = param != null;

            this.localAttachedDocuments = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param AttachedDocumentsType
         */
        public void addAttachedDocuments(AttachedDocumentsType param) {
            if (localAttachedDocuments == null) {
                localAttachedDocuments = new AttachedDocumentsType[] {  };
            }

            //update the setting tracker
            localAttachedDocumentsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAttachedDocuments);
            list.add(param);
            this.localAttachedDocuments = (AttachedDocumentsType[]) list.toArray(new AttachedDocumentsType[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":emailTypeSequence", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "emailTypeSequence", xmlWriter);
                }
            }

            if (localCaseIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CaseId", xmlWriter);

                if (localCaseId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CaseId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCaseId));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreationDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CreationDate", xmlWriter);

                if (localCreationDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CreationDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreationDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localFromPersonTracker) {
                if (localFromPerson == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "FromPerson cannot be null!!");
                }

                localFromPerson.serialize(new javax.xml.namespace.QName("",
                        "FromPerson"), xmlWriter);
            }

            if (localToPersonsTracker) {
                if (localToPersons != null) {
                    for (int i = 0; i < localToPersons.length; i++) {
                        if (localToPersons[i] != null) {
                            localToPersons[i].serialize(new javax.xml.namespace.QName(
                                    "", "ToPersons"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ToPersons cannot be null!!");
                }
            }

            if (localCCPersonsTracker) {
                if (localCCPersons != null) {
                    for (int i = 0; i < localCCPersons.length; i++) {
                        if (localCCPersons[i] != null) {
                            localCCPersons[i].serialize(new javax.xml.namespace.QName(
                                    "", "CCPersons"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "CCPersons cannot be null!!");
                }
            }

            if (localTitleTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Title", xmlWriter);

                if (localTitle == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Title cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTitle));
                }

                xmlWriter.writeEndElement();
            }

            if (localBodyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Body", xmlWriter);

                if (localBody == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Body cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBody));
                }

                xmlWriter.writeEndElement();
            }

            if (localAttachedDocumentsTracker) {
                if (localAttachedDocuments != null) {
                    for (int i = 0; i < localAttachedDocuments.length; i++) {
                        if (localAttachedDocuments[i] != null) {
                            localAttachedDocuments[i].serialize(new javax.xml.namespace.QName(
                                    "", "AttachedDocuments"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AttachedDocuments cannot be null!!");
                }
            }
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EmailTypeSequence parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EmailTypeSequence object = new EmailTypeSequence();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    java.util.ArrayList list4 = new java.util.ArrayList();

                    java.util.ArrayList list5 = new java.util.ArrayList();

                    java.util.ArrayList list8 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CaseId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CaseId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCaseId(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CreationDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CreationDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreationDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "FromPerson").equals(
                                reader.getName())) {
                        object.setFromPerson(CaseAddressListType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ToPersons").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list4.add(CaseAddressListType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone4 = false;

                        while (!loopDone4) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone4 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "ToPersons").equals(
                                            reader.getName())) {
                                    list4.add(CaseAddressListType.Factory.parse(
                                            reader));
                                } else {
                                    loopDone4 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setToPersons((CaseAddressListType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                CaseAddressListType.class, list4));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CCPersons").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list5.add(CaseAddressListType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone5 = false;

                        while (!loopDone5) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone5 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "CCPersons").equals(
                                            reader.getName())) {
                                    list5.add(CaseAddressListType.Factory.parse(
                                            reader));
                                } else {
                                    loopDone5 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setCCPersons((CaseAddressListType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                CaseAddressListType.class, list5));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Title").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Title" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Body").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Body" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBody(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "AttachedDocuments").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list8.add(AttachedDocumentsType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone8 = false;

                        while (!loopDone8) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone8 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "AttachedDocuments").equals(
                                            reader.getName())) {
                                    list8.add(AttachedDocumentsType.Factory.parse(
                                            reader));
                                } else {
                                    loopDone8 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setAttachedDocuments((AttachedDocumentsType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                AttachedDocumentsType.class, list8));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ImportCase implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://cairnew.bcs.cnb/",
                "importCase", "");

        /**
         * field for ImportCase
         */
        protected ImportCaseType localImportCase;

        /**
         * Auto generated getter method
         * @return ImportCaseType
         */
        public ImportCaseType getImportCase() {
            return localImportCase;
        }

        /**
         * Auto generated setter method
         * @param param ImportCase
         */
        public void setImportCase(ImportCaseType param) {
            this.localImportCase = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localImportCase == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "importCase cannot be null!");
            }

            localImportCase.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ImportCase parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ImportCase object = new ImportCase();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://cairnew.bcs.cnb/", "importCase").equals(
                                        reader.getName())) {
                                object.setImportCase(ImportCaseType.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class WildLifeDetails_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = WildLifeDetails_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for NameOfWildLifeAnimal
         */
        protected org.apache.axis2.databinding.types.Token localNameOfWildLifeAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNameOfWildLifeAnimalTracker = false;

        /**
         * field for ScientificName
         */
        protected org.apache.axis2.databinding.types.Token localScientificName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localScientificNameTracker = false;

        /**
         * field for BreedSpeciesWildLife
         */
        protected java.lang.String localBreedSpeciesWildLife;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBreedSpeciesWildLifeTracker = false;

        /**
         * field for TypeOfWildLifeAnimal
         */
        protected java.lang.String localTypeOfWildLifeAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfWildLifeAnimalTracker = false;

        /**
         * field for NumberOfAffectedAnimalsWL
         */
        protected java.math.BigInteger localNumberOfAffectedAnimalsWL;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberOfAffectedAnimalsWLTracker = false;

        /**
         * field for NumberOfDeadAnimalsWL
         */
        protected java.math.BigInteger localNumberOfDeadAnimalsWL;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberOfDeadAnimalsWLTracker = false;

        public boolean isNameOfWildLifeAnimalSpecified() {
            return localNameOfWildLifeAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getNameOfWildLifeAnimal() {
            return localNameOfWildLifeAnimal;
        }

        /**
         * Auto generated setter method
         * @param param NameOfWildLifeAnimal
         */
        public void setNameOfWildLifeAnimal(
            org.apache.axis2.databinding.types.Token param) {
            localNameOfWildLifeAnimalTracker = param != null;

            this.localNameOfWildLifeAnimal = param;
        }

        public boolean isScientificNameSpecified() {
            return localScientificNameTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getScientificName() {
            return localScientificName;
        }

        /**
         * Auto generated setter method
         * @param param ScientificName
         */
        public void setScientificName(
            org.apache.axis2.databinding.types.Token param) {
            localScientificNameTracker = param != null;

            this.localScientificName = param;
        }

        public boolean isBreedSpeciesWildLifeSpecified() {
            return localBreedSpeciesWildLifeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBreedSpeciesWildLife() {
            return localBreedSpeciesWildLife;
        }

        /**
         * Auto generated setter method
         * @param param BreedSpeciesWildLife
         */
        public void setBreedSpeciesWildLife(java.lang.String param) {
            localBreedSpeciesWildLifeTracker = param != null;

            this.localBreedSpeciesWildLife = param;
        }

        public boolean isTypeOfWildLifeAnimalSpecified() {
            return localTypeOfWildLifeAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTypeOfWildLifeAnimal() {
            return localTypeOfWildLifeAnimal;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfWildLifeAnimal
         */
        public void setTypeOfWildLifeAnimal(java.lang.String param) {
            localTypeOfWildLifeAnimalTracker = param != null;

            this.localTypeOfWildLifeAnimal = param;
        }

        public boolean isNumberOfAffectedAnimalsWLSpecified() {
            return localNumberOfAffectedAnimalsWLTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getNumberOfAffectedAnimalsWL() {
            return localNumberOfAffectedAnimalsWL;
        }

        /**
         * Auto generated setter method
         * @param param NumberOfAffectedAnimalsWL
         */
        public void setNumberOfAffectedAnimalsWL(java.math.BigInteger param) {
            localNumberOfAffectedAnimalsWLTracker = param != null;

            this.localNumberOfAffectedAnimalsWL = param;
        }

        public boolean isNumberOfDeadAnimalsWLSpecified() {
            return localNumberOfDeadAnimalsWLTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getNumberOfDeadAnimalsWL() {
            return localNumberOfDeadAnimalsWL;
        }

        /**
         * Auto generated setter method
         * @param param NumberOfDeadAnimalsWL
         */
        public void setNumberOfDeadAnimalsWL(java.math.BigInteger param) {
            localNumberOfDeadAnimalsWLTracker = param != null;

            this.localNumberOfDeadAnimalsWL = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":WildLifeDetails_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "WildLifeDetails_type0", xmlWriter);
                }
            }

            if (localNameOfWildLifeAnimalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NameOfWildLifeAnimal",
                    xmlWriter);

                if (localNameOfWildLifeAnimal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NameOfWildLifeAnimal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNameOfWildLifeAnimal));
                }

                xmlWriter.writeEndElement();
            }

            if (localScientificNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ScientificName", xmlWriter);

                if (localScientificName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ScientificName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localScientificName));
                }

                xmlWriter.writeEndElement();
            }

            if (localBreedSpeciesWildLifeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "BreedSpeciesWildLife",
                    xmlWriter);

                if (localBreedSpeciesWildLife == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BreedSpeciesWildLife cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBreedSpeciesWildLife);
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfWildLifeAnimalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfWildLifeAnimal",
                    xmlWriter);

                if (localTypeOfWildLifeAnimal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfWildLifeAnimal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTypeOfWildLifeAnimal);
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberOfAffectedAnimalsWLTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NumberOfAffectedAnimalsWL",
                    xmlWriter);

                if (localNumberOfAffectedAnimalsWL == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NumberOfAffectedAnimalsWL cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNumberOfAffectedAnimalsWL));
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberOfDeadAnimalsWLTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NumberOfDeadAnimalsWL",
                    xmlWriter);

                if (localNumberOfDeadAnimalsWL == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NumberOfDeadAnimalsWL cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNumberOfDeadAnimalsWL));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static WildLifeDetails_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                WildLifeDetails_type0 object = new WildLifeDetails_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"WildLifeDetails_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (WildLifeDetails_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "NameOfWildLifeAnimal").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "NameOfWildLifeAnimal" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setNameOfWildLifeAnimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ScientificName").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ScientificName" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setScientificName(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "BreedSpeciesWildLife").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "BreedSpeciesWildLife" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setBreedSpeciesWildLife(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TypeOfWildLifeAnimal").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "TypeOfWildLifeAnimal" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTypeOfWildLifeAnimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "NumberOfAffectedAnimalsWL").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "NumberOfAffectedAnimalsWL" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setNumberOfAffectedAnimalsWL(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "NumberOfDeadAnimalsWL").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "NumberOfDeadAnimalsWL" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setNumberOfDeadAnimalsWL(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateAndUpdateCaseRecordResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.sparta.org/ImportService/",
                "createAndUpdateCaseRecordResponse", "");

        /**
         * field for CreateAndUpdateCaseRecordResponse
         */
        protected CreateAndUpdateCaseRecordResponseType localCreateAndUpdateCaseRecordResponse;

        /**
         * Auto generated getter method
         * @return CreateAndUpdateCaseRecordResponseType
         */
        public CreateAndUpdateCaseRecordResponseType getCreateAndUpdateCaseRecordResponse() {
            return localCreateAndUpdateCaseRecordResponse;
        }

        /**
         * Auto generated setter method
         * @param param CreateAndUpdateCaseRecordResponse
         */
        public void setCreateAndUpdateCaseRecordResponse(
            CreateAndUpdateCaseRecordResponseType param) {
            this.localCreateAndUpdateCaseRecordResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localCreateAndUpdateCaseRecordResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "createAndUpdateCaseRecordResponse cannot be null!");
            }

            localCreateAndUpdateCaseRecordResponse.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.sparta.org/ImportService/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateAndUpdateCaseRecordResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateAndUpdateCaseRecordResponse object = new CreateAndUpdateCaseRecordResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://www.sparta.org/ImportService/",
                                        "createAndUpdateCaseRecordResponse").equals(
                                        reader.getName())) {
                                object.setCreateAndUpdateCaseRecordResponse(CreateAndUpdateCaseRecordResponseType.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ExtensionMapper {
        public static java.lang.Object getTypeObject(
            java.lang.String namespaceURI, java.lang.String typeName,
            javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
            if ("http://www.sparta.org/ImportService/".equals(namespaceURI) &&
                    "createAndUpdateIssueRecordResponseType".equals(typeName)) {
                return CreateAndUpdateIssueRecordResponseType.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "AuthorityReporting_type0".equals(typeName)) {
                return AuthorityReporting_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "Deficiency_type0".equals(typeName)) {
                return Deficiency_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "DetailsOfInfectionInfest_type0".equals(typeName)) {
                return DetailsOfInfectionInfest_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "PriorAppliedProducts_type0".equals(typeName)) {
                return PriorAppliedProducts_type0.Factory.parse(reader);
            }

            if ("http://www.sparta.org/ImportService/".equals(namespaceURI) &&
                    "createCorrespondenceRecordResponseType".equals(typeName)) {
                return CreateCorrespondenceRecordResponseType.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "caseAddressListType".equals(typeName)) {
                return CaseAddressListType.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "emailType".equals(typeName)) {
                return EmailType.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "importIssueType".equals(typeName)) {
                return ImportIssueType.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "AffectedPersonInformation_type0".equals(typeName)) {
                return AffectedPersonInformation_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "attachedDocumentsType".equals(typeName)) {
                return AttachedDocumentsType.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "Exposures_type0".equals(typeName)) {
                return Exposures_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "PotentialFinancialRisk_type0".equals(typeName)) {
                return PotentialFinancialRisk_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "WildLifeDetails_type0".equals(typeName)) {
                return WildLifeDetails_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "FirstAid_type0".equals(typeName)) {
                return FirstAid_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "ActualCosts_type0".equals(typeName)) {
                return ActualCosts_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "DomesticAnimal_type0".equals(typeName)) {
                return DomesticAnimal_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "Irrigation_type0".equals(typeName)) {
                return Irrigation_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "ExposureDetailsList_type0".equals(typeName)) {
                return ExposureDetailsList_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "AnalyticalInformation_type0".equals(typeName)) {
                return AnalyticalInformation_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "importCaseType".equals(typeName)) {
                return ImportCaseType.Factory.parse(reader);
            }

            if ("http://www.sparta.org/ImportService/".equals(namespaceURI) &&
                    "createAndUpdateCaseRecordResponseType".equals(typeName)) {
                return CreateAndUpdateCaseRecordResponseType.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "Applications_type0".equals(typeName)) {
                return Applications_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "FormulationDetails_type0".equals(typeName)) {
                return FormulationDetails_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "Packaging_type0".equals(typeName)) {
                return Packaging_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "Circumstances_type0".equals(typeName)) {
                return Circumstances_type0.Factory.parse(reader);
            }

            if ("http://cairnew.bcs.cnb/".equals(namespaceURI) &&
                    "Symptoms_type0".equals(typeName)) {
                return Symptoms_type0.Factory.parse(reader);
            }

            throw new org.apache.axis2.databinding.ADBException(
                "Unsupported type " + namespaceURI + " " + typeName);
        }
    }

    public static class FirstAid_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = FirstAid_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for IdentifierName
         */
        protected org.apache.axis2.databinding.types.Token localIdentifierName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdentifierNameTracker = false;

        /**
         * field for FirstAidMedicalTreatment
         */
        protected org.apache.axis2.databinding.types.Token localFirstAidMedicalTreatment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstAidMedicalTreatmentTracker = false;

        /**
         * field for TypeOfMedicalTreatment
         */
        protected org.apache.axis2.databinding.types.Token localTypeOfMedicalTreatment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfMedicalTreatmentTracker = false;

        /**
         * field for DecontaminationProcedures
         */
        protected org.apache.axis2.databinding.types.Token localDecontaminationProcedures;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDecontaminationProceduresTracker = false;

        public boolean isIdentifierNameSpecified() {
            return localIdentifierNameTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIdentifierName() {
            return localIdentifierName;
        }

        /**
         * Auto generated setter method
         * @param param IdentifierName
         */
        public void setIdentifierName(
            org.apache.axis2.databinding.types.Token param) {
            localIdentifierNameTracker = param != null;

            this.localIdentifierName = param;
        }

        public boolean isFirstAidMedicalTreatmentSpecified() {
            return localFirstAidMedicalTreatmentTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getFirstAidMedicalTreatment() {
            return localFirstAidMedicalTreatment;
        }

        /**
         * Auto generated setter method
         * @param param FirstAidMedicalTreatment
         */
        public void setFirstAidMedicalTreatment(
            org.apache.axis2.databinding.types.Token param) {
            localFirstAidMedicalTreatmentTracker = param != null;

            this.localFirstAidMedicalTreatment = param;
        }

        public boolean isTypeOfMedicalTreatmentSpecified() {
            return localTypeOfMedicalTreatmentTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTypeOfMedicalTreatment() {
            return localTypeOfMedicalTreatment;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfMedicalTreatment
         */
        public void setTypeOfMedicalTreatment(
            org.apache.axis2.databinding.types.Token param) {
            localTypeOfMedicalTreatmentTracker = param != null;

            this.localTypeOfMedicalTreatment = param;
        }

        public boolean isDecontaminationProceduresSpecified() {
            return localDecontaminationProceduresTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getDecontaminationProcedures() {
            return localDecontaminationProcedures;
        }

        /**
         * Auto generated setter method
         * @param param DecontaminationProcedures
         */
        public void setDecontaminationProcedures(
            org.apache.axis2.databinding.types.Token param) {
            localDecontaminationProceduresTracker = param != null;

            this.localDecontaminationProcedures = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":FirstAid_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "FirstAid_type0", xmlWriter);
                }
            }

            if (localIdentifierNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IdentifierName", xmlWriter);

                if (localIdentifierName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IdentifierName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIdentifierName));
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstAidMedicalTreatmentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FirstAidMedicalTreatment",
                    xmlWriter);

                if (localFirstAidMedicalTreatment == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FirstAidMedicalTreatment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFirstAidMedicalTreatment));
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfMedicalTreatmentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfMedicalTreatment",
                    xmlWriter);

                if (localTypeOfMedicalTreatment == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfMedicalTreatment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTypeOfMedicalTreatment));
                }

                xmlWriter.writeEndElement();
            }

            if (localDecontaminationProceduresTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DecontaminationProcedures",
                    xmlWriter);

                if (localDecontaminationProcedures == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DecontaminationProcedures cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDecontaminationProcedures));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static FirstAid_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                FirstAid_type0 object = new FirstAid_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"FirstAid_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (FirstAid_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "IdentifierName").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "IdentifierName" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setIdentifierName(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "FirstAidMedicalTreatment").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "FirstAidMedicalTreatment" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setFirstAidMedicalTreatment(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TypeOfMedicalTreatment").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "TypeOfMedicalTreatment" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTypeOfMedicalTreatment(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "DecontaminationProcedures").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "DecontaminationProcedures" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDecontaminationProcedures(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ActualCosts_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ActualCosts_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for AmountActualCosts
         */
        protected long localAmountActualCosts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAmountActualCostsTracker = false;

        /**
         * field for CurrencyTypeActualCosts
         */
        protected org.apache.axis2.databinding.types.Token localCurrencyTypeActualCosts;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCurrencyTypeActualCostsTracker = false;

        /**
         * field for TypeOfActualCost
         */
        protected org.apache.axis2.databinding.types.Token localTypeOfActualCost;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfActualCostTracker = false;

        /**
         * field for ActualCostDetails
         */
        protected java.lang.String localActualCostDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localActualCostDetailsTracker = false;

        public boolean isAmountActualCostsSpecified() {
            return localAmountActualCostsTracker;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getAmountActualCosts() {
            return localAmountActualCosts;
        }

        /**
         * Auto generated setter method
         * @param param AmountActualCosts
         */
        public void setAmountActualCosts(long param) {
            // setting primitive attribute tracker to true
            localAmountActualCostsTracker = param != java.lang.Long.MIN_VALUE;

            this.localAmountActualCosts = param;
        }

        public boolean isCurrencyTypeActualCostsSpecified() {
            return localCurrencyTypeActualCostsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCurrencyTypeActualCosts() {
            return localCurrencyTypeActualCosts;
        }

        /**
         * Auto generated setter method
         * @param param CurrencyTypeActualCosts
         */
        public void setCurrencyTypeActualCosts(
            org.apache.axis2.databinding.types.Token param) {
            localCurrencyTypeActualCostsTracker = param != null;

            this.localCurrencyTypeActualCosts = param;
        }

        public boolean isTypeOfActualCostSpecified() {
            return localTypeOfActualCostTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTypeOfActualCost() {
            return localTypeOfActualCost;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfActualCost
         */
        public void setTypeOfActualCost(
            org.apache.axis2.databinding.types.Token param) {
            localTypeOfActualCostTracker = param != null;

            this.localTypeOfActualCost = param;
        }

        public boolean isActualCostDetailsSpecified() {
            return localActualCostDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getActualCostDetails() {
            return localActualCostDetails;
        }

        /**
         * Auto generated setter method
         * @param param ActualCostDetails
         */
        public void setActualCostDetails(java.lang.String param) {
            localActualCostDetailsTracker = param != null;

            this.localActualCostDetails = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ActualCosts_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ActualCosts_type0", xmlWriter);
                }
            }

            if (localAmountActualCostsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AmountActualCosts",
                    xmlWriter);

                if (localAmountActualCosts == java.lang.Long.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AmountActualCosts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAmountActualCosts));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyTypeActualCostsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CurrencyTypeActualCosts",
                    xmlWriter);

                if (localCurrencyTypeActualCosts == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CurrencyTypeActualCosts cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCurrencyTypeActualCosts));
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfActualCostTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfActualCost", xmlWriter);

                if (localTypeOfActualCost == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfActualCost cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTypeOfActualCost));
                }

                xmlWriter.writeEndElement();
            }

            if (localActualCostDetailsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ActualCostDetails",
                    xmlWriter);

                if (localActualCostDetails == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ActualCostDetails cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localActualCostDetails);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ActualCosts_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ActualCosts_type0 object = new ActualCosts_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ActualCosts_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ActualCosts_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "AmountActualCosts").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "AmountActualCosts" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAmountActualCosts(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "CurrencyTypeActualCosts").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "CurrencyTypeActualCosts" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setCurrencyTypeActualCosts(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TypeOfActualCost").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "TypeOfActualCost" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTypeOfActualCost(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ActualCostDetails").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ActualCostDetails" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setActualCostDetails(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateCorrespondenceRecordResponseType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = createCorrespondenceRecordResponseType
           Namespace URI = http://www.sparta.org/ImportService/
           Namespace Prefix =
         */

        /**
         * field for ResponseStatus
         */
        protected java.math.BigInteger localResponseStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResponseStatusTracker = false;

        /**
         * field for ErrMessages
         * This was an Array!
         */
        protected java.lang.String[] localErrMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErrMessagesTracker = false;

        /**
         * field for ProcessingType
         */
        protected java.lang.String localProcessingType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProcessingTypeTracker = false;

        /**
         * field for CaseCreatedID
         */
        protected java.lang.String localCaseCreatedID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCaseCreatedIDTracker = false;

        /**
         * field for OptionalInfo
         * This was an Array!
         */
        protected java.lang.String[] localOptionalInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOptionalInfoTracker = false;

        public boolean isResponseStatusSpecified() {
            return localResponseStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getResponseStatus() {
            return localResponseStatus;
        }

        /**
         * Auto generated setter method
         * @param param ResponseStatus
         */
        public void setResponseStatus(java.math.BigInteger param) {
            localResponseStatusTracker = param != null;

            this.localResponseStatus = param;
        }

        public boolean isErrMessagesSpecified() {
            return localErrMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String[]
         */
        public java.lang.String[] getErrMessages() {
            return localErrMessages;
        }

        /**
         * validate the array for ErrMessages
         */
        protected void validateErrMessages(java.lang.String[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ErrMessages
         */
        public void setErrMessages(java.lang.String[] param) {
            validateErrMessages(param);

            localErrMessagesTracker = param != null;

            this.localErrMessages = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param java.lang.String
         */
        public void addErrMessages(java.lang.String param) {
            if (localErrMessages == null) {
                localErrMessages = new java.lang.String[] {  };
            }

            //update the setting tracker
            localErrMessagesTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localErrMessages);
            list.add(param);
            this.localErrMessages = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);
        }

        public boolean isProcessingTypeSpecified() {
            return localProcessingTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProcessingType() {
            return localProcessingType;
        }

        /**
         * Auto generated setter method
         * @param param ProcessingType
         */
        public void setProcessingType(java.lang.String param) {
            localProcessingTypeTracker = param != null;

            this.localProcessingType = param;
        }

        public boolean isCaseCreatedIDSpecified() {
            return localCaseCreatedIDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCaseCreatedID() {
            return localCaseCreatedID;
        }

        /**
         * Auto generated setter method
         * @param param CaseCreatedID
         */
        public void setCaseCreatedID(java.lang.String param) {
            localCaseCreatedIDTracker = param != null;

            this.localCaseCreatedID = param;
        }

        public boolean isOptionalInfoSpecified() {
            return localOptionalInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String[]
         */
        public java.lang.String[] getOptionalInfo() {
            return localOptionalInfo;
        }

        /**
         * validate the array for OptionalInfo
         */
        protected void validateOptionalInfo(java.lang.String[] param) {
        }

        /**
         * Auto generated setter method
         * @param param OptionalInfo
         */
        public void setOptionalInfo(java.lang.String[] param) {
            validateOptionalInfo(param);

            localOptionalInfoTracker = param != null;

            this.localOptionalInfo = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param java.lang.String
         */
        public void addOptionalInfo(java.lang.String param) {
            if (localOptionalInfo == null) {
                localOptionalInfo = new java.lang.String[] {  };
            }

            //update the setting tracker
            localOptionalInfoTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localOptionalInfo);
            list.add(param);
            this.localOptionalInfo = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.sparta.org/ImportService/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":createCorrespondenceRecordResponseType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "createCorrespondenceRecordResponseType", xmlWriter);
                }
            }

            if (localResponseStatusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "responseStatus", xmlWriter);

                if (localResponseStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "responseStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localResponseStatus));
                }

                xmlWriter.writeEndElement();
            }

            if (localErrMessagesTracker) {
                if (localErrMessages != null) {
                    namespace = "";

                    for (int i = 0; i < localErrMessages.length; i++) {
                        if (localErrMessages[i] != null) {
                            writeStartElement(null, namespace, "errMessages",
                                xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localErrMessages[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "errMessages cannot be null!!");
                }
            }

            if (localProcessingTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "processingType", xmlWriter);

                if (localProcessingType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "processingType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProcessingType);
                }

                xmlWriter.writeEndElement();
            }

            if (localCaseCreatedIDTracker) {
                namespace = "";
                writeStartElement(null, namespace, "caseCreatedID", xmlWriter);

                if (localCaseCreatedID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "caseCreatedID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCaseCreatedID);
                }

                xmlWriter.writeEndElement();
            }

            if (localOptionalInfoTracker) {
                if (localOptionalInfo != null) {
                    namespace = "";

                    for (int i = 0; i < localOptionalInfo.length; i++) {
                        if (localOptionalInfo[i] != null) {
                            writeStartElement(null, namespace, "optionalInfo",
                                xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localOptionalInfo[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "optionalInfo cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.sparta.org/ImportService/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateCorrespondenceRecordResponseType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateCorrespondenceRecordResponseType object = new CreateCorrespondenceRecordResponseType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"createCorrespondenceRecordResponseType".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CreateCorrespondenceRecordResponseType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    java.util.ArrayList list5 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "responseStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "responseStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setResponseStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "errMessages").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list2.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone2 = false;

                        while (!loopDone2) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone2 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "errMessages").equals(
                                            reader.getName())) {
                                    list2.add(reader.getElementText());
                                } else {
                                    loopDone2 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setErrMessages((java.lang.String[]) list2.toArray(
                                new java.lang.String[list2.size()]));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "processingType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "processingType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProcessingType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "caseCreatedID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "caseCreatedID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCaseCreatedID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "optionalInfo").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list5.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone5 = false;

                        while (!loopDone5) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone5 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "optionalInfo").equals(
                                            reader.getName())) {
                                    list5.add(reader.getElementText());
                                } else {
                                    loopDone5 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setOptionalInfo((java.lang.String[]) list5.toArray(
                                new java.lang.String[list5.size()]));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ImportCaseType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = importCaseType
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for ImportCaseTypeSequence
         * This was an Array!
         */
        protected ImportCaseTypeSequence[] localImportCaseTypeSequence;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localImportCaseTypeSequenceTracker = false;

        public boolean isImportCaseTypeSequenceSpecified() {
            return localImportCaseTypeSequenceTracker;
        }

        /**
         * Auto generated getter method
         * @return ImportCaseTypeSequence[]
         */
        public ImportCaseTypeSequence[] getImportCaseTypeSequence() {
            return localImportCaseTypeSequence;
        }

        /**
         * validate the array for ImportCaseTypeSequence
         */
        protected void validateImportCaseTypeSequence(
            ImportCaseTypeSequence[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ImportCaseTypeSequence
         */
        public void setImportCaseTypeSequence(ImportCaseTypeSequence[] param) {
            validateImportCaseTypeSequence(param);

            localImportCaseTypeSequenceTracker = param != null;

            this.localImportCaseTypeSequence = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ImportCaseTypeSequence
         */
        public void addImportCaseTypeSequence(ImportCaseTypeSequence param) {
            if (localImportCaseTypeSequence == null) {
                localImportCaseTypeSequence = new ImportCaseTypeSequence[] {  };
            }

            //update the setting tracker
            localImportCaseTypeSequenceTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localImportCaseTypeSequence);
            list.add(param);
            this.localImportCaseTypeSequence = (ImportCaseTypeSequence[]) list.toArray(new ImportCaseTypeSequence[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":importCaseType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "importCaseType", xmlWriter);
                }
            }

            if (localImportCaseTypeSequenceTracker) {
                if (localImportCaseTypeSequence != null) {
                    for (int i = 0; i < localImportCaseTypeSequence.length;
                            i++) {
                        if (localImportCaseTypeSequence[i] != null) {
                            localImportCaseTypeSequence[i].serialize(null,
                                xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "importCaseTypeSequence cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ImportCaseType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ImportCaseType object = new ImportCaseType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"importCaseType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ImportCaseType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    try {
                        if (reader.isStartElement()) {
                            // Process the array and step past its final element's end.
                            list1.add(ImportCaseTypeSequence.Factory.parse(
                                    reader));

                            //loop until we find a start element that is not part of this array
                            boolean loopDone1 = false;

                            while (!loopDone1) {
                                // Step to next element event.
                                while (!reader.isStartElement() &&
                                        !reader.isEndElement())
                                    reader.next();

                                if (reader.isEndElement()) {
                                    //two continuous end elements means we are exiting the xml structure
                                    loopDone1 = true;
                                } else {
                                    list1.add(ImportCaseTypeSequence.Factory.parse(
                                            reader));
                                }
                            }

                            // call the converter utility  to convert and set the array
                            object.setImportCaseTypeSequence((ImportCaseTypeSequence[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                    ImportCaseTypeSequence.class, list1));
                        } // End of if for expected property start element

                        else {
                        }
                    } catch (java.lang.Exception e) {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AttachedDocumentsTypeSequence implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = attachedDocumentsTypeSequence
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for FileName
         */
        protected org.apache.axis2.databinding.types.Token localFileName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFileNameTracker = false;

        public boolean isFileNameSpecified() {
            return localFileNameTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getFileName() {
            return localFileName;
        }

        /**
         * Auto generated setter method
         * @param param FileName
         */
        public void setFileName(org.apache.axis2.databinding.types.Token param) {
            localFileNameTracker = param != null;

            this.localFileName = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":attachedDocumentsTypeSequence",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "attachedDocumentsTypeSequence", xmlWriter);
                }
            }

            if (localFileNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "fileName", xmlWriter);

                if (localFileName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "fileName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFileName));
                }

                xmlWriter.writeEndElement();
            }
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AttachedDocumentsTypeSequence parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AttachedDocumentsTypeSequence object = new AttachedDocumentsTypeSequence();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "fileName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "fileName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateCorrespondenceRecordRequest implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.sparta.org/ImportService/",
                "createCorrespondenceRecordRequest", "");

        /**
         * field for CreateCorrespondenceRecordRequest
         */
        protected EmailType localCreateCorrespondenceRecordRequest;

        /**
         * Auto generated getter method
         * @return EmailType
         */
        public EmailType getCreateCorrespondenceRecordRequest() {
            return localCreateCorrespondenceRecordRequest;
        }

        /**
         * Auto generated setter method
         * @param param CreateCorrespondenceRecordRequest
         */
        public void setCreateCorrespondenceRecordRequest(EmailType param) {
            this.localCreateCorrespondenceRecordRequest = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localCreateCorrespondenceRecordRequest == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "createCorrespondenceRecordRequest cannot be null!");
            }

            localCreateCorrespondenceRecordRequest.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.sparta.org/ImportService/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateCorrespondenceRecordRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateCorrespondenceRecordRequest object = new CreateCorrespondenceRecordRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://www.sparta.org/ImportService/",
                                        "createCorrespondenceRecordRequest").equals(
                                        reader.getName())) {
                                object.setCreateCorrespondenceRecordRequest(EmailType.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DomesticAnimal_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DomesticAnimal_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for NameOfDomesticAnimal
         */
        protected org.apache.axis2.databinding.types.Token localNameOfDomesticAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNameOfDomesticAnimalTracker = false;

        /**
         * field for BreedSpecies
         */
        protected java.lang.String localBreedSpecies;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBreedSpeciesTracker = false;

        /**
         * field for TypeOfDomesticAnimal
         */
        protected java.lang.String localTypeOfDomesticAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfDomesticAnimalTracker = false;

        /**
         * field for NumberOfAffectedAnimals
         */
        protected java.math.BigInteger localNumberOfAffectedAnimals;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberOfAffectedAnimalsTracker = false;

        /**
         * field for NumberOfDeadAnimal
         */
        protected java.math.BigInteger localNumberOfDeadAnimal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberOfDeadAnimalTracker = false;

        /**
         * field for SexDA
         */
        protected java.lang.String localSexDA;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSexDATracker = false;

        /**
         * field for AgeInYears
         */
        protected java.math.BigDecimal localAgeInYears;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAgeInYearsTracker = false;

        /**
         * field for WeightDA
         */
        protected java.math.BigDecimal localWeightDA;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWeightDATracker = false;

        /**
         * field for UnitDA
         */
        protected java.lang.String localUnitDA;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitDATracker = false;

        public boolean isNameOfDomesticAnimalSpecified() {
            return localNameOfDomesticAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getNameOfDomesticAnimal() {
            return localNameOfDomesticAnimal;
        }

        /**
         * Auto generated setter method
         * @param param NameOfDomesticAnimal
         */
        public void setNameOfDomesticAnimal(
            org.apache.axis2.databinding.types.Token param) {
            localNameOfDomesticAnimalTracker = param != null;

            this.localNameOfDomesticAnimal = param;
        }

        public boolean isBreedSpeciesSpecified() {
            return localBreedSpeciesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBreedSpecies() {
            return localBreedSpecies;
        }

        /**
         * Auto generated setter method
         * @param param BreedSpecies
         */
        public void setBreedSpecies(java.lang.String param) {
            localBreedSpeciesTracker = param != null;

            this.localBreedSpecies = param;
        }

        public boolean isTypeOfDomesticAnimalSpecified() {
            return localTypeOfDomesticAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTypeOfDomesticAnimal() {
            return localTypeOfDomesticAnimal;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfDomesticAnimal
         */
        public void setTypeOfDomesticAnimal(java.lang.String param) {
            localTypeOfDomesticAnimalTracker = param != null;

            this.localTypeOfDomesticAnimal = param;
        }

        public boolean isNumberOfAffectedAnimalsSpecified() {
            return localNumberOfAffectedAnimalsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getNumberOfAffectedAnimals() {
            return localNumberOfAffectedAnimals;
        }

        /**
         * Auto generated setter method
         * @param param NumberOfAffectedAnimals
         */
        public void setNumberOfAffectedAnimals(java.math.BigInteger param) {
            localNumberOfAffectedAnimalsTracker = param != null;

            this.localNumberOfAffectedAnimals = param;
        }

        public boolean isNumberOfDeadAnimalSpecified() {
            return localNumberOfDeadAnimalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getNumberOfDeadAnimal() {
            return localNumberOfDeadAnimal;
        }

        /**
         * Auto generated setter method
         * @param param NumberOfDeadAnimal
         */
        public void setNumberOfDeadAnimal(java.math.BigInteger param) {
            localNumberOfDeadAnimalTracker = param != null;

            this.localNumberOfDeadAnimal = param;
        }

        public boolean isSexDASpecified() {
            return localSexDATracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSexDA() {
            return localSexDA;
        }

        /**
         * Auto generated setter method
         * @param param SexDA
         */
        public void setSexDA(java.lang.String param) {
            localSexDATracker = param != null;

            this.localSexDA = param;
        }

        public boolean isAgeInYearsSpecified() {
            return localAgeInYearsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAgeInYears() {
            return localAgeInYears;
        }

        /**
         * Auto generated setter method
         * @param param AgeInYears
         */
        public void setAgeInYears(java.math.BigDecimal param) {
            localAgeInYearsTracker = param != null;

            this.localAgeInYears = param;
        }

        public boolean isWeightDASpecified() {
            return localWeightDATracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getWeightDA() {
            return localWeightDA;
        }

        /**
         * Auto generated setter method
         * @param param WeightDA
         */
        public void setWeightDA(java.math.BigDecimal param) {
            localWeightDATracker = param != null;

            this.localWeightDA = param;
        }

        public boolean isUnitDASpecified() {
            return localUnitDATracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUnitDA() {
            return localUnitDA;
        }

        /**
         * Auto generated setter method
         * @param param UnitDA
         */
        public void setUnitDA(java.lang.String param) {
            localUnitDATracker = param != null;

            this.localUnitDA = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DomesticAnimal_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DomesticAnimal_type0", xmlWriter);
                }
            }

            if (localNameOfDomesticAnimalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NameOfDomesticAnimal",
                    xmlWriter);

                if (localNameOfDomesticAnimal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NameOfDomesticAnimal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNameOfDomesticAnimal));
                }

                xmlWriter.writeEndElement();
            }

            if (localBreedSpeciesTracker) {
                namespace = "";
                writeStartElement(null, namespace, "BreedSpecies", xmlWriter);

                if (localBreedSpecies == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BreedSpecies cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBreedSpecies);
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfDomesticAnimalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfDomesticAnimal",
                    xmlWriter);

                if (localTypeOfDomesticAnimal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfDomesticAnimal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTypeOfDomesticAnimal);
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberOfAffectedAnimalsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NumberOfAffectedAnimals",
                    xmlWriter);

                if (localNumberOfAffectedAnimals == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NumberOfAffectedAnimals cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNumberOfAffectedAnimals));
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberOfDeadAnimalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "NumberOfDeadAnimal",
                    xmlWriter);

                if (localNumberOfDeadAnimal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NumberOfDeadAnimal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNumberOfDeadAnimal));
                }

                xmlWriter.writeEndElement();
            }

            if (localSexDATracker) {
                namespace = "";
                writeStartElement(null, namespace, "SexDA", xmlWriter);

                if (localSexDA == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SexDA cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSexDA);
                }

                xmlWriter.writeEndElement();
            }

            if (localAgeInYearsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AgeInYears", xmlWriter);

                if (localAgeInYears == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AgeInYears cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAgeInYears));
                }

                xmlWriter.writeEndElement();
            }

            if (localWeightDATracker) {
                namespace = "";
                writeStartElement(null, namespace, "WeightDA", xmlWriter);

                if (localWeightDA == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "WeightDA cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWeightDA));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitDATracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitDA", xmlWriter);

                if (localUnitDA == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitDA cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUnitDA);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DomesticAnimal_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DomesticAnimal_type0 object = new DomesticAnimal_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DomesticAnimal_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DomesticAnimal_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "NameOfDomesticAnimal").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "NameOfDomesticAnimal" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setNameOfDomesticAnimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "BreedSpecies").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "BreedSpecies" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setBreedSpecies(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TypeOfDomesticAnimal").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "TypeOfDomesticAnimal" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTypeOfDomesticAnimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "NumberOfAffectedAnimals").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "NumberOfAffectedAnimals" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setNumberOfAffectedAnimals(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "NumberOfDeadAnimal").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "NumberOfDeadAnimal" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setNumberOfDeadAnimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "SexDA").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "SexDA" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSexDA(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "AgeInYears").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "AgeInYears" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAgeInYears(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "WeightDA").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "WeightDA" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setWeightDA(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "UnitDA").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "UnitDA" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitDA(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateAndUpdateIssueRecordResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.sparta.org/ImportService/",
                "createAndUpdateIssueRecordResponse", "");

        /**
         * field for CreateAndUpdateIssueRecordResponse
         */
        protected CreateAndUpdateIssueRecordResponseType localCreateAndUpdateIssueRecordResponse;

        /**
         * Auto generated getter method
         * @return CreateAndUpdateIssueRecordResponseType
         */
        public CreateAndUpdateIssueRecordResponseType getCreateAndUpdateIssueRecordResponse() {
            return localCreateAndUpdateIssueRecordResponse;
        }

        /**
         * Auto generated setter method
         * @param param CreateAndUpdateIssueRecordResponse
         */
        public void setCreateAndUpdateIssueRecordResponse(
            CreateAndUpdateIssueRecordResponseType param) {
            this.localCreateAndUpdateIssueRecordResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localCreateAndUpdateIssueRecordResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "createAndUpdateIssueRecordResponse cannot be null!");
            }

            localCreateAndUpdateIssueRecordResponse.serialize(MY_QNAME,
                xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.sparta.org/ImportService/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateAndUpdateIssueRecordResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateAndUpdateIssueRecordResponse object = new CreateAndUpdateIssueRecordResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://www.sparta.org/ImportService/",
                                        "createAndUpdateIssueRecordResponse").equals(
                                        reader.getName())) {
                                object.setCreateAndUpdateIssueRecordResponse(CreateAndUpdateIssueRecordResponseType.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Irrigation_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Irrigation_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for IrrigationVolume
         */
        protected java.math.BigDecimal localIrrigationVolume;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIrrigationVolumeTracker = false;

        /**
         * field for UnitOfMeasureIrrigation
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureIrrigation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureIrrigationTracker = false;

        /**
         * field for IrrigationTiming
         */
        protected org.apache.axis2.databinding.types.Token localIrrigationTiming;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIrrigationTimingTracker = false;

        /**
         * field for TypeOfIrrigation
         */
        protected org.apache.axis2.databinding.types.Token localTypeOfIrrigation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfIrrigationTracker = false;

        public boolean isIrrigationVolumeSpecified() {
            return localIrrigationVolumeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getIrrigationVolume() {
            return localIrrigationVolume;
        }

        /**
         * Auto generated setter method
         * @param param IrrigationVolume
         */
        public void setIrrigationVolume(java.math.BigDecimal param) {
            localIrrigationVolumeTracker = param != null;

            this.localIrrigationVolume = param;
        }

        public boolean isUnitOfMeasureIrrigationSpecified() {
            return localUnitOfMeasureIrrigationTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureIrrigation() {
            return localUnitOfMeasureIrrigation;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureIrrigation
         */
        public void setUnitOfMeasureIrrigation(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureIrrigationTracker = param != null;

            this.localUnitOfMeasureIrrigation = param;
        }

        public boolean isIrrigationTimingSpecified() {
            return localIrrigationTimingTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIrrigationTiming() {
            return localIrrigationTiming;
        }

        /**
         * Auto generated setter method
         * @param param IrrigationTiming
         */
        public void setIrrigationTiming(
            org.apache.axis2.databinding.types.Token param) {
            localIrrigationTimingTracker = param != null;

            this.localIrrigationTiming = param;
        }

        public boolean isTypeOfIrrigationSpecified() {
            return localTypeOfIrrigationTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTypeOfIrrigation() {
            return localTypeOfIrrigation;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfIrrigation
         */
        public void setTypeOfIrrigation(
            org.apache.axis2.databinding.types.Token param) {
            localTypeOfIrrigationTracker = param != null;

            this.localTypeOfIrrigation = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Irrigation_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Irrigation_type0", xmlWriter);
                }
            }

            if (localIrrigationVolumeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IrrigationVolume", xmlWriter);

                if (localIrrigationVolume == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IrrigationVolume cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIrrigationVolume));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureIrrigationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureIrrigation",
                    xmlWriter);

                if (localUnitOfMeasureIrrigation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureIrrigation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureIrrigation));
                }

                xmlWriter.writeEndElement();
            }

            if (localIrrigationTimingTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IrrigationTiming", xmlWriter);

                if (localIrrigationTiming == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IrrigationTiming cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIrrigationTiming));
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfIrrigationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfIrrigation", xmlWriter);

                if (localTypeOfIrrigation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfIrrigation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTypeOfIrrigation));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Irrigation_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Irrigation_type0 object = new Irrigation_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Irrigation_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Irrigation_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "IrrigationVolume").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "IrrigationVolume" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setIrrigationVolume(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitOfMeasureIrrigation").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitOfMeasureIrrigation" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitOfMeasureIrrigation(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "IrrigationTiming").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "IrrigationTiming" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setIrrigationTiming(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TypeOfIrrigation").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "TypeOfIrrigation" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTypeOfIrrigation(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ExposureDetailsList_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ExposureDetailsList_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for IdentifierNameExp
         */
        protected org.apache.axis2.databinding.types.Token localIdentifierNameExp;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdentifierNameExpTracker = false;

        /**
         * field for DurationOfExposure
         */
        protected java.math.BigDecimal localDurationOfExposure;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDurationOfExposureTracker = false;

        /**
         * field for UnitsExposureDuration
         */
        protected org.apache.axis2.databinding.types.Token localUnitsExposureDuration;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitsExposureDurationTracker = false;

        /**
         * field for AmountOfPesticideExposed
         */
        protected java.math.BigDecimal localAmountOfPesticideExposed;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAmountOfPesticideExposedTracker = false;

        /**
         * field for UnitsAmount
         */
        protected org.apache.axis2.databinding.types.Token localUnitsAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitsAmountTracker = false;

        /**
         * field for ExposedDuringWork
         */
        protected org.apache.axis2.databinding.types.Token localExposedDuringWork;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExposedDuringWorkTracker = false;

        /**
         * field for WorkArea
         */
        protected org.apache.axis2.databinding.types.Token localWorkArea;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWorkAreaTracker = false;

        /**
         * field for DaysLost
         */
        protected java.math.BigDecimal localDaysLost;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDaysLostTracker = false;

        /**
         * field for HospitalizationNecessary
         */
        protected org.apache.axis2.databinding.types.Token localHospitalizationNecessary;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHospitalizationNecessaryTracker = false;

        /**
         * field for TypeOfMedicalCare
         */
        protected org.apache.axis2.databinding.types.Token localTypeOfMedicalCare;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfMedicalCareTracker = false;

        public boolean isIdentifierNameExpSpecified() {
            return localIdentifierNameExpTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIdentifierNameExp() {
            return localIdentifierNameExp;
        }

        /**
         * Auto generated setter method
         * @param param IdentifierNameExp
         */
        public void setIdentifierNameExp(
            org.apache.axis2.databinding.types.Token param) {
            localIdentifierNameExpTracker = param != null;

            this.localIdentifierNameExp = param;
        }

        public boolean isDurationOfExposureSpecified() {
            return localDurationOfExposureTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDurationOfExposure() {
            return localDurationOfExposure;
        }

        /**
         * Auto generated setter method
         * @param param DurationOfExposure
         */
        public void setDurationOfExposure(java.math.BigDecimal param) {
            localDurationOfExposureTracker = param != null;

            this.localDurationOfExposure = param;
        }

        public boolean isUnitsExposureDurationSpecified() {
            return localUnitsExposureDurationTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitsExposureDuration() {
            return localUnitsExposureDuration;
        }

        /**
         * Auto generated setter method
         * @param param UnitsExposureDuration
         */
        public void setUnitsExposureDuration(
            org.apache.axis2.databinding.types.Token param) {
            localUnitsExposureDurationTracker = param != null;

            this.localUnitsExposureDuration = param;
        }

        public boolean isAmountOfPesticideExposedSpecified() {
            return localAmountOfPesticideExposedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAmountOfPesticideExposed() {
            return localAmountOfPesticideExposed;
        }

        /**
         * Auto generated setter method
         * @param param AmountOfPesticideExposed
         */
        public void setAmountOfPesticideExposed(java.math.BigDecimal param) {
            localAmountOfPesticideExposedTracker = param != null;

            this.localAmountOfPesticideExposed = param;
        }

        public boolean isUnitsAmountSpecified() {
            return localUnitsAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitsAmount() {
            return localUnitsAmount;
        }

        /**
         * Auto generated setter method
         * @param param UnitsAmount
         */
        public void setUnitsAmount(
            org.apache.axis2.databinding.types.Token param) {
            localUnitsAmountTracker = param != null;

            this.localUnitsAmount = param;
        }

        public boolean isExposedDuringWorkSpecified() {
            return localExposedDuringWorkTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getExposedDuringWork() {
            return localExposedDuringWork;
        }

        /**
         * Auto generated setter method
         * @param param ExposedDuringWork
         */
        public void setExposedDuringWork(
            org.apache.axis2.databinding.types.Token param) {
            localExposedDuringWorkTracker = param != null;

            this.localExposedDuringWork = param;
        }

        public boolean isWorkAreaSpecified() {
            return localWorkAreaTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getWorkArea() {
            return localWorkArea;
        }

        /**
         * Auto generated setter method
         * @param param WorkArea
         */
        public void setWorkArea(org.apache.axis2.databinding.types.Token param) {
            localWorkAreaTracker = param != null;

            this.localWorkArea = param;
        }

        public boolean isDaysLostSpecified() {
            return localDaysLostTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDaysLost() {
            return localDaysLost;
        }

        /**
         * Auto generated setter method
         * @param param DaysLost
         */
        public void setDaysLost(java.math.BigDecimal param) {
            localDaysLostTracker = param != null;

            this.localDaysLost = param;
        }

        public boolean isHospitalizationNecessarySpecified() {
            return localHospitalizationNecessaryTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getHospitalizationNecessary() {
            return localHospitalizationNecessary;
        }

        /**
         * Auto generated setter method
         * @param param HospitalizationNecessary
         */
        public void setHospitalizationNecessary(
            org.apache.axis2.databinding.types.Token param) {
            localHospitalizationNecessaryTracker = param != null;

            this.localHospitalizationNecessary = param;
        }

        public boolean isTypeOfMedicalCareSpecified() {
            return localTypeOfMedicalCareTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTypeOfMedicalCare() {
            return localTypeOfMedicalCare;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfMedicalCare
         */
        public void setTypeOfMedicalCare(
            org.apache.axis2.databinding.types.Token param) {
            localTypeOfMedicalCareTracker = param != null;

            this.localTypeOfMedicalCare = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ExposureDetailsList_type0",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ExposureDetailsList_type0", xmlWriter);
                }
            }

            if (localIdentifierNameExpTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IdentifierNameExp",
                    xmlWriter);

                if (localIdentifierNameExp == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IdentifierNameExp cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIdentifierNameExp));
                }

                xmlWriter.writeEndElement();
            }

            if (localDurationOfExposureTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DurationOfExposure",
                    xmlWriter);

                if (localDurationOfExposure == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DurationOfExposure cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDurationOfExposure));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitsExposureDurationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitsExposureDuration",
                    xmlWriter);

                if (localUnitsExposureDuration == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitsExposureDuration cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitsExposureDuration));
                }

                xmlWriter.writeEndElement();
            }

            if (localAmountOfPesticideExposedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AmountOfPesticideExposed",
                    xmlWriter);

                if (localAmountOfPesticideExposed == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AmountOfPesticideExposed cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAmountOfPesticideExposed));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitsAmountTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitsAmount", xmlWriter);

                if (localUnitsAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitsAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitsAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localExposedDuringWorkTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ExposedDuringWork",
                    xmlWriter);

                if (localExposedDuringWork == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExposedDuringWork cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localExposedDuringWork));
                }

                xmlWriter.writeEndElement();
            }

            if (localWorkAreaTracker) {
                namespace = "";
                writeStartElement(null, namespace, "WorkArea", xmlWriter);

                if (localWorkArea == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "WorkArea cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWorkArea));
                }

                xmlWriter.writeEndElement();
            }

            if (localDaysLostTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DaysLost", xmlWriter);

                if (localDaysLost == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DaysLost cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDaysLost));
                }

                xmlWriter.writeEndElement();
            }

            if (localHospitalizationNecessaryTracker) {
                namespace = "";
                writeStartElement(null, namespace, "HospitalizationNecessary",
                    xmlWriter);

                if (localHospitalizationNecessary == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "HospitalizationNecessary cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHospitalizationNecessary));
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfMedicalCareTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfMedicalCare",
                    xmlWriter);

                if (localTypeOfMedicalCare == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfMedicalCare cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTypeOfMedicalCare));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ExposureDetailsList_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ExposureDetailsList_type0 object = new ExposureDetailsList_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ExposureDetailsList_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ExposureDetailsList_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "IdentifierNameExp").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "IdentifierNameExp" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setIdentifierNameExp(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "DurationOfExposure").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "DurationOfExposure" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDurationOfExposure(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitsExposureDuration").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitsExposureDuration" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitsExposureDuration(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "AmountOfPesticideExposed").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "AmountOfPesticideExposed" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAmountOfPesticideExposed(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitsAmount").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "UnitsAmount" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitsAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ExposedDuringWork").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ExposedDuringWork" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setExposedDuringWork(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "WorkArea").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "WorkArea" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setWorkArea(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "DaysLost").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "DaysLost" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDaysLost(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "HospitalizationNecessary").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "HospitalizationNecessary" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setHospitalizationNecessary(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TypeOfMedicalCare").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "TypeOfMedicalCare" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTypeOfMedicalCare(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AnalyticalInformation_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = AnalyticalInformation_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for SamplingDate
         */
        protected java.util.Date localSamplingDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSamplingDateTracker = false;

        /**
         * field for MaterialAnalyzed
         */
        protected org.apache.axis2.databinding.types.Token localMaterialAnalyzed;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialAnalyzedTracker = false;

        /**
         * field for SampleType
         */
        protected org.apache.axis2.databinding.types.Token localSampleType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSampleTypeTracker = false;

        /**
         * field for AnalyticalLab
         */
        protected java.lang.String localAnalyticalLab;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnalyticalLabTracker = false;

        /**
         * field for AnalyticalMethod
         */
        protected java.lang.String localAnalyticalMethod;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnalyticalMethodTracker = false;

        /**
         * field for LevelOfResidueFound
         */
        protected java.math.BigDecimal localLevelOfResidueFound;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLevelOfResidueFoundTracker = false;

        /**
         * field for UnitOfMeasureResidue
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureResidue;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureResidueTracker = false;

        /**
         * field for SubstanceAnalyzed
         */
        protected java.lang.String localSubstanceAnalyzed;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubstanceAnalyzedTracker = false;

        /**
         * field for TypeOfSubstance
         */
        protected org.apache.axis2.databinding.types.Token localTypeOfSubstance;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfSubstanceTracker = false;

        /**
         * field for ToleranceLevels
         */
        protected java.math.BigDecimal localToleranceLevels;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToleranceLevelsTracker = false;

        /**
         * field for UnitOfToleranceLevels
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfToleranceLevels;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfToleranceLevelsTracker = false;

        /**
         * field for LimitOfQuantificationLOQ
         */
        protected java.math.BigDecimal localLimitOfQuantificationLOQ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLimitOfQuantificationLOQTracker = false;

        /**
         * field for UnitOfMeasureLOQ
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureLOQ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureLOQTracker = false;

        public boolean isSamplingDateSpecified() {
            return localSamplingDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getSamplingDate() {
            return localSamplingDate;
        }

        /**
         * Auto generated setter method
         * @param param SamplingDate
         */
        public void setSamplingDate(java.util.Date param) {
            localSamplingDateTracker = param != null;

            this.localSamplingDate = param;
        }

        public boolean isMaterialAnalyzedSpecified() {
            return localMaterialAnalyzedTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getMaterialAnalyzed() {
            return localMaterialAnalyzed;
        }

        /**
         * Auto generated setter method
         * @param param MaterialAnalyzed
         */
        public void setMaterialAnalyzed(
            org.apache.axis2.databinding.types.Token param) {
            localMaterialAnalyzedTracker = param != null;

            this.localMaterialAnalyzed = param;
        }

        public boolean isSampleTypeSpecified() {
            return localSampleTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSampleType() {
            return localSampleType;
        }

        /**
         * Auto generated setter method
         * @param param SampleType
         */
        public void setSampleType(
            org.apache.axis2.databinding.types.Token param) {
            localSampleTypeTracker = param != null;

            this.localSampleType = param;
        }

        public boolean isAnalyticalLabSpecified() {
            return localAnalyticalLabTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAnalyticalLab() {
            return localAnalyticalLab;
        }

        /**
         * Auto generated setter method
         * @param param AnalyticalLab
         */
        public void setAnalyticalLab(java.lang.String param) {
            localAnalyticalLabTracker = param != null;

            this.localAnalyticalLab = param;
        }

        public boolean isAnalyticalMethodSpecified() {
            return localAnalyticalMethodTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAnalyticalMethod() {
            return localAnalyticalMethod;
        }

        /**
         * Auto generated setter method
         * @param param AnalyticalMethod
         */
        public void setAnalyticalMethod(java.lang.String param) {
            localAnalyticalMethodTracker = param != null;

            this.localAnalyticalMethod = param;
        }

        public boolean isLevelOfResidueFoundSpecified() {
            return localLevelOfResidueFoundTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getLevelOfResidueFound() {
            return localLevelOfResidueFound;
        }

        /**
         * Auto generated setter method
         * @param param LevelOfResidueFound
         */
        public void setLevelOfResidueFound(java.math.BigDecimal param) {
            localLevelOfResidueFoundTracker = param != null;

            this.localLevelOfResidueFound = param;
        }

        public boolean isUnitOfMeasureResidueSpecified() {
            return localUnitOfMeasureResidueTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureResidue() {
            return localUnitOfMeasureResidue;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureResidue
         */
        public void setUnitOfMeasureResidue(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureResidueTracker = param != null;

            this.localUnitOfMeasureResidue = param;
        }

        public boolean isSubstanceAnalyzedSpecified() {
            return localSubstanceAnalyzedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSubstanceAnalyzed() {
            return localSubstanceAnalyzed;
        }

        /**
         * Auto generated setter method
         * @param param SubstanceAnalyzed
         */
        public void setSubstanceAnalyzed(java.lang.String param) {
            localSubstanceAnalyzedTracker = param != null;

            this.localSubstanceAnalyzed = param;
        }

        public boolean isTypeOfSubstanceSpecified() {
            return localTypeOfSubstanceTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getTypeOfSubstance() {
            return localTypeOfSubstance;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfSubstance
         */
        public void setTypeOfSubstance(
            org.apache.axis2.databinding.types.Token param) {
            localTypeOfSubstanceTracker = param != null;

            this.localTypeOfSubstance = param;
        }

        public boolean isToleranceLevelsSpecified() {
            return localToleranceLevelsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getToleranceLevels() {
            return localToleranceLevels;
        }

        /**
         * Auto generated setter method
         * @param param ToleranceLevels
         */
        public void setToleranceLevels(java.math.BigDecimal param) {
            localToleranceLevelsTracker = param != null;

            this.localToleranceLevels = param;
        }

        public boolean isUnitOfToleranceLevelsSpecified() {
            return localUnitOfToleranceLevelsTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfToleranceLevels() {
            return localUnitOfToleranceLevels;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfToleranceLevels
         */
        public void setUnitOfToleranceLevels(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfToleranceLevelsTracker = param != null;

            this.localUnitOfToleranceLevels = param;
        }

        public boolean isLimitOfQuantificationLOQSpecified() {
            return localLimitOfQuantificationLOQTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getLimitOfQuantificationLOQ() {
            return localLimitOfQuantificationLOQ;
        }

        /**
         * Auto generated setter method
         * @param param LimitOfQuantificationLOQ
         */
        public void setLimitOfQuantificationLOQ(java.math.BigDecimal param) {
            localLimitOfQuantificationLOQTracker = param != null;

            this.localLimitOfQuantificationLOQ = param;
        }

        public boolean isUnitOfMeasureLOQSpecified() {
            return localUnitOfMeasureLOQTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureLOQ() {
            return localUnitOfMeasureLOQ;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureLOQ
         */
        public void setUnitOfMeasureLOQ(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureLOQTracker = param != null;

            this.localUnitOfMeasureLOQ = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":AnalyticalInformation_type0",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "AnalyticalInformation_type0", xmlWriter);
                }
            }

            if (localSamplingDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SamplingDate", xmlWriter);

                if (localSamplingDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SamplingDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSamplingDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialAnalyzedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "MaterialAnalyzed", xmlWriter);

                if (localMaterialAnalyzed == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MaterialAnalyzed cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialAnalyzed));
                }

                xmlWriter.writeEndElement();
            }

            if (localSampleTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SampleType", xmlWriter);

                if (localSampleType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SampleType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSampleType));
                }

                xmlWriter.writeEndElement();
            }

            if (localAnalyticalLabTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AnalyticalLab", xmlWriter);

                if (localAnalyticalLab == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AnalyticalLab cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAnalyticalLab);
                }

                xmlWriter.writeEndElement();
            }

            if (localAnalyticalMethodTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AnalyticalMethod", xmlWriter);

                if (localAnalyticalMethod == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AnalyticalMethod cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAnalyticalMethod);
                }

                xmlWriter.writeEndElement();
            }

            if (localLevelOfResidueFoundTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LevelOfResidueFound",
                    xmlWriter);

                if (localLevelOfResidueFound == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LevelOfResidueFound cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLevelOfResidueFound));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureResidueTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureResidue",
                    xmlWriter);

                if (localUnitOfMeasureResidue == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureResidue cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureResidue));
                }

                xmlWriter.writeEndElement();
            }

            if (localSubstanceAnalyzedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SubstanceAnalyzed",
                    xmlWriter);

                if (localSubstanceAnalyzed == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SubstanceAnalyzed cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSubstanceAnalyzed);
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfSubstanceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TypeOfSubstance", xmlWriter);

                if (localTypeOfSubstance == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TypeOfSubstance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTypeOfSubstance));
                }

                xmlWriter.writeEndElement();
            }

            if (localToleranceLevelsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ToleranceLevels", xmlWriter);

                if (localToleranceLevels == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ToleranceLevels cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localToleranceLevels));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfToleranceLevelsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfToleranceLevels",
                    xmlWriter);

                if (localUnitOfToleranceLevels == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfToleranceLevels cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfToleranceLevels));
                }

                xmlWriter.writeEndElement();
            }

            if (localLimitOfQuantificationLOQTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LimitOfQuantificationLOQ",
                    xmlWriter);

                if (localLimitOfQuantificationLOQ == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LimitOfQuantificationLOQ cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLimitOfQuantificationLOQ));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureLOQTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureLOQ", xmlWriter);

                if (localUnitOfMeasureLOQ == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureLOQ cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureLOQ));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AnalyticalInformation_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AnalyticalInformation_type0 object = new AnalyticalInformation_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"AnalyticalInformation_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AnalyticalInformation_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SamplingDate").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "SamplingDate" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSamplingDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "MaterialAnalyzed").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "MaterialAnalyzed" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setMaterialAnalyzed(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SampleType").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "SampleType" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSampleType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "AnalyticalLab").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "AnalyticalLab" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAnalyticalLab(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "AnalyticalMethod").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "AnalyticalMethod" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setAnalyticalMethod(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "LevelOfResidueFound").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "LevelOfResidueFound" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setLevelOfResidueFound(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitOfMeasureResidue").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitOfMeasureResidue" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitOfMeasureResidue(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SubstanceAnalyzed").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "SubstanceAnalyzed" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSubstanceAnalyzed(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TypeOfSubstance").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "TypeOfSubstance" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTypeOfSubstance(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ToleranceLevels").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ToleranceLevels" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setToleranceLevels(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitOfToleranceLevels").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitOfToleranceLevels" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitOfToleranceLevels(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "LimitOfQuantificationLOQ").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "LimitOfQuantificationLOQ" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setLimitOfQuantificationLOQ(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitOfMeasureLOQ").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "UnitOfMeasureLOQ" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitOfMeasureLOQ(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateAndUpdateCaseRecordRequest implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.sparta.org/ImportService/",
                "createAndUpdateCaseRecordRequest", "");

        /**
         * field for CreateAndUpdateCaseRecordRequest
         */
        protected ImportCaseType localCreateAndUpdateCaseRecordRequest;

        /**
         * Auto generated getter method
         * @return ImportCaseType
         */
        public ImportCaseType getCreateAndUpdateCaseRecordRequest() {
            return localCreateAndUpdateCaseRecordRequest;
        }

        /**
         * Auto generated setter method
         * @param param CreateAndUpdateCaseRecordRequest
         */
        public void setCreateAndUpdateCaseRecordRequest(ImportCaseType param) {
            this.localCreateAndUpdateCaseRecordRequest = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localCreateAndUpdateCaseRecordRequest == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "createAndUpdateCaseRecordRequest cannot be null!");
            }

            localCreateAndUpdateCaseRecordRequest.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.sparta.org/ImportService/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateAndUpdateCaseRecordRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateAndUpdateCaseRecordRequest object = new CreateAndUpdateCaseRecordRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://www.sparta.org/ImportService/",
                                        "createAndUpdateCaseRecordRequest").equals(
                                        reader.getName())) {
                                object.setCreateAndUpdateCaseRecordRequest(ImportCaseType.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateCorrespondenceRecordResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.sparta.org/ImportService/",
                "createCorrespondenceRecordResponse", "");

        /**
         * field for CreateCorrespondenceRecordResponse
         */
        protected CreateCorrespondenceRecordResponseType localCreateCorrespondenceRecordResponse;

        /**
         * Auto generated getter method
         * @return CreateCorrespondenceRecordResponseType
         */
        public CreateCorrespondenceRecordResponseType getCreateCorrespondenceRecordResponse() {
            return localCreateCorrespondenceRecordResponse;
        }

        /**
         * Auto generated setter method
         * @param param CreateCorrespondenceRecordResponse
         */
        public void setCreateCorrespondenceRecordResponse(
            CreateCorrespondenceRecordResponseType param) {
            this.localCreateCorrespondenceRecordResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localCreateCorrespondenceRecordResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "createCorrespondenceRecordResponse cannot be null!");
            }

            localCreateCorrespondenceRecordResponse.serialize(MY_QNAME,
                xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.sparta.org/ImportService/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateCorrespondenceRecordResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateCorrespondenceRecordResponse object = new CreateCorrespondenceRecordResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://www.sparta.org/ImportService/",
                                        "createCorrespondenceRecordResponse").equals(
                                        reader.getName())) {
                                object.setCreateCorrespondenceRecordResponse(CreateCorrespondenceRecordResponseType.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EmailCorrespondence implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://cairnew.bcs.cnb/",
                "emailCorrespondence", "");

        /**
         * field for EmailCorrespondence
         */
        protected EmailType localEmailCorrespondence;

        /**
         * Auto generated getter method
         * @return EmailType
         */
        public EmailType getEmailCorrespondence() {
            return localEmailCorrespondence;
        }

        /**
         * Auto generated setter method
         * @param param EmailCorrespondence
         */
        public void setEmailCorrespondence(EmailType param) {
            this.localEmailCorrespondence = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localEmailCorrespondence == null) {
                java.lang.String namespace = "http://cairnew.bcs.cnb/";
                writeStartElement(null, namespace, "emailCorrespondence",
                    xmlWriter);

                // write the nil attribute
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "nil", "1",
                    xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localEmailCorrespondence.serialize(MY_QNAME, xmlWriter);
            }
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EmailCorrespondence parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EmailCorrespondence object = new EmailCorrespondence();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                            "nil");

                    if ("true".equals(nillableValue) ||
                            "1".equals(nillableValue)) {
                        // Skip the element and report the null value.  It cannot have subelements.
                        while (!reader.isEndElement())
                            reader.next();

                        return object;
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://cairnew.bcs.cnb/",
                                        "emailCorrespondence").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    object.setEmailCorrespondence(null);
                                    reader.next();
                                } else {
                                    object.setEmailCorrespondence(EmailType.Factory.parse(
                                            reader));
                                }
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Applications_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Applications_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for ApplicationDate
         */
        protected java.util.Date localApplicationDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApplicationDateTracker = false;

        /**
         * field for ApplicationMethod
         */
        protected java.lang.String localApplicationMethod;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApplicationMethodTracker = false;

        /**
         * field for CropStageApplication
         */
        protected org.apache.axis2.databinding.types.Token localCropStageApplication;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCropStageApplicationTracker = false;

        /**
         * field for GrowthStageAtApplication
         */
        protected java.lang.String localGrowthStageAtApplication;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGrowthStageAtApplicationTracker = false;

        /**
         * field for CropVigourAtApplication
         */
        protected org.apache.axis2.databinding.types.Token localCropVigourAtApplication;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCropVigourAtApplicationTracker = false;

        /**
         * field for ApplicationVolume
         */
        protected java.math.BigDecimal localApplicationVolume;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApplicationVolumeTracker = false;

        /**
         * field for UnitOfMeasureVolume
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureVolume;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureVolumeTracker = false;

        /**
         * field for ProductBrandNameAdjuvant
         */
        protected java.lang.String localProductBrandNameAdjuvant;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductBrandNameAdjuvantTracker = false;

        /**
         * field for ApplicationRate
         */
        protected java.math.BigDecimal localApplicationRate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApplicationRateTracker = false;

        /**
         * field for UnitOfMeasureRate
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureRate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureRateTracker = false;

        /**
         * field for TotalAmountOfUsage
         */
        protected java.math.BigDecimal localTotalAmountOfUsage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalAmountOfUsageTracker = false;

        /**
         * field for UnitOfMeasureUsage
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureUsage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureUsageTracker = false;

        public boolean isApplicationDateSpecified() {
            return localApplicationDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getApplicationDate() {
            return localApplicationDate;
        }

        /**
         * Auto generated setter method
         * @param param ApplicationDate
         */
        public void setApplicationDate(java.util.Date param) {
            localApplicationDateTracker = param != null;

            this.localApplicationDate = param;
        }

        public boolean isApplicationMethodSpecified() {
            return localApplicationMethodTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getApplicationMethod() {
            return localApplicationMethod;
        }

        /**
         * Auto generated setter method
         * @param param ApplicationMethod
         */
        public void setApplicationMethod(java.lang.String param) {
            localApplicationMethodTracker = param != null;

            this.localApplicationMethod = param;
        }

        public boolean isCropStageApplicationSpecified() {
            return localCropStageApplicationTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCropStageApplication() {
            return localCropStageApplication;
        }

        /**
         * Auto generated setter method
         * @param param CropStageApplication
         */
        public void setCropStageApplication(
            org.apache.axis2.databinding.types.Token param) {
            localCropStageApplicationTracker = param != null;

            this.localCropStageApplication = param;
        }

        public boolean isGrowthStageAtApplicationSpecified() {
            return localGrowthStageAtApplicationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGrowthStageAtApplication() {
            return localGrowthStageAtApplication;
        }

        /**
         * Auto generated setter method
         * @param param GrowthStageAtApplication
         */
        public void setGrowthStageAtApplication(java.lang.String param) {
            localGrowthStageAtApplicationTracker = param != null;

            this.localGrowthStageAtApplication = param;
        }

        public boolean isCropVigourAtApplicationSpecified() {
            return localCropVigourAtApplicationTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCropVigourAtApplication() {
            return localCropVigourAtApplication;
        }

        /**
         * Auto generated setter method
         * @param param CropVigourAtApplication
         */
        public void setCropVigourAtApplication(
            org.apache.axis2.databinding.types.Token param) {
            localCropVigourAtApplicationTracker = param != null;

            this.localCropVigourAtApplication = param;
        }

        public boolean isApplicationVolumeSpecified() {
            return localApplicationVolumeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getApplicationVolume() {
            return localApplicationVolume;
        }

        /**
         * Auto generated setter method
         * @param param ApplicationVolume
         */
        public void setApplicationVolume(java.math.BigDecimal param) {
            localApplicationVolumeTracker = param != null;

            this.localApplicationVolume = param;
        }

        public boolean isUnitOfMeasureVolumeSpecified() {
            return localUnitOfMeasureVolumeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureVolume() {
            return localUnitOfMeasureVolume;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureVolume
         */
        public void setUnitOfMeasureVolume(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureVolumeTracker = param != null;

            this.localUnitOfMeasureVolume = param;
        }

        public boolean isProductBrandNameAdjuvantSpecified() {
            return localProductBrandNameAdjuvantTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductBrandNameAdjuvant() {
            return localProductBrandNameAdjuvant;
        }

        /**
         * Auto generated setter method
         * @param param ProductBrandNameAdjuvant
         */
        public void setProductBrandNameAdjuvant(java.lang.String param) {
            localProductBrandNameAdjuvantTracker = param != null;

            this.localProductBrandNameAdjuvant = param;
        }

        public boolean isApplicationRateSpecified() {
            return localApplicationRateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getApplicationRate() {
            return localApplicationRate;
        }

        /**
         * Auto generated setter method
         * @param param ApplicationRate
         */
        public void setApplicationRate(java.math.BigDecimal param) {
            localApplicationRateTracker = param != null;

            this.localApplicationRate = param;
        }

        public boolean isUnitOfMeasureRateSpecified() {
            return localUnitOfMeasureRateTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureRate() {
            return localUnitOfMeasureRate;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureRate
         */
        public void setUnitOfMeasureRate(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureRateTracker = param != null;

            this.localUnitOfMeasureRate = param;
        }

        public boolean isTotalAmountOfUsageSpecified() {
            return localTotalAmountOfUsageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getTotalAmountOfUsage() {
            return localTotalAmountOfUsage;
        }

        /**
         * Auto generated setter method
         * @param param TotalAmountOfUsage
         */
        public void setTotalAmountOfUsage(java.math.BigDecimal param) {
            localTotalAmountOfUsageTracker = param != null;

            this.localTotalAmountOfUsage = param;
        }

        public boolean isUnitOfMeasureUsageSpecified() {
            return localUnitOfMeasureUsageTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureUsage() {
            return localUnitOfMeasureUsage;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureUsage
         */
        public void setUnitOfMeasureUsage(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureUsageTracker = param != null;

            this.localUnitOfMeasureUsage = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Applications_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Applications_type0", xmlWriter);
                }
            }

            if (localApplicationDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ApplicationDate", xmlWriter);

                if (localApplicationDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ApplicationDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localApplicationDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localApplicationMethodTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ApplicationMethod",
                    xmlWriter);

                if (localApplicationMethod == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ApplicationMethod cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localApplicationMethod);
                }

                xmlWriter.writeEndElement();
            }

            if (localCropStageApplicationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CropStageApplication",
                    xmlWriter);

                if (localCropStageApplication == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CropStageApplication cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCropStageApplication));
                }

                xmlWriter.writeEndElement();
            }

            if (localGrowthStageAtApplicationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "GrowthStageAtApplication",
                    xmlWriter);

                if (localGrowthStageAtApplication == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "GrowthStageAtApplication cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGrowthStageAtApplication);
                }

                xmlWriter.writeEndElement();
            }

            if (localCropVigourAtApplicationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CropVigourAtApplication",
                    xmlWriter);

                if (localCropVigourAtApplication == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CropVigourAtApplication cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCropVigourAtApplication));
                }

                xmlWriter.writeEndElement();
            }

            if (localApplicationVolumeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ApplicationVolume",
                    xmlWriter);

                if (localApplicationVolume == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ApplicationVolume cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localApplicationVolume));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureVolumeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureVolume",
                    xmlWriter);

                if (localUnitOfMeasureVolume == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureVolume cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureVolume));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductBrandNameAdjuvantTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductBrandNameAdjuvant",
                    xmlWriter);

                if (localProductBrandNameAdjuvant == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductBrandNameAdjuvant cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductBrandNameAdjuvant);
                }

                xmlWriter.writeEndElement();
            }

            if (localApplicationRateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ApplicationRate", xmlWriter);

                if (localApplicationRate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ApplicationRate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localApplicationRate));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureRateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureRate",
                    xmlWriter);

                if (localUnitOfMeasureRate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureRate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureRate));
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalAmountOfUsageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TotalAmountOfUsage",
                    xmlWriter);

                if (localTotalAmountOfUsage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TotalAmountOfUsage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalAmountOfUsage));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureUsageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureUsage",
                    xmlWriter);

                if (localUnitOfMeasureUsage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureUsage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureUsage));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Applications_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Applications_type0 object = new Applications_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Applications_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Applications_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ApplicationDate").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ApplicationDate" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setApplicationDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ApplicationMethod").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ApplicationMethod" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setApplicationMethod(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "CropStageApplication").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "CropStageApplication" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setCropStageApplication(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "GrowthStageAtApplication").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "GrowthStageAtApplication" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setGrowthStageAtApplication(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "CropVigourAtApplication").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "CropVigourAtApplication" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setCropVigourAtApplication(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ApplicationVolume").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ApplicationVolume" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setApplicationVolume(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitOfMeasureVolume").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitOfMeasureVolume" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitOfMeasureVolume(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ProductBrandNameAdjuvant").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "ProductBrandNameAdjuvant" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setProductBrandNameAdjuvant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ApplicationRate").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ApplicationRate" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setApplicationRate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitOfMeasureRate").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "UnitOfMeasureRate" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitOfMeasureRate(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TotalAmountOfUsage").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "TotalAmountOfUsage" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTotalAmountOfUsage(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitOfMeasureUsage").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "UnitOfMeasureUsage" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitOfMeasureUsage(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class FormulationDetails_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = FormulationDetails_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for ProductReference
         */
        protected org.apache.axis2.databinding.types.Token localProductReference;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductReferenceTracker = false;

        /**
         * field for ComponentType
         */
        protected org.apache.axis2.databinding.types.Token localComponentType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localComponentTypeTracker = false;

        /**
         * field for ComponentNumber
         */
        protected org.apache.axis2.databinding.types.Token localComponentNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localComponentNumberTracker = false;

        /**
         * field for ComponentText
         */
        protected java.lang.String localComponentText;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localComponentTextTracker = false;

        /**
         * field for ComponentBatchNumber
         */
        protected org.apache.axis2.databinding.types.Token localComponentBatchNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localComponentBatchNumberTracker = false;

        /**
         * field for ProducedBy
         */
        protected org.apache.axis2.databinding.types.Token localProducedBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProducedByTracker = false;

        /**
         * field for ProductionDate
         */
        protected java.util.Date localProductionDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductionDateTracker = false;

        /**
         * field for SupplierOfRawMaterialAI
         */
        protected org.apache.axis2.databinding.types.Token localSupplierOfRawMaterialAI;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSupplierOfRawMaterialAITracker = false;

        /**
         * field for SupplierMaterialNumber
         */
        protected org.apache.axis2.databinding.types.Token localSupplierMaterialNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSupplierMaterialNumberTracker = false;

        public boolean isProductReferenceSpecified() {
            return localProductReferenceTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProductReference() {
            return localProductReference;
        }

        /**
         * Auto generated setter method
         * @param param ProductReference
         */
        public void setProductReference(
            org.apache.axis2.databinding.types.Token param) {
            localProductReferenceTracker = param != null;

            this.localProductReference = param;
        }

        public boolean isComponentTypeSpecified() {
            return localComponentTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getComponentType() {
            return localComponentType;
        }

        /**
         * Auto generated setter method
         * @param param ComponentType
         */
        public void setComponentType(
            org.apache.axis2.databinding.types.Token param) {
            localComponentTypeTracker = param != null;

            this.localComponentType = param;
        }

        public boolean isComponentNumberSpecified() {
            return localComponentNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getComponentNumber() {
            return localComponentNumber;
        }

        /**
         * Auto generated setter method
         * @param param ComponentNumber
         */
        public void setComponentNumber(
            org.apache.axis2.databinding.types.Token param) {
            localComponentNumberTracker = param != null;

            this.localComponentNumber = param;
        }

        public boolean isComponentTextSpecified() {
            return localComponentTextTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getComponentText() {
            return localComponentText;
        }

        /**
         * Auto generated setter method
         * @param param ComponentText
         */
        public void setComponentText(java.lang.String param) {
            localComponentTextTracker = param != null;

            this.localComponentText = param;
        }

        public boolean isComponentBatchNumberSpecified() {
            return localComponentBatchNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getComponentBatchNumber() {
            return localComponentBatchNumber;
        }

        /**
         * Auto generated setter method
         * @param param ComponentBatchNumber
         */
        public void setComponentBatchNumber(
            org.apache.axis2.databinding.types.Token param) {
            localComponentBatchNumberTracker = param != null;

            this.localComponentBatchNumber = param;
        }

        public boolean isProducedBySpecified() {
            return localProducedByTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProducedBy() {
            return localProducedBy;
        }

        /**
         * Auto generated setter method
         * @param param ProducedBy
         */
        public void setProducedBy(
            org.apache.axis2.databinding.types.Token param) {
            localProducedByTracker = param != null;

            this.localProducedBy = param;
        }

        public boolean isProductionDateSpecified() {
            return localProductionDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getProductionDate() {
            return localProductionDate;
        }

        /**
         * Auto generated setter method
         * @param param ProductionDate
         */
        public void setProductionDate(java.util.Date param) {
            localProductionDateTracker = param != null;

            this.localProductionDate = param;
        }

        public boolean isSupplierOfRawMaterialAISpecified() {
            return localSupplierOfRawMaterialAITracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSupplierOfRawMaterialAI() {
            return localSupplierOfRawMaterialAI;
        }

        /**
         * Auto generated setter method
         * @param param SupplierOfRawMaterialAI
         */
        public void setSupplierOfRawMaterialAI(
            org.apache.axis2.databinding.types.Token param) {
            localSupplierOfRawMaterialAITracker = param != null;

            this.localSupplierOfRawMaterialAI = param;
        }

        public boolean isSupplierMaterialNumberSpecified() {
            return localSupplierMaterialNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSupplierMaterialNumber() {
            return localSupplierMaterialNumber;
        }

        /**
         * Auto generated setter method
         * @param param SupplierMaterialNumber
         */
        public void setSupplierMaterialNumber(
            org.apache.axis2.databinding.types.Token param) {
            localSupplierMaterialNumberTracker = param != null;

            this.localSupplierMaterialNumber = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":FormulationDetails_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "FormulationDetails_type0", xmlWriter);
                }
            }

            if (localProductReferenceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductReference", xmlWriter);

                if (localProductReference == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductReference cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductReference));
                }

                xmlWriter.writeEndElement();
            }

            if (localComponentTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ComponentType", xmlWriter);

                if (localComponentType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ComponentType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localComponentType));
                }

                xmlWriter.writeEndElement();
            }

            if (localComponentNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ComponentNumber", xmlWriter);

                if (localComponentNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ComponentNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localComponentNumber));
                }

                xmlWriter.writeEndElement();
            }

            if (localComponentTextTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ComponentText", xmlWriter);

                if (localComponentText == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ComponentText cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localComponentText);
                }

                xmlWriter.writeEndElement();
            }

            if (localComponentBatchNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ComponentBatchNumber",
                    xmlWriter);

                if (localComponentBatchNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ComponentBatchNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localComponentBatchNumber));
                }

                xmlWriter.writeEndElement();
            }

            if (localProducedByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProducedBy", xmlWriter);

                if (localProducedBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProducedBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProducedBy));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductionDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductionDate", xmlWriter);

                if (localProductionDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductionDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductionDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localSupplierOfRawMaterialAITracker) {
                namespace = "";
                writeStartElement(null, namespace, "SupplierOfRawMaterialAI",
                    xmlWriter);

                if (localSupplierOfRawMaterialAI == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SupplierOfRawMaterialAI cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSupplierOfRawMaterialAI));
                }

                xmlWriter.writeEndElement();
            }

            if (localSupplierMaterialNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SupplierMaterialNumber",
                    xmlWriter);

                if (localSupplierMaterialNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SupplierMaterialNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSupplierMaterialNumber));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static FormulationDetails_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                FormulationDetails_type0 object = new FormulationDetails_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"FormulationDetails_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (FormulationDetails_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ProductReference").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ProductReference" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setProductReference(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ComponentType").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ComponentType" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setComponentType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ComponentNumber").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ComponentNumber" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setComponentNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ComponentText").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ComponentText" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setComponentText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ComponentBatchNumber").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "ComponentBatchNumber" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setComponentBatchNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ProducedBy").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ProducedBy" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setProducedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ProductionDate").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ProductionDate" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setProductionDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SupplierOfRawMaterialAI").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "SupplierOfRawMaterialAI" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSupplierOfRawMaterialAI(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SupplierMaterialNumber").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "SupplierMaterialNumber" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSupplierMaterialNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Packaging_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Packaging_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for ProductReference
         */
        protected org.apache.axis2.databinding.types.Token localProductReference;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductReferenceTracker = false;

        /**
         * field for PackagingNumber
         */
        protected org.apache.axis2.databinding.types.Token localPackagingNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackagingNumberTracker = false;

        /**
         * field for PackagingMaterialText
         */
        protected org.apache.axis2.databinding.types.Token localPackagingMaterialText;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackagingMaterialTextTracker = false;

        /**
         * field for PackagingMaterialBatch
         */
        protected java.lang.String localPackagingMaterialBatch;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPackagingMaterialBatchTracker = false;

        /**
         * field for CauseOfProblem
         */
        protected java.lang.String localCauseOfProblem;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCauseOfProblemTracker = false;

        /**
         * field for FilledBy
         */
        protected org.apache.axis2.databinding.types.Token localFilledBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFilledByTracker = false;

        /**
         * field for FillingDate
         */
        protected java.util.Date localFillingDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFillingDateTracker = false;

        public boolean isProductReferenceSpecified() {
            return localProductReferenceTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProductReference() {
            return localProductReference;
        }

        /**
         * Auto generated setter method
         * @param param ProductReference
         */
        public void setProductReference(
            org.apache.axis2.databinding.types.Token param) {
            localProductReferenceTracker = param != null;

            this.localProductReference = param;
        }

        public boolean isPackagingNumberSpecified() {
            return localPackagingNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPackagingNumber() {
            return localPackagingNumber;
        }

        /**
         * Auto generated setter method
         * @param param PackagingNumber
         */
        public void setPackagingNumber(
            org.apache.axis2.databinding.types.Token param) {
            localPackagingNumberTracker = param != null;

            this.localPackagingNumber = param;
        }

        public boolean isPackagingMaterialTextSpecified() {
            return localPackagingMaterialTextTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPackagingMaterialText() {
            return localPackagingMaterialText;
        }

        /**
         * Auto generated setter method
         * @param param PackagingMaterialText
         */
        public void setPackagingMaterialText(
            org.apache.axis2.databinding.types.Token param) {
            localPackagingMaterialTextTracker = param != null;

            this.localPackagingMaterialText = param;
        }

        public boolean isPackagingMaterialBatchSpecified() {
            return localPackagingMaterialBatchTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPackagingMaterialBatch() {
            return localPackagingMaterialBatch;
        }

        /**
         * Auto generated setter method
         * @param param PackagingMaterialBatch
         */
        public void setPackagingMaterialBatch(java.lang.String param) {
            localPackagingMaterialBatchTracker = param != null;

            this.localPackagingMaterialBatch = param;
        }

        public boolean isCauseOfProblemSpecified() {
            return localCauseOfProblemTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCauseOfProblem() {
            return localCauseOfProblem;
        }

        /**
         * Auto generated setter method
         * @param param CauseOfProblem
         */
        public void setCauseOfProblem(java.lang.String param) {
            localCauseOfProblemTracker = param != null;

            this.localCauseOfProblem = param;
        }

        public boolean isFilledBySpecified() {
            return localFilledByTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getFilledBy() {
            return localFilledBy;
        }

        /**
         * Auto generated setter method
         * @param param FilledBy
         */
        public void setFilledBy(org.apache.axis2.databinding.types.Token param) {
            localFilledByTracker = param != null;

            this.localFilledBy = param;
        }

        public boolean isFillingDateSpecified() {
            return localFillingDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getFillingDate() {
            return localFillingDate;
        }

        /**
         * Auto generated setter method
         * @param param FillingDate
         */
        public void setFillingDate(java.util.Date param) {
            localFillingDateTracker = param != null;

            this.localFillingDate = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Packaging_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Packaging_type0", xmlWriter);
                }
            }

            if (localProductReferenceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ProductReference", xmlWriter);

                if (localProductReference == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ProductReference cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductReference));
                }

                xmlWriter.writeEndElement();
            }

            if (localPackagingNumberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PackagingNumber", xmlWriter);

                if (localPackagingNumber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PackagingNumber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPackagingNumber));
                }

                xmlWriter.writeEndElement();
            }

            if (localPackagingMaterialTextTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PackagingMaterialText",
                    xmlWriter);

                if (localPackagingMaterialText == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PackagingMaterialText cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPackagingMaterialText));
                }

                xmlWriter.writeEndElement();
            }

            if (localPackagingMaterialBatchTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PackagingMaterialBatch",
                    xmlWriter);

                if (localPackagingMaterialBatch == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PackagingMaterialBatch cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPackagingMaterialBatch);
                }

                xmlWriter.writeEndElement();
            }

            if (localCauseOfProblemTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CauseOfProblem", xmlWriter);

                if (localCauseOfProblem == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CauseOfProblem cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCauseOfProblem);
                }

                xmlWriter.writeEndElement();
            }

            if (localFilledByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FilledBy", xmlWriter);

                if (localFilledBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FilledBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFilledBy));
                }

                xmlWriter.writeEndElement();
            }

            if (localFillingDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FillingDate", xmlWriter);

                if (localFillingDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FillingDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFillingDate));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Packaging_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Packaging_type0 object = new Packaging_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Packaging_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Packaging_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ProductReference").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ProductReference" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setProductReference(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "PackagingNumber").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "PackagingNumber" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setPackagingNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "PackagingMaterialText").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "PackagingMaterialText" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setPackagingMaterialText(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "PackagingMaterialBatch").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "PackagingMaterialBatch" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setPackagingMaterialBatch(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "CauseOfProblem").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "CauseOfProblem" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setCauseOfProblem(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("", "FilledBy").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "FilledBy" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setFilledBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "FillingDate").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "FillingDate" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setFillingDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Circumstances_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Circumstances_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for TreatedCropG
         */
        protected java.lang.String localTreatedCropG;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTreatedCropGTracker = false;

        /**
         * field for GrowthStageAtApplication
         */
        protected java.lang.String localGrowthStageAtApplication;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGrowthStageAtApplicationTracker = false;

        /**
         * field for DistanceHivesToTreatedArea
         */
        protected java.math.BigDecimal localDistanceHivesToTreatedArea;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDistanceHivesToTreatedAreaTracker = false;

        /**
         * field for UnitOfMeasureDistance
         */
        protected org.apache.axis2.databinding.types.Token localUnitOfMeasureDistance;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitOfMeasureDistanceTracker = false;

        /**
         * field for FloweringWeedsNearTheCrop
         */
        protected java.lang.String localFloweringWeedsNearTheCrop;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFloweringWeedsNearTheCropTracker = false;

        /**
         * field for CropInVicinityBeeAttractiv
         */
        protected java.lang.String localCropInVicinityBeeAttractiv;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCropInVicinityBeeAttractivTracker = false;

        /**
         * field for SignificantSprayDriftOccured
         */
        protected java.lang.String localSignificantSprayDriftOccured;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSignificantSprayDriftOccuredTracker = false;

        public boolean isTreatedCropGSpecified() {
            return localTreatedCropGTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTreatedCropG() {
            return localTreatedCropG;
        }

        /**
         * Auto generated setter method
         * @param param TreatedCropG
         */
        public void setTreatedCropG(java.lang.String param) {
            localTreatedCropGTracker = param != null;

            this.localTreatedCropG = param;
        }

        public boolean isGrowthStageAtApplicationSpecified() {
            return localGrowthStageAtApplicationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGrowthStageAtApplication() {
            return localGrowthStageAtApplication;
        }

        /**
         * Auto generated setter method
         * @param param GrowthStageAtApplication
         */
        public void setGrowthStageAtApplication(java.lang.String param) {
            localGrowthStageAtApplicationTracker = param != null;

            this.localGrowthStageAtApplication = param;
        }

        public boolean isDistanceHivesToTreatedAreaSpecified() {
            return localDistanceHivesToTreatedAreaTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDistanceHivesToTreatedArea() {
            return localDistanceHivesToTreatedArea;
        }

        /**
         * Auto generated setter method
         * @param param DistanceHivesToTreatedArea
         */
        public void setDistanceHivesToTreatedArea(java.math.BigDecimal param) {
            localDistanceHivesToTreatedAreaTracker = param != null;

            this.localDistanceHivesToTreatedArea = param;
        }

        public boolean isUnitOfMeasureDistanceSpecified() {
            return localUnitOfMeasureDistanceTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitOfMeasureDistance() {
            return localUnitOfMeasureDistance;
        }

        /**
         * Auto generated setter method
         * @param param UnitOfMeasureDistance
         */
        public void setUnitOfMeasureDistance(
            org.apache.axis2.databinding.types.Token param) {
            localUnitOfMeasureDistanceTracker = param != null;

            this.localUnitOfMeasureDistance = param;
        }

        public boolean isFloweringWeedsNearTheCropSpecified() {
            return localFloweringWeedsNearTheCropTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFloweringWeedsNearTheCrop() {
            return localFloweringWeedsNearTheCrop;
        }

        /**
         * Auto generated setter method
         * @param param FloweringWeedsNearTheCrop
         */
        public void setFloweringWeedsNearTheCrop(java.lang.String param) {
            localFloweringWeedsNearTheCropTracker = param != null;

            this.localFloweringWeedsNearTheCrop = param;
        }

        public boolean isCropInVicinityBeeAttractivSpecified() {
            return localCropInVicinityBeeAttractivTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCropInVicinityBeeAttractiv() {
            return localCropInVicinityBeeAttractiv;
        }

        /**
         * Auto generated setter method
         * @param param CropInVicinityBeeAttractiv
         */
        public void setCropInVicinityBeeAttractiv(java.lang.String param) {
            localCropInVicinityBeeAttractivTracker = param != null;

            this.localCropInVicinityBeeAttractiv = param;
        }

        public boolean isSignificantSprayDriftOccuredSpecified() {
            return localSignificantSprayDriftOccuredTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSignificantSprayDriftOccured() {
            return localSignificantSprayDriftOccured;
        }

        /**
         * Auto generated setter method
         * @param param SignificantSprayDriftOccured
         */
        public void setSignificantSprayDriftOccured(java.lang.String param) {
            localSignificantSprayDriftOccuredTracker = param != null;

            this.localSignificantSprayDriftOccured = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Circumstances_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Circumstances_type0", xmlWriter);
                }
            }

            if (localTreatedCropGTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TreatedCropG", xmlWriter);

                if (localTreatedCropG == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TreatedCropG cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTreatedCropG);
                }

                xmlWriter.writeEndElement();
            }

            if (localGrowthStageAtApplicationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "GrowthStageAtApplication",
                    xmlWriter);

                if (localGrowthStageAtApplication == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "GrowthStageAtApplication cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGrowthStageAtApplication);
                }

                xmlWriter.writeEndElement();
            }

            if (localDistanceHivesToTreatedAreaTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "DistanceHivesToTreatedArea", xmlWriter);

                if (localDistanceHivesToTreatedArea == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DistanceHivesToTreatedArea cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDistanceHivesToTreatedArea));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitOfMeasureDistanceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitOfMeasureDistance",
                    xmlWriter);

                if (localUnitOfMeasureDistance == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitOfMeasureDistance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitOfMeasureDistance));
                }

                xmlWriter.writeEndElement();
            }

            if (localFloweringWeedsNearTheCropTracker) {
                namespace = "";
                writeStartElement(null, namespace, "FloweringWeedsNearTheCrop",
                    xmlWriter);

                if (localFloweringWeedsNearTheCrop == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FloweringWeedsNearTheCrop cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFloweringWeedsNearTheCrop);
                }

                xmlWriter.writeEndElement();
            }

            if (localCropInVicinityBeeAttractivTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "CropInVicinityBeeAttractiv", xmlWriter);

                if (localCropInVicinityBeeAttractiv == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CropInVicinityBeeAttractiv cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCropInVicinityBeeAttractiv);
                }

                xmlWriter.writeEndElement();
            }

            if (localSignificantSprayDriftOccuredTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "SignificantSprayDriftOccured", xmlWriter);

                if (localSignificantSprayDriftOccured == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SignificantSprayDriftOccured cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSignificantSprayDriftOccured);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Circumstances_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Circumstances_type0 object = new Circumstances_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Circumstances_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Circumstances_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "TreatedCropG").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "TreatedCropG" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTreatedCropG(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "GrowthStageAtApplication").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "GrowthStageAtApplication" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setGrowthStageAtApplication(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "DistanceHivesToTreatedArea").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "DistanceHivesToTreatedArea" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDistanceHivesToTreatedArea(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitOfMeasureDistance").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitOfMeasureDistance" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitOfMeasureDistance(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "FloweringWeedsNearTheCrop").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "FloweringWeedsNearTheCrop" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setFloweringWeedsNearTheCrop(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "CropInVicinityBeeAttractiv").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "CropInVicinityBeeAttractiv" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setCropInVicinityBeeAttractiv(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SignificantSprayDriftOccured").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "SignificantSprayDriftOccured" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSignificantSprayDriftOccured(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CaseAddressListType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = caseAddressListType
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for Role
         * This was an Array!
         */
        protected org.apache.axis2.databinding.types.Token[] localRole;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRoleTracker = false;

        /**
         * field for Name
         */
        protected org.apache.axis2.databinding.types.Token localName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNameTracker = false;

        /**
         * field for Street
         */
        protected org.apache.axis2.databinding.types.Token localStreet;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStreetTracker = false;

        /**
         * field for PostalCode
         */
        protected org.apache.axis2.databinding.types.Token localPostalCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPostalCodeTracker = false;

        /**
         * field for City
         */
        protected org.apache.axis2.databinding.types.Token localCity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCityTracker = false;

        /**
         * field for Province
         */
        protected org.apache.axis2.databinding.types.Token localProvince;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProvinceTracker = false;

        /**
         * field for Phone
         */
        protected org.apache.axis2.databinding.types.Token localPhone;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPhoneTracker = false;

        /**
         * field for Email
         */
        protected org.apache.axis2.databinding.types.Token localEmail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmailTracker = false;

        /**
         * field for Fax
         */
        protected org.apache.axis2.databinding.types.Token localFax;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFaxTracker = false;

        /**
         * field for CommentOnAddress
         */
        protected org.apache.axis2.databinding.types.Token localCommentOnAddress;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentOnAddressTracker = false;

        public boolean isRoleSpecified() {
            return localRoleTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token[]
         */
        public org.apache.axis2.databinding.types.Token[] getRole() {
            return localRole;
        }

        /**
         * validate the array for Role
         */
        protected void validateRole(
            org.apache.axis2.databinding.types.Token[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Role
         */
        public void setRole(org.apache.axis2.databinding.types.Token[] param) {
            validateRole(param);

            localRoleTracker = param != null;

            this.localRole = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param org.apache.axis2.databinding.types.Token
         */
        public void addRole(org.apache.axis2.databinding.types.Token param) {
            if (localRole == null) {
                localRole = new org.apache.axis2.databinding.types.Token[] {  };
            }

            //update the setting tracker
            localRoleTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localRole);
            list.add(param);
            this.localRole = (org.apache.axis2.databinding.types.Token[]) list.toArray(new org.apache.axis2.databinding.types.Token[list.size()]);
        }

        public boolean isNameSpecified() {
            return localNameTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         * @param param Name
         */
        public void setName(org.apache.axis2.databinding.types.Token param) {
            localNameTracker = param != null;

            this.localName = param;
        }

        public boolean isStreetSpecified() {
            return localStreetTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getStreet() {
            return localStreet;
        }

        /**
         * Auto generated setter method
         * @param param Street
         */
        public void setStreet(org.apache.axis2.databinding.types.Token param) {
            localStreetTracker = param != null;

            this.localStreet = param;
        }

        public boolean isPostalCodeSpecified() {
            return localPostalCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPostalCode() {
            return localPostalCode;
        }

        /**
         * Auto generated setter method
         * @param param PostalCode
         */
        public void setPostalCode(
            org.apache.axis2.databinding.types.Token param) {
            localPostalCodeTracker = param != null;

            this.localPostalCode = param;
        }

        public boolean isCitySpecified() {
            return localCityTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCity() {
            return localCity;
        }

        /**
         * Auto generated setter method
         * @param param City
         */
        public void setCity(org.apache.axis2.databinding.types.Token param) {
            localCityTracker = param != null;

            this.localCity = param;
        }

        public boolean isProvinceSpecified() {
            return localProvinceTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getProvince() {
            return localProvince;
        }

        /**
         * Auto generated setter method
         * @param param Province
         */
        public void setProvince(org.apache.axis2.databinding.types.Token param) {
            localProvinceTracker = param != null;

            this.localProvince = param;
        }

        public boolean isPhoneSpecified() {
            return localPhoneTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getPhone() {
            return localPhone;
        }

        /**
         * Auto generated setter method
         * @param param Phone
         */
        public void setPhone(org.apache.axis2.databinding.types.Token param) {
            localPhoneTracker = param != null;

            this.localPhone = param;
        }

        public boolean isEmailSpecified() {
            return localEmailTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getEmail() {
            return localEmail;
        }

        /**
         * Auto generated setter method
         * @param param Email
         */
        public void setEmail(org.apache.axis2.databinding.types.Token param) {
            localEmailTracker = param != null;

            this.localEmail = param;
        }

        public boolean isFaxSpecified() {
            return localFaxTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getFax() {
            return localFax;
        }

        /**
         * Auto generated setter method
         * @param param Fax
         */
        public void setFax(org.apache.axis2.databinding.types.Token param) {
            localFaxTracker = param != null;

            this.localFax = param;
        }

        public boolean isCommentOnAddressSpecified() {
            return localCommentOnAddressTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getCommentOnAddress() {
            return localCommentOnAddress;
        }

        /**
         * Auto generated setter method
         * @param param CommentOnAddress
         */
        public void setCommentOnAddress(
            org.apache.axis2.databinding.types.Token param) {
            localCommentOnAddressTracker = param != null;

            this.localCommentOnAddress = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":caseAddressListType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "caseAddressListType", xmlWriter);
                }
            }

            if (localRoleTracker) {
                if (localRole != null) {
                    namespace = "";

                    for (int i = 0; i < localRole.length; i++) {
                        if (localRole[i] != null) {
                            writeStartElement(null, namespace, "Role", xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localRole[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // we have to do nothing since minOccurs is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Role cannot be null!!");
                }
            }

            if (localNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Name", xmlWriter);

                if (localName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Name cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localName));
                }

                xmlWriter.writeEndElement();
            }

            if (localStreetTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Street", xmlWriter);

                if (localStreet == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Street cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localStreet));
                }

                xmlWriter.writeEndElement();
            }

            if (localPostalCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PostalCode", xmlWriter);

                if (localPostalCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PostalCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPostalCode));
                }

                xmlWriter.writeEndElement();
            }

            if (localCityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "City", xmlWriter);

                if (localCity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "City cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCity));
                }

                xmlWriter.writeEndElement();
            }

            if (localProvinceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Province", xmlWriter);

                if (localProvince == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Province cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProvince));
                }

                xmlWriter.writeEndElement();
            }

            if (localPhoneTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Phone", xmlWriter);

                if (localPhone == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Phone cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPhone));
                }

                xmlWriter.writeEndElement();
            }

            if (localEmailTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Email", xmlWriter);

                if (localEmail == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Email cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEmail));
                }

                xmlWriter.writeEndElement();
            }

            if (localFaxTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Fax", xmlWriter);

                if (localFax == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Fax cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFax));
                }

                xmlWriter.writeEndElement();
            }

            if (localCommentOnAddressTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CommentOnAddress", xmlWriter);

                if (localCommentOnAddress == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CommentOnAddress cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCommentOnAddress));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CaseAddressListType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CaseAddressListType object = new CaseAddressListType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"caseAddressListType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CaseAddressListType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Role").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(reader.getElementText());

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "Role").equals(
                                            reader.getName())) {
                                    list1.add(reader.getElementText());
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setRole((org.apache.axis2.databinding.types.Token[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                org.apache.axis2.databinding.types.Token.class,
                                list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Name").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Name" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Street").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Street" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStreet(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PostalCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PostalCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPostalCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "City").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "City" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCity(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Province").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Province" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProvince(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Phone").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Phone" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPhone(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Email").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Email" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEmail(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Fax").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Fax" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFax(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CommentOnAddress").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CommentOnAddress" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCommentOnAddress(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Symptoms_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Symptoms_type0
           Namespace URI = http://cairnew.bcs.cnb/
           Namespace Prefix =
         */

        /**
         * field for IdentifierName
         */
        protected org.apache.axis2.databinding.types.Token localIdentifierName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdentifierNameTracker = false;

        /**
         * field for SymptomType
         */
        protected org.apache.axis2.databinding.types.Token localSymptomType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSymptomTypeTracker = false;

        /**
         * field for SymptomSeverity
         */
        protected org.apache.axis2.databinding.types.Token localSymptomSeverity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSymptomSeverityTracker = false;

        /**
         * field for DurationOfSymptom
         */
        protected java.math.BigDecimal localDurationOfSymptom;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDurationOfSymptomTracker = false;

        /**
         * field for UnitDurationOfSymptom
         */
        protected org.apache.axis2.databinding.types.Token localUnitDurationOfSymptom;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitDurationOfSymptomTracker = false;

        /**
         * field for ExposureToOnsetOfSymptom
         */
        protected java.math.BigDecimal localExposureToOnsetOfSymptom;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExposureToOnsetOfSymptomTracker = false;

        /**
         * field for UnitsOfMeasureOnset
         */
        protected org.apache.axis2.databinding.types.Token localUnitsOfMeasureOnset;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitsOfMeasureOnsetTracker = false;

        /**
         * field for OutcomeOfSymptom
         */
        protected org.apache.axis2.databinding.types.Token localOutcomeOfSymptom;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOutcomeOfSymptomTracker = false;

        /**
         * field for SpecifyDisability
         */
        protected org.apache.axis2.databinding.types.Token localSpecifyDisability;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSpecifyDisabilityTracker = false;

        public boolean isIdentifierNameSpecified() {
            return localIdentifierNameTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getIdentifierName() {
            return localIdentifierName;
        }

        /**
         * Auto generated setter method
         * @param param IdentifierName
         */
        public void setIdentifierName(
            org.apache.axis2.databinding.types.Token param) {
            localIdentifierNameTracker = param != null;

            this.localIdentifierName = param;
        }

        public boolean isSymptomTypeSpecified() {
            return localSymptomTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSymptomType() {
            return localSymptomType;
        }

        /**
         * Auto generated setter method
         * @param param SymptomType
         */
        public void setSymptomType(
            org.apache.axis2.databinding.types.Token param) {
            localSymptomTypeTracker = param != null;

            this.localSymptomType = param;
        }

        public boolean isSymptomSeveritySpecified() {
            return localSymptomSeverityTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSymptomSeverity() {
            return localSymptomSeverity;
        }

        /**
         * Auto generated setter method
         * @param param SymptomSeverity
         */
        public void setSymptomSeverity(
            org.apache.axis2.databinding.types.Token param) {
            localSymptomSeverityTracker = param != null;

            this.localSymptomSeverity = param;
        }

        public boolean isDurationOfSymptomSpecified() {
            return localDurationOfSymptomTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDurationOfSymptom() {
            return localDurationOfSymptom;
        }

        /**
         * Auto generated setter method
         * @param param DurationOfSymptom
         */
        public void setDurationOfSymptom(java.math.BigDecimal param) {
            localDurationOfSymptomTracker = param != null;

            this.localDurationOfSymptom = param;
        }

        public boolean isUnitDurationOfSymptomSpecified() {
            return localUnitDurationOfSymptomTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitDurationOfSymptom() {
            return localUnitDurationOfSymptom;
        }

        /**
         * Auto generated setter method
         * @param param UnitDurationOfSymptom
         */
        public void setUnitDurationOfSymptom(
            org.apache.axis2.databinding.types.Token param) {
            localUnitDurationOfSymptomTracker = param != null;

            this.localUnitDurationOfSymptom = param;
        }

        public boolean isExposureToOnsetOfSymptomSpecified() {
            return localExposureToOnsetOfSymptomTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getExposureToOnsetOfSymptom() {
            return localExposureToOnsetOfSymptom;
        }

        /**
         * Auto generated setter method
         * @param param ExposureToOnsetOfSymptom
         */
        public void setExposureToOnsetOfSymptom(java.math.BigDecimal param) {
            localExposureToOnsetOfSymptomTracker = param != null;

            this.localExposureToOnsetOfSymptom = param;
        }

        public boolean isUnitsOfMeasureOnsetSpecified() {
            return localUnitsOfMeasureOnsetTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getUnitsOfMeasureOnset() {
            return localUnitsOfMeasureOnset;
        }

        /**
         * Auto generated setter method
         * @param param UnitsOfMeasureOnset
         */
        public void setUnitsOfMeasureOnset(
            org.apache.axis2.databinding.types.Token param) {
            localUnitsOfMeasureOnsetTracker = param != null;

            this.localUnitsOfMeasureOnset = param;
        }

        public boolean isOutcomeOfSymptomSpecified() {
            return localOutcomeOfSymptomTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getOutcomeOfSymptom() {
            return localOutcomeOfSymptom;
        }

        /**
         * Auto generated setter method
         * @param param OutcomeOfSymptom
         */
        public void setOutcomeOfSymptom(
            org.apache.axis2.databinding.types.Token param) {
            localOutcomeOfSymptomTracker = param != null;

            this.localOutcomeOfSymptom = param;
        }

        public boolean isSpecifyDisabilitySpecified() {
            return localSpecifyDisabilityTracker;
        }

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Token
         */
        public org.apache.axis2.databinding.types.Token getSpecifyDisability() {
            return localSpecifyDisability;
        }

        /**
         * Auto generated setter method
         * @param param SpecifyDisability
         */
        public void setSpecifyDisability(
            org.apache.axis2.databinding.types.Token param) {
            localSpecifyDisabilityTracker = param != null;

            this.localSpecifyDisability = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://cairnew.bcs.cnb/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Symptoms_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Symptoms_type0", xmlWriter);
                }
            }

            if (localIdentifierNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "IdentifierName", xmlWriter);

                if (localIdentifierName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "IdentifierName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIdentifierName));
                }

                xmlWriter.writeEndElement();
            }

            if (localSymptomTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SymptomType", xmlWriter);

                if (localSymptomType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SymptomType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSymptomType));
                }

                xmlWriter.writeEndElement();
            }

            if (localSymptomSeverityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SymptomSeverity", xmlWriter);

                if (localSymptomSeverity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SymptomSeverity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSymptomSeverity));
                }

                xmlWriter.writeEndElement();
            }

            if (localDurationOfSymptomTracker) {
                namespace = "";
                writeStartElement(null, namespace, "DurationOfSymptom",
                    xmlWriter);

                if (localDurationOfSymptom == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "DurationOfSymptom cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDurationOfSymptom));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitDurationOfSymptomTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitDurationOfSymptom",
                    xmlWriter);

                if (localUnitDurationOfSymptom == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitDurationOfSymptom cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitDurationOfSymptom));
                }

                xmlWriter.writeEndElement();
            }

            if (localExposureToOnsetOfSymptomTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ExposureToOnsetOfSymptom",
                    xmlWriter);

                if (localExposureToOnsetOfSymptom == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ExposureToOnsetOfSymptom cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localExposureToOnsetOfSymptom));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitsOfMeasureOnsetTracker) {
                namespace = "";
                writeStartElement(null, namespace, "UnitsOfMeasureOnset",
                    xmlWriter);

                if (localUnitsOfMeasureOnset == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UnitsOfMeasureOnset cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitsOfMeasureOnset));
                }

                xmlWriter.writeEndElement();
            }

            if (localOutcomeOfSymptomTracker) {
                namespace = "";
                writeStartElement(null, namespace, "OutcomeOfSymptom", xmlWriter);

                if (localOutcomeOfSymptom == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OutcomeOfSymptom cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOutcomeOfSymptom));
                }

                xmlWriter.writeEndElement();
            }

            if (localSpecifyDisabilityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SpecifyDisability",
                    xmlWriter);

                if (localSpecifyDisability == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SpecifyDisability cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSpecifyDisability));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://cairnew.bcs.cnb/")) {
                return "";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Symptoms_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Symptoms_type0 object = new Symptoms_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Symptoms_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Symptoms_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "IdentifierName").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "IdentifierName" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setIdentifierName(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SymptomType").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "SymptomType" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSymptomType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SymptomSeverity").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "SymptomSeverity" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSymptomSeverity(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "DurationOfSymptom").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "DurationOfSymptom" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDurationOfSymptom(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitDurationOfSymptom").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitDurationOfSymptom" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitDurationOfSymptom(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "ExposureToOnsetOfSymptom").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "ExposureToOnsetOfSymptom" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setExposureToOnsetOfSymptom(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "UnitsOfMeasureOnset").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " +
                                        "UnitsOfMeasureOnset" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setUnitsOfMeasureOnset(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "OutcomeOfSymptom").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "OutcomeOfSymptom" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setOutcomeOfSymptom(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else
                             if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName("",
                                        "SpecifyDisability").equals(
                                        reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "SpecifyDisability" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setSpecifyDisability(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(
                                        content));

                                reader.next();
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }
}
